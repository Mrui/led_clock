
led_clock.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 10 00 10 5d 01 00 00 f5 01 00 00 fd 01 00 00     ....]...........
	...
      2c:	05 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
      3c:	01 04 00 00 a1 06 00 00 b5 06 00 00 e5 06 00 00     ................
      4c:	61 07 00 00 bd 07 00 00 1d 02 00 00 1d 02 00 00     a...............
      5c:	1d 02 00 00 1d 02 00 00 1d 02 00 00 00 00 00 00     ................
	...
      78:	1d 02 00 00 1d 02 00 00 1d 02 00 00 1d 02 00 00     ................
      88:	09 04 00 00 d9 05 00 00 1d 02 00 00 51 06 00 00     ............Q...
      98:	1d 02 00 00 1d 02 00 00 1d 02 00 00 1d 02 00 00     ................
      a8:	1d 02 00 00 1d 02 00 00 00 00 00 00 00 00 00 00     ................
      b8:	1d 02 00 00 00 00 00 00                             ........

000000c0 <__data_section_table>:
      c0:	00002730 	.word	0x00002730
      c4:	10000000 	.word	0x10000000
      c8:	00000000 	.word	0x00000000
      cc:	00002730 	.word	0x00002730
      d0:	20004000 	.word	0x20004000
      d4:	00000000 	.word	0x00000000

000000d8 <__bss_section_table>:
      d8:	10000000 	.word	0x10000000
      dc:	00000230 	.word	0x00000230
      e0:	20004000 	.word	0x20004000
      e4:	00000000 	.word	0x00000000

000000e8 <data_init>:
// are written as separate functions rather than being inlined within the
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
      e8:	b580      	push	{r7, lr}
      ea:	b088      	sub	sp, #32
      ec:	af00      	add	r7, sp, #0
      ee:	60f8      	str	r0, [r7, #12]
      f0:	60b9      	str	r1, [r7, #8]
      f2:	607a      	str	r2, [r7, #4]
    unsigned int *pulDest = (unsigned int*) start;
      f4:	68bb      	ldr	r3, [r7, #8]
      f6:	61fb      	str	r3, [r7, #28]
    unsigned int *pulSrc = (unsigned int*) romstart;
      f8:	68fb      	ldr	r3, [r7, #12]
      fa:	61bb      	str	r3, [r7, #24]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
      fc:	2300      	movs	r3, #0
      fe:	617b      	str	r3, [r7, #20]
     100:	e00a      	b.n	118 <data_init+0x30>
        *pulDest++ = *pulSrc++;
     102:	69fb      	ldr	r3, [r7, #28]
     104:	1d1a      	adds	r2, r3, #4
     106:	61fa      	str	r2, [r7, #28]
     108:	69ba      	ldr	r2, [r7, #24]
     10a:	1d11      	adds	r1, r2, #4
     10c:	61b9      	str	r1, [r7, #24]
     10e:	6812      	ldr	r2, [r2, #0]
     110:	601a      	str	r2, [r3, #0]
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     112:	697b      	ldr	r3, [r7, #20]
     114:	3304      	adds	r3, #4
     116:	617b      	str	r3, [r7, #20]
     118:	697a      	ldr	r2, [r7, #20]
     11a:	687b      	ldr	r3, [r7, #4]
     11c:	429a      	cmp	r2, r3
     11e:	d3f0      	bcc.n	102 <data_init+0x1a>
        *pulDest++ = *pulSrc++;
}
     120:	46bd      	mov	sp, r7
     122:	b008      	add	sp, #32
     124:	bd80      	pop	{r7, pc}
     126:	46c0      	nop			; (mov r8, r8)

00000128 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
     128:	b580      	push	{r7, lr}
     12a:	b084      	sub	sp, #16
     12c:	af00      	add	r7, sp, #0
     12e:	6078      	str	r0, [r7, #4]
     130:	6039      	str	r1, [r7, #0]
    unsigned int *pulDest = (unsigned int*) start;
     132:	687b      	ldr	r3, [r7, #4]
     134:	60fb      	str	r3, [r7, #12]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     136:	2300      	movs	r3, #0
     138:	60bb      	str	r3, [r7, #8]
     13a:	e007      	b.n	14c <bss_init+0x24>
        *pulDest++ = 0;
     13c:	68fb      	ldr	r3, [r7, #12]
     13e:	1d1a      	adds	r2, r3, #4
     140:	60fa      	str	r2, [r7, #12]
     142:	2200      	movs	r2, #0
     144:	601a      	str	r2, [r3, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     146:	68bb      	ldr	r3, [r7, #8]
     148:	3304      	adds	r3, #4
     14a:	60bb      	str	r3, [r7, #8]
     14c:	68ba      	ldr	r2, [r7, #8]
     14e:	683b      	ldr	r3, [r7, #0]
     150:	429a      	cmp	r2, r3
     152:	d3f3      	bcc.n	13c <bss_init+0x14>
        *pulDest++ = 0;
}
     154:	46bd      	mov	sp, r7
     156:	b004      	add	sp, #16
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)

0000015c <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
     15c:	b580      	push	{r7, lr}
     15e:	b086      	sub	sp, #24
     160:	af00      	add	r7, sp, #0

  // Optionally enable RAM banks that may be off by default at reset
#if !defined (DONT_ENABLE_DISABLED_RAMBANKS)
  volatile unsigned int *SYSCON_SYSAHBCLKCTRL = (unsigned int *) 0x40048080;
     162:	4b20      	ldr	r3, [pc, #128]	; (1e4 <ResetISR+0x88>)
     164:	613b      	str	r3, [r7, #16]
  // Ensure that RAM1(26) and USBSRAM(27) bits in SYSAHBCLKCTRL are set
  *SYSCON_SYSAHBCLKCTRL |= (1 << 26) | (1 <<27);
     166:	693b      	ldr	r3, [r7, #16]
     168:	681b      	ldr	r3, [r3, #0]
     16a:	22c0      	movs	r2, #192	; 0xc0
     16c:	0512      	lsls	r2, r2, #20
     16e:	431a      	orrs	r2, r3
     170:	693b      	ldr	r3, [r7, #16]
     172:	601a      	str	r2, [r3, #0]
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
     174:	4b1c      	ldr	r3, [pc, #112]	; (1e8 <ResetISR+0x8c>)
     176:	617b      	str	r3, [r7, #20]

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
     178:	e016      	b.n	1a8 <ResetISR+0x4c>
        LoadAddr = *SectionTableAddr++;
     17a:	697b      	ldr	r3, [r7, #20]
     17c:	1d1a      	adds	r2, r3, #4
     17e:	617a      	str	r2, [r7, #20]
     180:	681b      	ldr	r3, [r3, #0]
     182:	60fb      	str	r3, [r7, #12]
        ExeAddr = *SectionTableAddr++;
     184:	697b      	ldr	r3, [r7, #20]
     186:	1d1a      	adds	r2, r3, #4
     188:	617a      	str	r2, [r7, #20]
     18a:	681b      	ldr	r3, [r3, #0]
     18c:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
     18e:	697b      	ldr	r3, [r7, #20]
     190:	1d1a      	adds	r2, r3, #4
     192:	617a      	str	r2, [r7, #20]
     194:	681b      	ldr	r3, [r3, #0]
     196:	607b      	str	r3, [r7, #4]
        data_init(LoadAddr, ExeAddr, SectionLen);
     198:	68f9      	ldr	r1, [r7, #12]
     19a:	68ba      	ldr	r2, [r7, #8]
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	1c08      	adds	r0, r1, #0
     1a0:	1c11      	adds	r1, r2, #0
     1a2:	1c1a      	adds	r2, r3, #0
     1a4:	f7ff ffa0 	bl	e8 <data_init>

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
     1a8:	697a      	ldr	r2, [r7, #20]
     1aa:	4b10      	ldr	r3, [pc, #64]	; (1ec <ResetISR+0x90>)
     1ac:	429a      	cmp	r2, r3
     1ae:	d3e4      	bcc.n	17a <ResetISR+0x1e>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
     1b0:	e00f      	b.n	1d2 <ResetISR+0x76>
        ExeAddr = *SectionTableAddr++;
     1b2:	697b      	ldr	r3, [r7, #20]
     1b4:	1d1a      	adds	r2, r3, #4
     1b6:	617a      	str	r2, [r7, #20]
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
     1bc:	697b      	ldr	r3, [r7, #20]
     1be:	1d1a      	adds	r2, r3, #4
     1c0:	617a      	str	r2, [r7, #20]
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	607b      	str	r3, [r7, #4]
        bss_init(ExeAddr, SectionLen);
     1c6:	68ba      	ldr	r2, [r7, #8]
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	1c10      	adds	r0, r2, #0
     1cc:	1c19      	adds	r1, r3, #0
     1ce:	f7ff ffab 	bl	128 <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
     1d2:	697a      	ldr	r2, [r7, #20]
     1d4:	4b06      	ldr	r3, [pc, #24]	; (1f0 <ResetISR+0x94>)
     1d6:	429a      	cmp	r2, r3
     1d8:	d3eb      	bcc.n	1b2 <ResetISR+0x56>
    pDivRom_idiv = (unsigned int *)div_ptr[0];
    pDivRom_uidiv = (unsigned int *)div_ptr[1];
#endif

#if defined (__USE_CMSIS) || defined (__USE_LPCOPEN)
    SystemInit();
     1da:	f001 fdc3 	bl	1d64 <SystemInit>
    __libc_init_array();
#endif

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main() ;
     1de:	f001 fe29 	bl	1e34 <__main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
     1e2:	e7fe      	b.n	1e2 <ResetISR+0x86>
     1e4:	40048080 	.word	0x40048080
     1e8:	000000c0 	.word	0x000000c0
     1ec:	000000d8 	.word	0x000000d8
     1f0:	000000e8 	.word	0x000000e8

000001f4 <NMI_Handler>:
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void)
{
     1f4:	b580      	push	{r7, lr}
     1f6:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     1f8:	e7fe      	b.n	1f8 <NMI_Handler+0x4>
     1fa:	46c0      	nop			; (mov r8, r8)

000001fc <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     200:	e7fe      	b.n	200 <HardFault_Handler+0x4>
     202:	46c0      	nop			; (mov r8, r8)

00000204 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void)
{
     204:	b580      	push	{r7, lr}
     206:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     208:	e7fe      	b.n	208 <SVC_Handler+0x4>
     20a:	46c0      	nop			; (mov r8, r8)

0000020c <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void)
{
     20c:	b580      	push	{r7, lr}
     20e:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     210:	e7fe      	b.n	210 <PendSV_Handler+0x4>
     212:	46c0      	nop			; (mov r8, r8)
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void)
{
     214:	b580      	push	{r7, lr}
     216:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     218:	e7fe      	b.n	218 <PendSV_Handler+0xc>
     21a:	46c0      	nop			; (mov r8, r8)

0000021c <ADC_IRQHandler>:
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void)
{
     21c:	b580      	push	{r7, lr}
     21e:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     220:	e7fe      	b.n	220 <ADC_IRQHandler+0x4>
     222:	46c0      	nop			; (mov r8, r8)
     224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     22c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     300:	b580      	push	{r7, lr}
     302:	b082      	sub	sp, #8
     304:	af00      	add	r7, sp, #0
     306:	1c02      	adds	r2, r0, #0
     308:	1dfb      	adds	r3, r7, #7
     30a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     30c:	4b06      	ldr	r3, [pc, #24]	; (328 <NVIC_EnableIRQ+0x28>)
     30e:	1dfa      	adds	r2, r7, #7
     310:	7812      	ldrb	r2, [r2, #0]
     312:	1c11      	adds	r1, r2, #0
     314:	221f      	movs	r2, #31
     316:	400a      	ands	r2, r1
     318:	2101      	movs	r1, #1
     31a:	4091      	lsls	r1, r2
     31c:	1c0a      	adds	r2, r1, #0
     31e:	601a      	str	r2, [r3, #0]
}
     320:	46bd      	mov	sp, r7
     322:	b002      	add	sp, #8
     324:	bd80      	pop	{r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	e000e100 	.word	0xe000e100

0000032c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     32c:	b5b0      	push	{r4, r5, r7, lr}
     32e:	b082      	sub	sp, #8
     330:	af00      	add	r7, sp, #0
     332:	1c02      	adds	r2, r0, #0
     334:	6039      	str	r1, [r7, #0]
     336:	1dfb      	adds	r3, r7, #7
     338:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     33a:	1dfb      	adds	r3, r7, #7
     33c:	781b      	ldrb	r3, [r3, #0]
     33e:	2b7f      	cmp	r3, #127	; 0x7f
     340:	d92f      	bls.n	3a2 <NVIC_SetPriority+0x76>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
     342:	4c2d      	ldr	r4, [pc, #180]	; (3f8 <NVIC_SetPriority+0xcc>)
     344:	1dfb      	adds	r3, r7, #7
     346:	781b      	ldrb	r3, [r3, #0]
     348:	1c1a      	adds	r2, r3, #0
     34a:	230f      	movs	r3, #15
     34c:	4013      	ands	r3, r2
     34e:	3b08      	subs	r3, #8
     350:	0899      	lsrs	r1, r3, #2
     352:	4a29      	ldr	r2, [pc, #164]	; (3f8 <NVIC_SetPriority+0xcc>)
     354:	1dfb      	adds	r3, r7, #7
     356:	781b      	ldrb	r3, [r3, #0]
     358:	1c18      	adds	r0, r3, #0
     35a:	230f      	movs	r3, #15
     35c:	4003      	ands	r3, r0
     35e:	3b08      	subs	r3, #8
     360:	089b      	lsrs	r3, r3, #2
     362:	3306      	adds	r3, #6
     364:	009b      	lsls	r3, r3, #2
     366:	18d3      	adds	r3, r2, r3
     368:	685b      	ldr	r3, [r3, #4]
     36a:	1dfa      	adds	r2, r7, #7
     36c:	7812      	ldrb	r2, [r2, #0]
     36e:	1c10      	adds	r0, r2, #0
     370:	2203      	movs	r2, #3
     372:	4002      	ands	r2, r0
     374:	00d2      	lsls	r2, r2, #3
     376:	1c10      	adds	r0, r2, #0
     378:	22ff      	movs	r2, #255	; 0xff
     37a:	4082      	lsls	r2, r0
     37c:	43d2      	mvns	r2, r2
     37e:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     380:	683b      	ldr	r3, [r7, #0]
     382:	015b      	lsls	r3, r3, #5
     384:	20ff      	movs	r0, #255	; 0xff
     386:	4003      	ands	r3, r0
     388:	1df8      	adds	r0, r7, #7
     38a:	7800      	ldrb	r0, [r0, #0]
     38c:	1c05      	adds	r5, r0, #0
     38e:	2003      	movs	r0, #3
     390:	4028      	ands	r0, r5
     392:	00c0      	lsls	r0, r0, #3
     394:	4083      	lsls	r3, r0
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
     396:	431a      	orrs	r2, r3
     398:	1d8b      	adds	r3, r1, #6
     39a:	009b      	lsls	r3, r3, #2
     39c:	18e3      	adds	r3, r4, r3
     39e:	605a      	str	r2, [r3, #4]
     3a0:	e026      	b.n	3f0 <NVIC_SetPriority+0xc4>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     3a2:	4c16      	ldr	r4, [pc, #88]	; (3fc <NVIC_SetPriority+0xd0>)
     3a4:	1dfb      	adds	r3, r7, #7
     3a6:	781b      	ldrb	r3, [r3, #0]
     3a8:	b25b      	sxtb	r3, r3
     3aa:	089b      	lsrs	r3, r3, #2
     3ac:	4913      	ldr	r1, [pc, #76]	; (3fc <NVIC_SetPriority+0xd0>)
     3ae:	1dfa      	adds	r2, r7, #7
     3b0:	7812      	ldrb	r2, [r2, #0]
     3b2:	b252      	sxtb	r2, r2
     3b4:	0892      	lsrs	r2, r2, #2
     3b6:	32c0      	adds	r2, #192	; 0xc0
     3b8:	0092      	lsls	r2, r2, #2
     3ba:	5852      	ldr	r2, [r2, r1]
     3bc:	1df9      	adds	r1, r7, #7
     3be:	7809      	ldrb	r1, [r1, #0]
     3c0:	1c08      	adds	r0, r1, #0
     3c2:	2103      	movs	r1, #3
     3c4:	4001      	ands	r1, r0
     3c6:	00c9      	lsls	r1, r1, #3
     3c8:	1c08      	adds	r0, r1, #0
     3ca:	21ff      	movs	r1, #255	; 0xff
     3cc:	4081      	lsls	r1, r0
     3ce:	43c9      	mvns	r1, r1
     3d0:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     3d2:	683a      	ldr	r2, [r7, #0]
     3d4:	0152      	lsls	r2, r2, #5
     3d6:	20ff      	movs	r0, #255	; 0xff
     3d8:	4002      	ands	r2, r0
     3da:	1df8      	adds	r0, r7, #7
     3dc:	7800      	ldrb	r0, [r0, #0]
     3de:	1c05      	adds	r5, r0, #0
     3e0:	2003      	movs	r0, #3
     3e2:	4028      	ands	r0, r5
     3e4:	00c0      	lsls	r0, r0, #3
     3e6:	4082      	lsls	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     3e8:	430a      	orrs	r2, r1
     3ea:	33c0      	adds	r3, #192	; 0xc0
     3ec:	009b      	lsls	r3, r3, #2
     3ee:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     3f0:	46bd      	mov	sp, r7
     3f2:	b002      	add	sp, #8
     3f4:	bdb0      	pop	{r4, r5, r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	e000ed00 	.word	0xe000ed00
     3fc:	e000e100 	.word	0xe000e100

00000400 <SysTick_Handler>:
void usart_senddata(char send);

/******************************************************************************
 System Tick Interrupt service function
 ******************************************************************************/
void SysTick_Handler(void) {
     400:	b580      	push	{r7, lr}
     402:	af00      	add	r7, sp, #0
	/* write code here */

}
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}

00000408 <TIMER32_0_IRQHandler>:

void TIMER32_0_IRQHandler(void) {
     408:	b580      	push	{r7, lr}
     40a:	af00      	add	r7, sp, #0
	/* write code here */
	i++;
     40c:	4b63      	ldr	r3, [pc, #396]	; (59c <TIMER32_0_IRQHandler+0x194>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	1c5a      	adds	r2, r3, #1
     412:	4b62      	ldr	r3, [pc, #392]	; (59c <TIMER32_0_IRQHandler+0x194>)
     414:	601a      	str	r2, [r3, #0]
	counter++;
     416:	4b62      	ldr	r3, [pc, #392]	; (5a0 <TIMER32_0_IRQHandler+0x198>)
     418:	681b      	ldr	r3, [r3, #0]
     41a:	1c5a      	adds	r2, r3, #1
     41c:	4b60      	ldr	r3, [pc, #384]	; (5a0 <TIMER32_0_IRQHandler+0x198>)
     41e:	601a      	str	r2, [r3, #0]
	usart_delay++;
     420:	4b60      	ldr	r3, [pc, #384]	; (5a4 <TIMER32_0_IRQHandler+0x19c>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	1c5a      	adds	r2, r3, #1
     426:	4b5f      	ldr	r3, [pc, #380]	; (5a4 <TIMER32_0_IRQHandler+0x19c>)
     428:	601a      	str	r2, [r3, #0]
	if (i > 4) {
     42a:	4b5c      	ldr	r3, [pc, #368]	; (59c <TIMER32_0_IRQHandler+0x194>)
     42c:	681b      	ldr	r3, [r3, #0]
     42e:	2b04      	cmp	r3, #4
     430:	dd38      	ble.n	4a4 <TIMER32_0_IRQHandler+0x9c>
		i = 0;
     432:	4b5a      	ldr	r3, [pc, #360]	; (59c <TIMER32_0_IRQHandler+0x194>)
     434:	2200      	movs	r2, #0
     436:	601a      	str	r2, [r3, #0]
		if (sw2_laststate == 1 && !SW2_DATA) {
     438:	4b5b      	ldr	r3, [pc, #364]	; (5a8 <TIMER32_0_IRQHandler+0x1a0>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	2b01      	cmp	r3, #1
     43e:	d108      	bne.n	452 <TIMER32_0_IRQHandler+0x4a>
     440:	23a0      	movs	r3, #160	; 0xa0
     442:	05db      	lsls	r3, r3, #23
     444:	7d1b      	ldrb	r3, [r3, #20]
     446:	b2db      	uxtb	r3, r3
     448:	2b00      	cmp	r3, #0
     44a:	d102      	bne.n	452 <TIMER32_0_IRQHandler+0x4a>
			sw2_laststate = 0;
     44c:	4b56      	ldr	r3, [pc, #344]	; (5a8 <TIMER32_0_IRQHandler+0x1a0>)
     44e:	2200      	movs	r2, #0
     450:	601a      	str	r2, [r3, #0]
		}
		if (sw3_laststate == 1 && !SW3_DATA) {
     452:	4b56      	ldr	r3, [pc, #344]	; (5ac <TIMER32_0_IRQHandler+0x1a4>)
     454:	681b      	ldr	r3, [r3, #0]
     456:	2b01      	cmp	r3, #1
     458:	d108      	bne.n	46c <TIMER32_0_IRQHandler+0x64>
     45a:	23a0      	movs	r3, #160	; 0xa0
     45c:	05db      	lsls	r3, r3, #23
     45e:	789b      	ldrb	r3, [r3, #2]
     460:	b2db      	uxtb	r3, r3
     462:	2b00      	cmp	r3, #0
     464:	d102      	bne.n	46c <TIMER32_0_IRQHandler+0x64>
			sw3_laststate = 0;
     466:	4b51      	ldr	r3, [pc, #324]	; (5ac <TIMER32_0_IRQHandler+0x1a4>)
     468:	2200      	movs	r2, #0
     46a:	601a      	str	r2, [r3, #0]
		}
		if (sw4_laststate == 1 && !SW4_DATA) {
     46c:	4b50      	ldr	r3, [pc, #320]	; (5b0 <TIMER32_0_IRQHandler+0x1a8>)
     46e:	681b      	ldr	r3, [r3, #0]
     470:	2b01      	cmp	r3, #1
     472:	d109      	bne.n	488 <TIMER32_0_IRQHandler+0x80>
     474:	23a0      	movs	r3, #160	; 0xa0
     476:	05db      	lsls	r3, r3, #23
     478:	223a      	movs	r2, #58	; 0x3a
     47a:	5c9b      	ldrb	r3, [r3, r2]
     47c:	b2db      	uxtb	r3, r3
     47e:	2b00      	cmp	r3, #0
     480:	d102      	bne.n	488 <TIMER32_0_IRQHandler+0x80>
			sw4_laststate = 0;
     482:	4b4b      	ldr	r3, [pc, #300]	; (5b0 <TIMER32_0_IRQHandler+0x1a8>)
     484:	2200      	movs	r2, #0
     486:	601a      	str	r2, [r3, #0]
		}
		if (sw5_laststate == 1 && !SW5_DATA) {
     488:	4b4a      	ldr	r3, [pc, #296]	; (5b4 <TIMER32_0_IRQHandler+0x1ac>)
     48a:	681b      	ldr	r3, [r3, #0]
     48c:	2b01      	cmp	r3, #1
     48e:	d109      	bne.n	4a4 <TIMER32_0_IRQHandler+0x9c>
     490:	23a0      	movs	r3, #160	; 0xa0
     492:	05db      	lsls	r3, r3, #23
     494:	223b      	movs	r2, #59	; 0x3b
     496:	5c9b      	ldrb	r3, [r3, r2]
     498:	b2db      	uxtb	r3, r3
     49a:	2b00      	cmp	r3, #0
     49c:	d102      	bne.n	4a4 <TIMER32_0_IRQHandler+0x9c>
			sw5_laststate = 0;
     49e:	4b45      	ldr	r3, [pc, #276]	; (5b4 <TIMER32_0_IRQHandler+0x1ac>)
     4a0:	2200      	movs	r2, #0
     4a2:	601a      	str	r2, [r3, #0]
		}
	}

	if (fsm == GPS) {
     4a4:	4b44      	ldr	r3, [pc, #272]	; (5b8 <TIMER32_0_IRQHandler+0x1b0>)
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	b2db      	uxtb	r3, r3
     4aa:	2b01      	cmp	r3, #1
     4ac:	d113      	bne.n	4d6 <TIMER32_0_IRQHandler+0xce>
		if ((i % 10 == 0))
     4ae:	4b3b      	ldr	r3, [pc, #236]	; (59c <TIMER32_0_IRQHandler+0x194>)
     4b0:	681b      	ldr	r3, [r3, #0]
     4b2:	1c18      	adds	r0, r3, #0
     4b4:	210a      	movs	r1, #10
     4b6:	f002 f80b 	bl	24d0 <__aeabi_idiv>
     4ba:	1e0b      	subs	r3, r1, #0
     4bc:	d116      	bne.n	4ec <TIMER32_0_IRQHandler+0xe4>
			DUAL_LEDS_TOGGLE;
     4be:	23a0      	movs	r3, #160	; 0xa0
     4c0:	05db      	lsls	r3, r3, #23
     4c2:	22a0      	movs	r2, #160	; 0xa0
     4c4:	05d2      	lsls	r2, r2, #23
     4c6:	493d      	ldr	r1, [pc, #244]	; (5bc <TIMER32_0_IRQHandler+0x1b4>)
     4c8:	5852      	ldr	r2, [r2, r1]
     4ca:	2180      	movs	r1, #128	; 0x80
     4cc:	0349      	lsls	r1, r1, #13
     4ce:	430a      	orrs	r2, r1
     4d0:	493a      	ldr	r1, [pc, #232]	; (5bc <TIMER32_0_IRQHandler+0x1b4>)
     4d2:	505a      	str	r2, [r3, r1]
     4d4:	e00a      	b.n	4ec <TIMER32_0_IRQHandler+0xe4>
	}
	else
		DUAL_LEDS_ON;
     4d6:	23a0      	movs	r3, #160	; 0xa0
     4d8:	05db      	lsls	r3, r3, #23
     4da:	22a0      	movs	r2, #160	; 0xa0
     4dc:	05d2      	lsls	r2, r2, #23
     4de:	4938      	ldr	r1, [pc, #224]	; (5c0 <TIMER32_0_IRQHandler+0x1b8>)
     4e0:	5852      	ldr	r2, [r2, r1]
     4e2:	2180      	movs	r1, #128	; 0x80
     4e4:	0349      	lsls	r1, r1, #13
     4e6:	430a      	orrs	r2, r1
     4e8:	4935      	ldr	r1, [pc, #212]	; (5c0 <TIMER32_0_IRQHandler+0x1b8>)
     4ea:	505a      	str	r2, [r3, r1]

	if (usart_delay > 4 && usart_sending != 0) {
     4ec:	4b2d      	ldr	r3, [pc, #180]	; (5a4 <TIMER32_0_IRQHandler+0x19c>)
     4ee:	681b      	ldr	r3, [r3, #0]
     4f0:	2b04      	cmp	r3, #4
     4f2:	dd06      	ble.n	502 <TIMER32_0_IRQHandler+0xfa>
     4f4:	4b33      	ldr	r3, [pc, #204]	; (5c4 <TIMER32_0_IRQHandler+0x1bc>)
     4f6:	681b      	ldr	r3, [r3, #0]
     4f8:	2b00      	cmp	r3, #0
     4fa:	d002      	beq.n	502 <TIMER32_0_IRQHandler+0xfa>
		usart_sending = 0;
     4fc:	4b31      	ldr	r3, [pc, #196]	; (5c4 <TIMER32_0_IRQHandler+0x1bc>)
     4fe:	2200      	movs	r2, #0
     500:	601a      	str	r2, [r3, #0]
	}

	if (counter > 6000) {
     502:	4b27      	ldr	r3, [pc, #156]	; (5a0 <TIMER32_0_IRQHandler+0x198>)
     504:	681b      	ldr	r3, [r3, #0]
     506:	4a30      	ldr	r2, [pc, #192]	; (5c8 <TIMER32_0_IRQHandler+0x1c0>)
     508:	4293      	cmp	r3, r2
     50a:	dd42      	ble.n	592 <TIMER32_0_IRQHandler+0x18a>
		counter = 0;
     50c:	4b24      	ldr	r3, [pc, #144]	; (5a0 <TIMER32_0_IRQHandler+0x198>)
     50e:	2200      	movs	r2, #0
     510:	601a      	str	r2, [r3, #0]
		if (minutes[1] < 9)
     512:	4b2e      	ldr	r3, [pc, #184]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     514:	785b      	ldrb	r3, [r3, #1]
     516:	2b08      	cmp	r3, #8
     518:	d806      	bhi.n	528 <TIMER32_0_IRQHandler+0x120>
			minutes[1]++;
     51a:	4b2c      	ldr	r3, [pc, #176]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     51c:	785b      	ldrb	r3, [r3, #1]
     51e:	3301      	adds	r3, #1
     520:	b2da      	uxtb	r2, r3
     522:	4b2a      	ldr	r3, [pc, #168]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     524:	705a      	strb	r2, [r3, #1]
     526:	e034      	b.n	592 <TIMER32_0_IRQHandler+0x18a>
		else {
			minutes[1] = 0;
     528:	4b28      	ldr	r3, [pc, #160]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     52a:	2200      	movs	r2, #0
     52c:	705a      	strb	r2, [r3, #1]
			if (minutes[0] < 5)
     52e:	4b27      	ldr	r3, [pc, #156]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     530:	781b      	ldrb	r3, [r3, #0]
     532:	2b04      	cmp	r3, #4
     534:	d806      	bhi.n	544 <TIMER32_0_IRQHandler+0x13c>
				minutes[0]++;
     536:	4b25      	ldr	r3, [pc, #148]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	3301      	adds	r3, #1
     53c:	b2da      	uxtb	r2, r3
     53e:	4b23      	ldr	r3, [pc, #140]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     540:	701a      	strb	r2, [r3, #0]
     542:	e026      	b.n	592 <TIMER32_0_IRQHandler+0x18a>
			else {
				minutes[0] = 0;
     544:	4b21      	ldr	r3, [pc, #132]	; (5cc <TIMER32_0_IRQHandler+0x1c4>)
     546:	2200      	movs	r2, #0
     548:	701a      	strb	r2, [r3, #0]
				if (hours[0] < 9 && (hours[1] != 2 || hours[0] < 3))
     54a:	4b21      	ldr	r3, [pc, #132]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	2b08      	cmp	r3, #8
     550:	d80e      	bhi.n	570 <TIMER32_0_IRQHandler+0x168>
     552:	4b1f      	ldr	r3, [pc, #124]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     554:	785b      	ldrb	r3, [r3, #1]
     556:	2b02      	cmp	r3, #2
     558:	d103      	bne.n	562 <TIMER32_0_IRQHandler+0x15a>
     55a:	4b1d      	ldr	r3, [pc, #116]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	2b02      	cmp	r3, #2
     560:	d806      	bhi.n	570 <TIMER32_0_IRQHandler+0x168>
					hours[0]++;
     562:	4b1b      	ldr	r3, [pc, #108]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     564:	781b      	ldrb	r3, [r3, #0]
     566:	3301      	adds	r3, #1
     568:	b2da      	uxtb	r2, r3
     56a:	4b19      	ldr	r3, [pc, #100]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     56c:	701a      	strb	r2, [r3, #0]
     56e:	e010      	b.n	592 <TIMER32_0_IRQHandler+0x18a>
				else {
					hours[0] = 0;
     570:	4b17      	ldr	r3, [pc, #92]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     572:	2200      	movs	r2, #0
     574:	701a      	strb	r2, [r3, #0]
					if (hours[1] < 2)
     576:	4b16      	ldr	r3, [pc, #88]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     578:	785b      	ldrb	r3, [r3, #1]
     57a:	2b01      	cmp	r3, #1
     57c:	d806      	bhi.n	58c <TIMER32_0_IRQHandler+0x184>
						hours[1]++;
     57e:	4b14      	ldr	r3, [pc, #80]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     580:	785b      	ldrb	r3, [r3, #1]
     582:	3301      	adds	r3, #1
     584:	b2da      	uxtb	r2, r3
     586:	4b12      	ldr	r3, [pc, #72]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     588:	705a      	strb	r2, [r3, #1]
     58a:	e002      	b.n	592 <TIMER32_0_IRQHandler+0x18a>
					else
						hours[1] = 0;
     58c:	4b10      	ldr	r3, [pc, #64]	; (5d0 <TIMER32_0_IRQHandler+0x1c8>)
     58e:	2200      	movs	r2, #0
     590:	705a      	strb	r2, [r3, #1]
			}

		}
	}
	/* list of all available flags, select which to use */
	LPC_CT32B0->IR = (1UL << 0); /* Clear MAT0.0 interrupt flag */
     592:	4b10      	ldr	r3, [pc, #64]	; (5d4 <TIMER32_0_IRQHandler+0x1cc>)
     594:	2201      	movs	r2, #1
     596:	601a      	str	r2, [r3, #0]
//LPC_CT32B0->IR = (1UL<<1);   /* Clear MAT0.1 interrupt flag */
//LPC_CT32B0->IR = (1UL<<2);   /* Clear MAT0.2 interrupt flag */
//LPC_CT32B0->IR = (1UL<<3);   /* Clear MAT0.3 interrupt flag */
//LPC_CT32B0->IR = (1UL<<4);   /* Clear CAP0.0 interrupt flag */
}
     598:	46bd      	mov	sp, r7
     59a:	bd80      	pop	{r7, pc}
     59c:	10000014 	.word	0x10000014
     5a0:	1000000c 	.word	0x1000000c
     5a4:	10000018 	.word	0x10000018
     5a8:	10000028 	.word	0x10000028
     5ac:	1000002c 	.word	0x1000002c
     5b0:	10000030 	.word	0x10000030
     5b4:	10000034 	.word	0x10000034
     5b8:	10000000 	.word	0x10000000
     5bc:	00002304 	.word	0x00002304
     5c0:	00002204 	.word	0x00002204
     5c4:	1000001c 	.word	0x1000001c
     5c8:	00001770 	.word	0x00001770
     5cc:	10000004 	.word	0x10000004
     5d0:	10000008 	.word	0x10000008
     5d4:	40014000 	.word	0x40014000

000005d8 <TIMER32_1_IRQHandler>:

/******************************************************************************
 32-bit Timer1 (CT32B1) Interrupt service function
 ******************************************************************************/
void TIMER32_1_IRQHandler(void) {
     5d8:	b580      	push	{r7, lr}
     5da:	af00      	add	r7, sp, #0
	/* write code here */
	switch (kp++) {
     5dc:	4b18      	ldr	r3, [pc, #96]	; (640 <TIMER32_1_IRQHandler+0x68>)
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	1c59      	adds	r1, r3, #1
     5e2:	4a17      	ldr	r2, [pc, #92]	; (640 <TIMER32_1_IRQHandler+0x68>)
     5e4:	6011      	str	r1, [r2, #0]
     5e6:	2b01      	cmp	r3, #1
     5e8:	d00e      	beq.n	608 <TIMER32_1_IRQHandler+0x30>
     5ea:	dc02      	bgt.n	5f2 <TIMER32_1_IRQHandler+0x1a>
     5ec:	2b00      	cmp	r3, #0
     5ee:	d005      	beq.n	5fc <TIMER32_1_IRQHandler+0x24>
     5f0:	e01c      	b.n	62c <TIMER32_1_IRQHandler+0x54>
     5f2:	2b02      	cmp	r3, #2
     5f4:	d00e      	beq.n	614 <TIMER32_1_IRQHandler+0x3c>
     5f6:	2b03      	cmp	r3, #3
     5f8:	d012      	beq.n	620 <TIMER32_1_IRQHandler+0x48>
     5fa:	e017      	b.n	62c <TIMER32_1_IRQHandler+0x54>
	case 0:
		showMinute1(minutes[0]);
     5fc:	4b11      	ldr	r3, [pc, #68]	; (644 <TIMER32_1_IRQHandler+0x6c>)
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	1c18      	adds	r0, r3, #0
     602:	f001 f9c9 	bl	1998 <showMinute1>
		break;
     606:	e015      	b.n	634 <TIMER32_1_IRQHandler+0x5c>
	case 1:
		showMinute2(minutes[1]);
     608:	4b0e      	ldr	r3, [pc, #56]	; (644 <TIMER32_1_IRQHandler+0x6c>)
     60a:	785b      	ldrb	r3, [r3, #1]
     60c:	1c18      	adds	r0, r3, #0
     60e:	f001 f921 	bl	1854 <showMinute2>
		break;
     612:	e00f      	b.n	634 <TIMER32_1_IRQHandler+0x5c>
	case 2:
		showHour1(hours[0]);
     614:	4b0c      	ldr	r3, [pc, #48]	; (648 <TIMER32_1_IRQHandler+0x70>)
     616:	781b      	ldrb	r3, [r3, #0]
     618:	1c18      	adds	r0, r3, #0
     61a:	f001 fa5f 	bl	1adc <showHour1>
		break;
     61e:	e009      	b.n	634 <TIMER32_1_IRQHandler+0x5c>
	case 3:
		showHour2(hours[1]);
     620:	4b09      	ldr	r3, [pc, #36]	; (648 <TIMER32_1_IRQHandler+0x70>)
     622:	785b      	ldrb	r3, [r3, #1]
     624:	1c18      	adds	r0, r3, #0
     626:	f001 fafb 	bl	1c20 <showHour2>
		break;
     62a:	e003      	b.n	634 <TIMER32_1_IRQHandler+0x5c>
	default:
		kp = 0;
     62c:	4b04      	ldr	r3, [pc, #16]	; (640 <TIMER32_1_IRQHandler+0x68>)
     62e:	2200      	movs	r2, #0
     630:	601a      	str	r2, [r3, #0]
		break;
     632:	46c0      	nop			; (mov r8, r8)
	}
	/* list of all available flags, select which to use */
//LPC_CT32B1->IR = (1UL<<0);   /* Clear MAT1.0 interrupt flag */
	LPC_CT32B1->IR = (1UL << 1); /* Clear MAT1.1 interrupt flag */
     634:	4b05      	ldr	r3, [pc, #20]	; (64c <TIMER32_1_IRQHandler+0x74>)
     636:	2202      	movs	r2, #2
     638:	601a      	str	r2, [r3, #0]
//LPC_CT32B1->IR = (1UL<<2);   /* Clear MAT1.2 interrupt flag */
//LPC_CT32B1->IR = (1UL<<3);   /* Clear MAT1.3 interrupt flag */
//LPC_CT32B1->IR = (1UL<<4);   /* Clear CAP1.0 interrupt flag */
//LPC_CT32B1->IR = (1UL<<5);   /* Clear CAP1.1 interrupt flag */
}
     63a:	46bd      	mov	sp, r7
     63c:	bd80      	pop	{r7, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	10000010 	.word	0x10000010
     644:	10000004 	.word	0x10000004
     648:	10000008 	.word	0x10000008
     64c:	40018000 	.word	0x40018000

00000650 <UART_IRQHandler>:

/******************************************************************************
 UART Interrupt service function
 ******************************************************************************/
void UART_IRQHandler(void) {
     650:	b580      	push	{r7, lr}
     652:	af00      	add	r7, sp, #0
	/* write code here */
	usart_buffer_pos++;
     654:	4b0f      	ldr	r3, [pc, #60]	; (694 <UART_IRQHandler+0x44>)
     656:	681b      	ldr	r3, [r3, #0]
     658:	1c5a      	adds	r2, r3, #1
     65a:	4b0e      	ldr	r3, [pc, #56]	; (694 <UART_IRQHandler+0x44>)
     65c:	601a      	str	r2, [r3, #0]
	usart_read_buffer[usart_buffer_pos] = LPC_USART->RBR;
     65e:	4b0d      	ldr	r3, [pc, #52]	; (694 <UART_IRQHandler+0x44>)
     660:	681a      	ldr	r2, [r3, #0]
     662:	4b0d      	ldr	r3, [pc, #52]	; (698 <UART_IRQHandler+0x48>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	b2d9      	uxtb	r1, r3
     668:	4b0c      	ldr	r3, [pc, #48]	; (69c <UART_IRQHandler+0x4c>)
     66a:	5499      	strb	r1, [r3, r2]
	while(usart_buffer_pos > 0) {
     66c:	e00c      	b.n	688 <UART_IRQHandler+0x38>
		usart_senddata(usart_read_buffer[usart_buffer_pos]);
     66e:	4b09      	ldr	r3, [pc, #36]	; (694 <UART_IRQHandler+0x44>)
     670:	681b      	ldr	r3, [r3, #0]
     672:	4a0a      	ldr	r2, [pc, #40]	; (69c <UART_IRQHandler+0x4c>)
     674:	5cd3      	ldrb	r3, [r2, r3]
     676:	b2db      	uxtb	r3, r3
     678:	1c18      	adds	r0, r3, #0
     67a:	f000 fbf5 	bl	e68 <usart_senddata>
		usart_buffer_pos--;
     67e:	4b05      	ldr	r3, [pc, #20]	; (694 <UART_IRQHandler+0x44>)
     680:	681b      	ldr	r3, [r3, #0]
     682:	1e5a      	subs	r2, r3, #1
     684:	4b03      	ldr	r3, [pc, #12]	; (694 <UART_IRQHandler+0x44>)
     686:	601a      	str	r2, [r3, #0]
 ******************************************************************************/
void UART_IRQHandler(void) {
	/* write code here */
	usart_buffer_pos++;
	usart_read_buffer[usart_buffer_pos] = LPC_USART->RBR;
	while(usart_buffer_pos > 0) {
     688:	4b02      	ldr	r3, [pc, #8]	; (694 <UART_IRQHandler+0x44>)
     68a:	681b      	ldr	r3, [r3, #0]
     68c:	2b00      	cmp	r3, #0
     68e:	dcee      	bgt.n	66e <UART_IRQHandler+0x1e>
		usart_senddata(usart_read_buffer[usart_buffer_pos]);
		usart_buffer_pos--;
	}
}
     690:	46bd      	mov	sp, r7
     692:	bd80      	pop	{r7, pc}
     694:	10000020 	.word	0x10000020
     698:	40008000 	.word	0x40008000
     69c:	100000dc 	.word	0x100000dc

000006a0 <FLEX_INT0_IRQHandler>:

/******************************************************************************
 GPIO pin interrupt 0 service function
 ******************************************************************************/
void FLEX_INT0_IRQHandler(void) {
     6a0:	b580      	push	{r7, lr}
     6a2:	af00      	add	r7, sp, #0
	/* write code here */

	/* The following clears the pin interrupt flag when set to EDGE mode, if the pin is set the LEVEL sense then it switches the pin interrupt detection level [LOW<->HIGH] (may be removed if this is not wanted) */
	LPC_GPIO_PIN_INT->IST = (1UL << 0); /* Clear RISING/FALLING EDGE interrupt flag */
     6a4:	4b02      	ldr	r3, [pc, #8]	; (6b0 <FLEX_INT0_IRQHandler+0x10>)
     6a6:	2201      	movs	r2, #1
     6a8:	625a      	str	r2, [r3, #36]	; 0x24
}
     6aa:	46bd      	mov	sp, r7
     6ac:	bd80      	pop	{r7, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	4004c000 	.word	0x4004c000

000006b4 <FLEX_INT1_IRQHandler>:

/******************************************************************************
 GPIO pin interrupt 1 service function
 ******************************************************************************/
void FLEX_INT1_IRQHandler(void) {
     6b4:	b580      	push	{r7, lr}
     6b6:	af00      	add	r7, sp, #0
	/* write code here */
	if (sw2_laststate < 1 && SW2_DATA)
     6b8:	4b08      	ldr	r3, [pc, #32]	; (6dc <FLEX_INT1_IRQHandler+0x28>)
     6ba:	681b      	ldr	r3, [r3, #0]
     6bc:	2b00      	cmp	r3, #0
     6be:	dc08      	bgt.n	6d2 <FLEX_INT1_IRQHandler+0x1e>
     6c0:	23a0      	movs	r3, #160	; 0xa0
     6c2:	05db      	lsls	r3, r3, #23
     6c4:	7d1b      	ldrb	r3, [r3, #20]
     6c6:	b2db      	uxtb	r3, r3
     6c8:	2b00      	cmp	r3, #0
     6ca:	d002      	beq.n	6d2 <FLEX_INT1_IRQHandler+0x1e>
	{
		// Hours[0] second button from left.
		sw2_laststate = 1;
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <FLEX_INT1_IRQHandler+0x28>)
     6ce:	2201      	movs	r2, #1
     6d0:	601a      	str	r2, [r3, #0]

	}
	/* The following clears the pin interrupt flag when set to EDGE mode, if the pin is set the LEVEL sense then it switches the pin interrupt detection level [LOW<->HIGH] (may be removed if this is not wanted) */
	LPC_GPIO_PIN_INT->IST = (1UL << 1); /* Clear RISING/FALLING EDGE interrupt flag */
     6d2:	4b03      	ldr	r3, [pc, #12]	; (6e0 <FLEX_INT1_IRQHandler+0x2c>)
     6d4:	2202      	movs	r2, #2
     6d6:	625a      	str	r2, [r3, #36]	; 0x24
}
     6d8:	46bd      	mov	sp, r7
     6da:	bd80      	pop	{r7, pc}
     6dc:	10000028 	.word	0x10000028
     6e0:	4004c000 	.word	0x4004c000

000006e4 <FLEX_INT2_IRQHandler>:

/******************************************************************************
 GPIO pin interrupt 2 service function
 ******************************************************************************/
void FLEX_INT2_IRQHandler(void) {
     6e4:	b580      	push	{r7, lr}
     6e6:	af00      	add	r7, sp, #0
	/* write code here */
	if (sw3_laststate < 1 && SW3_DATA) {
     6e8:	4b19      	ldr	r3, [pc, #100]	; (750 <FLEX_INT2_IRQHandler+0x6c>)
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	2b00      	cmp	r3, #0
     6ee:	dc2a      	bgt.n	746 <FLEX_INT2_IRQHandler+0x62>
     6f0:	23a0      	movs	r3, #160	; 0xa0
     6f2:	05db      	lsls	r3, r3, #23
     6f4:	789b      	ldrb	r3, [r3, #2]
     6f6:	b2db      	uxtb	r3, r3
     6f8:	2b00      	cmp	r3, #0
     6fa:	d024      	beq.n	746 <FLEX_INT2_IRQHandler+0x62>
		sw3_laststate = 1;
     6fc:	4b14      	ldr	r3, [pc, #80]	; (750 <FLEX_INT2_IRQHandler+0x6c>)
     6fe:	2201      	movs	r2, #1
     700:	601a      	str	r2, [r3, #0]
		counter = 0;
     702:	4b14      	ldr	r3, [pc, #80]	; (754 <FLEX_INT2_IRQHandler+0x70>)
     704:	2200      	movs	r2, #0
     706:	601a      	str	r2, [r3, #0]
		usart_senddata('M');
     708:	204d      	movs	r0, #77	; 0x4d
     70a:	f000 fbad 	bl	e68 <usart_senddata>
		if (minutes[1] < 9)
     70e:	4b12      	ldr	r3, [pc, #72]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     710:	785b      	ldrb	r3, [r3, #1]
     712:	2b08      	cmp	r3, #8
     714:	d806      	bhi.n	724 <FLEX_INT2_IRQHandler+0x40>
		minutes[1]++;
     716:	4b10      	ldr	r3, [pc, #64]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     718:	785b      	ldrb	r3, [r3, #1]
     71a:	3301      	adds	r3, #1
     71c:	b2da      	uxtb	r2, r3
     71e:	4b0e      	ldr	r3, [pc, #56]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     720:	705a      	strb	r2, [r3, #1]
     722:	e010      	b.n	746 <FLEX_INT2_IRQHandler+0x62>
		else {
			minutes[1] = 0;
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     726:	2200      	movs	r2, #0
     728:	705a      	strb	r2, [r3, #1]
			if (minutes[0] < 5)
     72a:	4b0b      	ldr	r3, [pc, #44]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     72c:	781b      	ldrb	r3, [r3, #0]
     72e:	2b04      	cmp	r3, #4
     730:	d806      	bhi.n	740 <FLEX_INT2_IRQHandler+0x5c>
			minutes[0]++;
     732:	4b09      	ldr	r3, [pc, #36]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     734:	781b      	ldrb	r3, [r3, #0]
     736:	3301      	adds	r3, #1
     738:	b2da      	uxtb	r2, r3
     73a:	4b07      	ldr	r3, [pc, #28]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     73c:	701a      	strb	r2, [r3, #0]
     73e:	e002      	b.n	746 <FLEX_INT2_IRQHandler+0x62>
			else
			minutes[0] = 0;
     740:	4b05      	ldr	r3, [pc, #20]	; (758 <FLEX_INT2_IRQHandler+0x74>)
     742:	2200      	movs	r2, #0
     744:	701a      	strb	r2, [r3, #0]
		}
	}

//	fsm = PROGRAM;
	/* The following clears the pin interrupt flag when set to EDGE mode, if the pin is set the LEVEL sense then it switches the pin interrupt detection level [LOW<->HIGH] (may be removed if this is not wanted) */
	LPC_GPIO_PIN_INT->IST = (1UL << 2); /* Clear RISING/FALLING EDGE interrupt flag */
     746:	4b05      	ldr	r3, [pc, #20]	; (75c <FLEX_INT2_IRQHandler+0x78>)
     748:	2204      	movs	r2, #4
     74a:	625a      	str	r2, [r3, #36]	; 0x24
}
     74c:	46bd      	mov	sp, r7
     74e:	bd80      	pop	{r7, pc}
     750:	1000002c 	.word	0x1000002c
     754:	1000000c 	.word	0x1000000c
     758:	10000004 	.word	0x10000004
     75c:	4004c000 	.word	0x4004c000

00000760 <FLEX_INT3_IRQHandler>:

/******************************************************************************
 GPIO pin interrupt 3 service function
 ******************************************************************************/
void FLEX_INT3_IRQHandler(void) {
     760:	b580      	push	{r7, lr}
     762:	af00      	add	r7, sp, #0
	/* write code here */

	if (sw4_laststate < 1 && SW4_DATA)
     764:	4b12      	ldr	r3, [pc, #72]	; (7b0 <FLEX_INT3_IRQHandler+0x50>)
     766:	681b      	ldr	r3, [r3, #0]
     768:	2b00      	cmp	r3, #0
     76a:	dc1b      	bgt.n	7a4 <FLEX_INT3_IRQHandler+0x44>
     76c:	23a0      	movs	r3, #160	; 0xa0
     76e:	05db      	lsls	r3, r3, #23
     770:	223a      	movs	r2, #58	; 0x3a
     772:	5c9b      	ldrb	r3, [r3, r2]
     774:	b2db      	uxtb	r3, r3
     776:	2b00      	cmp	r3, #0
     778:	d014      	beq.n	7a4 <FLEX_INT3_IRQHandler+0x44>
	{
		// First from left.
		sw4_laststate = 1;
     77a:	4b0d      	ldr	r3, [pc, #52]	; (7b0 <FLEX_INT3_IRQHandler+0x50>)
     77c:	2201      	movs	r2, #1
     77e:	601a      	str	r2, [r3, #0]

		if (fsm == CLOCK) {
     780:	4b0c      	ldr	r3, [pc, #48]	; (7b4 <FLEX_INT3_IRQHandler+0x54>)
     782:	781b      	ldrb	r3, [r3, #0]
     784:	b2db      	uxtb	r3, r3
     786:	2b00      	cmp	r3, #0
     788:	d106      	bne.n	798 <FLEX_INT3_IRQHandler+0x38>
			fsm = GPS;
     78a:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <FLEX_INT3_IRQHandler+0x54>)
     78c:	2201      	movs	r2, #1
     78e:	701a      	strb	r2, [r3, #0]
			usart_senddata('O');
     790:	204f      	movs	r0, #79	; 0x4f
     792:	f000 fb69 	bl	e68 <usart_senddata>
     796:	e005      	b.n	7a4 <FLEX_INT3_IRQHandler+0x44>
		}
		else {
			fsm = CLOCK;
     798:	4b06      	ldr	r3, [pc, #24]	; (7b4 <FLEX_INT3_IRQHandler+0x54>)
     79a:	2200      	movs	r2, #0
     79c:	701a      	strb	r2, [r3, #0]
			usart_senddata('F');
     79e:	2046      	movs	r0, #70	; 0x46
     7a0:	f000 fb62 	bl	e68 <usart_senddata>
		}
	}
	/* The following clears the pin interrupt flag when set to EDGE mode, if the pin is set the LEVEL sense then it switches the pin interrupt detection level [LOW<->HIGH] (may be removed if this is not wanted) */
	LPC_GPIO_PIN_INT->IST = (1UL << 3); /* Clear RISING/FALLING EDGE interrupt flag */
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <FLEX_INT3_IRQHandler+0x58>)
     7a6:	2208      	movs	r2, #8
     7a8:	625a      	str	r2, [r3, #36]	; 0x24
}
     7aa:	46bd      	mov	sp, r7
     7ac:	bd80      	pop	{r7, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	10000030 	.word	0x10000030
     7b4:	10000000 	.word	0x10000000
     7b8:	4004c000 	.word	0x4004c000

000007bc <FLEX_INT4_IRQHandler>:

/******************************************************************************
 GPIO pin interrupt 4 service function
 ******************************************************************************/
void FLEX_INT4_IRQHandler(void) {
     7bc:	b580      	push	{r7, lr}
     7be:	af00      	add	r7, sp, #0
	/* write code here */
	if (sw5_laststate < 1 && SW5_DATA) {
     7c0:	4b1c      	ldr	r3, [pc, #112]	; (834 <FLEX_INT4_IRQHandler+0x78>)
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	2b00      	cmp	r3, #0
     7c6:	dc30      	bgt.n	82a <FLEX_INT4_IRQHandler+0x6e>
     7c8:	23a0      	movs	r3, #160	; 0xa0
     7ca:	05db      	lsls	r3, r3, #23
     7cc:	223b      	movs	r2, #59	; 0x3b
     7ce:	5c9b      	ldrb	r3, [r3, r2]
     7d0:	b2db      	uxtb	r3, r3
     7d2:	2b00      	cmp	r3, #0
     7d4:	d029      	beq.n	82a <FLEX_INT4_IRQHandler+0x6e>
		sw5_laststate = 1;
     7d6:	4b17      	ldr	r3, [pc, #92]	; (834 <FLEX_INT4_IRQHandler+0x78>)
     7d8:	2201      	movs	r2, #1
     7da:	601a      	str	r2, [r3, #0]
		usart_senddata('H');
     7dc:	2048      	movs	r0, #72	; 0x48
     7de:	f000 fb43 	bl	e68 <usart_senddata>
		if (hours[0] < 9 && (hours[1] != 2 || hours[0] < 3))
     7e2:	4b15      	ldr	r3, [pc, #84]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     7e4:	781b      	ldrb	r3, [r3, #0]
     7e6:	2b08      	cmp	r3, #8
     7e8:	d80e      	bhi.n	808 <FLEX_INT4_IRQHandler+0x4c>
     7ea:	4b13      	ldr	r3, [pc, #76]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     7ec:	785b      	ldrb	r3, [r3, #1]
     7ee:	2b02      	cmp	r3, #2
     7f0:	d103      	bne.n	7fa <FLEX_INT4_IRQHandler+0x3e>
     7f2:	4b11      	ldr	r3, [pc, #68]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     7f4:	781b      	ldrb	r3, [r3, #0]
     7f6:	2b02      	cmp	r3, #2
     7f8:	d806      	bhi.n	808 <FLEX_INT4_IRQHandler+0x4c>
		hours[0]++;
     7fa:	4b0f      	ldr	r3, [pc, #60]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	3301      	adds	r3, #1
     800:	b2da      	uxtb	r2, r3
     802:	4b0d      	ldr	r3, [pc, #52]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     804:	701a      	strb	r2, [r3, #0]
     806:	e010      	b.n	82a <FLEX_INT4_IRQHandler+0x6e>
		else {
			hours[0] = 0;
     808:	4b0b      	ldr	r3, [pc, #44]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     80a:	2200      	movs	r2, #0
     80c:	701a      	strb	r2, [r3, #0]
			if (hours[1] < 2)
     80e:	4b0a      	ldr	r3, [pc, #40]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     810:	785b      	ldrb	r3, [r3, #1]
     812:	2b01      	cmp	r3, #1
     814:	d806      	bhi.n	824 <FLEX_INT4_IRQHandler+0x68>
			hours[1]++;
     816:	4b08      	ldr	r3, [pc, #32]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     818:	785b      	ldrb	r3, [r3, #1]
     81a:	3301      	adds	r3, #1
     81c:	b2da      	uxtb	r2, r3
     81e:	4b06      	ldr	r3, [pc, #24]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     820:	705a      	strb	r2, [r3, #1]
     822:	e002      	b.n	82a <FLEX_INT4_IRQHandler+0x6e>
			else
			hours[1] = 0;
     824:	4b04      	ldr	r3, [pc, #16]	; (838 <FLEX_INT4_IRQHandler+0x7c>)
     826:	2200      	movs	r2, #0
     828:	705a      	strb	r2, [r3, #1]
		}
	}
	/* The following clears the pin interrupt flag when set to EDGE mode, if the pin is set the LEVEL sense then it switches the pin interrupt detection level [LOW<->HIGH] (may be removed if this is not wanted) */
	LPC_GPIO_PIN_INT->IST = (1UL << 4); /* Clear RISING/FALLING EDGE interrupt flag */
     82a:	4b04      	ldr	r3, [pc, #16]	; (83c <FLEX_INT4_IRQHandler+0x80>)
     82c:	2210      	movs	r2, #16
     82e:	625a      	str	r2, [r3, #36]	; 0x24
}
     830:	46bd      	mov	sp, r7
     832:	bd80      	pop	{r7, pc}
     834:	10000034 	.word	0x10000034
     838:	10000008 	.word	0x10000008
     83c:	4004c000 	.word	0x4004c000

00000840 <main>:

int main(void) {
     840:	b580      	push	{r7, lr}
     842:	af00      	add	r7, sp, #0

	init_all();
     844:	f000 f838 	bl	8b8 <init_all>

	sw1_laststate = 0;
     848:	4b14      	ldr	r3, [pc, #80]	; (89c <main+0x5c>)
     84a:	2200      	movs	r2, #0
     84c:	601a      	str	r2, [r3, #0]
	sw2_laststate = 0;
     84e:	4b14      	ldr	r3, [pc, #80]	; (8a0 <main+0x60>)
     850:	2200      	movs	r2, #0
     852:	601a      	str	r2, [r3, #0]
	sw3_laststate = 0;
     854:	4b13      	ldr	r3, [pc, #76]	; (8a4 <main+0x64>)
     856:	2200      	movs	r2, #0
     858:	601a      	str	r2, [r3, #0]
	sw4_laststate = 0;
     85a:	4b13      	ldr	r3, [pc, #76]	; (8a8 <main+0x68>)
     85c:	2200      	movs	r2, #0
     85e:	601a      	str	r2, [r3, #0]
	sw5_laststate = 0;
     860:	4b12      	ldr	r3, [pc, #72]	; (8ac <main+0x6c>)
     862:	2200      	movs	r2, #0
     864:	601a      	str	r2, [r3, #0]

	GPS_ON;
     866:	23a0      	movs	r3, #160	; 0xa0
     868:	05da      	lsls	r2, r3, #23
     86a:	23a0      	movs	r3, #160	; 0xa0
     86c:	05d9      	lsls	r1, r3, #23
     86e:	2388      	movs	r3, #136	; 0x88
     870:	019b      	lsls	r3, r3, #6
     872:	58cb      	ldr	r3, [r1, r3]
     874:	2180      	movs	r1, #128	; 0x80
     876:	03c9      	lsls	r1, r1, #15
     878:	4319      	orrs	r1, r3
     87a:	2388      	movs	r3, #136	; 0x88
     87c:	019b      	lsls	r3, r3, #6
     87e:	50d1      	str	r1, [r2, r3]

	i = 0;
     880:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <main+0x70>)
     882:	2200      	movs	r2, #0
     884:	601a      	str	r2, [r3, #0]
	usart_senddata('I');
     886:	2049      	movs	r0, #73	; 0x49
     888:	f000 faee 	bl	e68 <usart_senddata>
	// Enter an infinite loop, just incrementing a counter
	while (1) {
		if (fsm == CLOCK) {
     88c:	4b09      	ldr	r3, [pc, #36]	; (8b4 <main+0x74>)
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	b2db      	uxtb	r3, r3
     892:	2b00      	cmp	r3, #0
     894:	d001      	beq.n	89a <main+0x5a>

		} else if (fsm == GPS) {
     896:	4b07      	ldr	r3, [pc, #28]	; (8b4 <main+0x74>)
     898:	781b      	ldrb	r3, [r3, #0]

		}
	}
     89a:	e7f7      	b.n	88c <main+0x4c>
     89c:	10000024 	.word	0x10000024
     8a0:	10000028 	.word	0x10000028
     8a4:	1000002c 	.word	0x1000002c
     8a8:	10000030 	.word	0x10000030
     8ac:	10000034 	.word	0x10000034
     8b0:	10000014 	.word	0x10000014
     8b4:	10000000 	.word	0x10000000

000008b8 <init_all>:
	return 0;
}

// Init 7 segment control as output PIO's, pull-down resistor enabled.
void init_all() {
     8b8:	b580      	push	{r7, lr}
     8ba:	af00      	add	r7, sp, #0

	LPC_SYSCON->SYSAHBCLKDIV = 0x01; /* set AHB clock divider to 1/1 */
     8bc:	4bfd      	ldr	r3, [pc, #1012]	; (cb4 <init_all+0x3fc>)
     8be:	2201      	movs	r2, #1
     8c0:	679a      	str	r2, [r3, #120]	; 0x78
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     8c2:	49fc      	ldr	r1, [pc, #1008]	; (cb4 <init_all+0x3fc>)
     8c4:	4afb      	ldr	r2, [pc, #1004]	; (cb4 <init_all+0x3fc>)
     8c6:	2380      	movs	r3, #128	; 0x80
     8c8:	58d3      	ldr	r3, [r2, r3]
			| (1UL << 6); /* enable clock for GPIO (default is disabled)*/
     8ca:	4afb      	ldr	r2, [pc, #1004]	; (cb8 <init_all+0x400>)
     8cc:	4013      	ands	r3, r2
     8ce:	2240      	movs	r2, #64	; 0x40
     8d0:	4313      	orrs	r3, r2

// Init 7 segment control as output PIO's, pull-down resistor enabled.
void init_all() {

	LPC_SYSCON->SYSAHBCLKDIV = 0x01; /* set AHB clock divider to 1/1 */
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     8d2:	2280      	movs	r2, #128	; 0x80
     8d4:	508b      	str	r3, [r1, r2]
			| (1UL << 6); /* enable clock for GPIO (default is disabled)*/
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     8d6:	49f7      	ldr	r1, [pc, #988]	; (cb4 <init_all+0x3fc>)
     8d8:	4af6      	ldr	r2, [pc, #984]	; (cb4 <init_all+0x3fc>)
     8da:	2380      	movs	r3, #128	; 0x80
     8dc:	58d3      	ldr	r3, [r2, r3]
			| (1UL << 16); /* enable clock for IOCON (default is disabled)*/
     8de:	4af7      	ldr	r2, [pc, #988]	; (cbc <init_all+0x404>)
     8e0:	4013      	ands	r3, r2
     8e2:	2280      	movs	r2, #128	; 0x80
     8e4:	0252      	lsls	r2, r2, #9
     8e6:	4313      	orrs	r3, r2
void init_all() {

	LPC_SYSCON->SYSAHBCLKDIV = 0x01; /* set AHB clock divider to 1/1 */
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
			| (1UL << 6); /* enable clock for GPIO (default is disabled)*/
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     8e8:	2280      	movs	r2, #128	; 0x80
     8ea:	508b      	str	r3, [r1, r2]
			| (1UL << 16); /* enable clock for IOCON (default is disabled)*/
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     8ec:	49f1      	ldr	r1, [pc, #964]	; (cb4 <init_all+0x3fc>)
     8ee:	4af1      	ldr	r2, [pc, #964]	; (cb4 <init_all+0x3fc>)
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	58d3      	ldr	r3, [r2, r3]
			| (1UL << 12); /* enable clock for USART (default is disabled)*/
     8f4:	4af2      	ldr	r2, [pc, #968]	; (cc0 <init_all+0x408>)
     8f6:	4013      	ands	r3, r2
     8f8:	2280      	movs	r2, #128	; 0x80
     8fa:	0152      	lsls	r2, r2, #5
     8fc:	4313      	orrs	r3, r2
	LPC_SYSCON->SYSAHBCLKDIV = 0x01; /* set AHB clock divider to 1/1 */
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
			| (1UL << 6); /* enable clock for GPIO (default is disabled)*/
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
			| (1UL << 16); /* enable clock for IOCON (default is disabled)*/
	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     8fe:	2280      	movs	r2, #128	; 0x80
     900:	508b      	str	r3, [r1, r2]
			| (1UL << 12); /* enable clock for USART (default is disabled)*/
	LPC_SYSCON->UARTCLKDIV = 0x04;
     902:	4aec      	ldr	r2, [pc, #944]	; (cb4 <init_all+0x3fc>)
     904:	2398      	movs	r3, #152	; 0x98
     906:	2104      	movs	r1, #4
     908:	50d1      	str	r1, [r2, r3]

	// Enable bypass for sys_osc_clk. Clock from external 20 MHz oscillator
	LPC_SYSCON->SYSOSCCTRL = 0x00000001;
     90a:	4bea      	ldr	r3, [pc, #936]	; (cb4 <init_all+0x3fc>)
     90c:	2201      	movs	r2, #1
     90e:	621a      	str	r2, [r3, #32]

	// Configuring USART
	// Set BAUDRATE to 57200
	LPC_USART->FDR = 0x00000045; // Setting fractional divider to MULVAL to 2 and DIVADDVAL to 1
     910:	4bec      	ldr	r3, [pc, #944]	; (cc4 <init_all+0x40c>)
     912:	2245      	movs	r2, #69	; 0x45
     914:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_USART->DLL = 0x00000008; // Set DLL to 173
     916:	4beb      	ldr	r3, [pc, #940]	; (cc4 <init_all+0x40c>)
     918:	2208      	movs	r2, #8
     91a:	601a      	str	r2, [r3, #0]
	LPC_USART->DLM = 0x00000000;
     91c:	4be9      	ldr	r3, [pc, #932]	; (cc4 <init_all+0x40c>)
     91e:	2200      	movs	r2, #0
     920:	605a      	str	r2, [r3, #4]

	// First set PIO:s as generic GPIO's
	// Leds as GPIO, open drain enabled, pull up resistor enabled
	LPC_IOCON->TRST_PIO0_14 = 0x1; /* F_SEG */
     922:	4be9      	ldr	r3, [pc, #932]	; (cc8 <init_all+0x410>)
     924:	2201      	movs	r2, #1
     926:	639a      	str	r2, [r3, #56]	; 0x38
	LPC_IOCON->TDO_PIO0_13 = 0x1; /* G_SEG */
     928:	4be7      	ldr	r3, [pc, #924]	; (cc8 <init_all+0x410>)
     92a:	2201      	movs	r2, #1
     92c:	635a      	str	r2, [r3, #52]	; 0x34
	LPC_IOCON->TMS_PIO0_12 = 0x1; /* DP_SEG */
     92e:	4be6      	ldr	r3, [pc, #920]	; (cc8 <init_all+0x410>)
     930:	2201      	movs	r2, #1
     932:	631a      	str	r2, [r3, #48]	; 0x30

	// Potentiometer as analog input.
	LPC_IOCON->TDI_PIO0_11 = 0x00000092; /* binary: 00000000_00000000_00000000_10010010 */
     934:	4be4      	ldr	r3, [pc, #912]	; (cc8 <init_all+0x410>)
     936:	2292      	movs	r2, #146	; 0x92
     938:	62da      	str	r2, [r3, #44]	; 0x2c

	// Switches as GPIO with hysteresis on with pull-up resistors
	LPC_IOCON->PIO0_1 = 0x000000F0;
     93a:	4be3      	ldr	r3, [pc, #908]	; (cc8 <init_all+0x410>)
     93c:	22f0      	movs	r2, #240	; 0xf0
     93e:	605a      	str	r2, [r3, #4]
	LPC_IOCON->PIO0_20 = 0x000000F0;
     940:	4be1      	ldr	r3, [pc, #900]	; (cc8 <init_all+0x410>)
     942:	22f0      	movs	r2, #240	; 0xf0
     944:	651a      	str	r2, [r3, #80]	; 0x50
	LPC_IOCON->PIO0_2 = 0x000000F0;
     946:	4be0      	ldr	r3, [pc, #896]	; (cc8 <init_all+0x410>)
     948:	22f0      	movs	r2, #240	; 0xf0
     94a:	609a      	str	r2, [r3, #8]
	LPC_IOCON->PIO1_26 = 0x000000F0;
     94c:	4ade      	ldr	r2, [pc, #888]	; (cc8 <init_all+0x410>)
     94e:	23c8      	movs	r3, #200	; 0xc8
     950:	21f0      	movs	r1, #240	; 0xf0
     952:	50d1      	str	r1, [r2, r3]
	LPC_IOCON->PIO1_27 = 0x000000F0;
     954:	4adc      	ldr	r2, [pc, #880]	; (cc8 <init_all+0x410>)
     956:	23cc      	movs	r3, #204	; 0xcc
     958:	21f0      	movs	r1, #240	; 0xf0
     95a:	50d1      	str	r1, [r2, r3]

	// USART PINS
	LPC_IOCON->PIO0_18 = 0x00000091; /* binary: 00000000_00000000_00000000_10010001 */
     95c:	4bda      	ldr	r3, [pc, #872]	; (cc8 <init_all+0x410>)
     95e:	2291      	movs	r2, #145	; 0x91
     960:	649a      	str	r2, [r3, #72]	; 0x48
	LPC_IOCON->PIO0_19 = 0x00000091; /* binary: 00000000_00000000_00000000_10010001 */
     962:	4bd9      	ldr	r3, [pc, #868]	; (cc8 <init_all+0x410>)
     964:	2291      	movs	r2, #145	; 0x91
     966:	64da      	str	r2, [r3, #76]	; 0x4c

	// GPS PINS
	LPC_IOCON->PIO0_8 = 0x00000091; /* binary: 00000000_00000000_00000000_10010001 */
     968:	4bd7      	ldr	r3, [pc, #860]	; (cc8 <init_all+0x410>)
     96a:	2291      	movs	r2, #145	; 0x91
     96c:	621a      	str	r2, [r3, #32]
	LPC_IOCON->PIO0_9 = 0x00000091; /* binary: 00000000_00000000_00000000_10010001 */
     96e:	4bd6      	ldr	r3, [pc, #856]	; (cc8 <init_all+0x410>)
     970:	2291      	movs	r2, #145	; 0x91
     972:	625a      	str	r2, [r3, #36]	; 0x24
	LPC_IOCON->SWCLK_PIO0_10 = 0x00000092; /* binary: 00000000_00000000_00000000_10010010 */
     974:	4bd4      	ldr	r3, [pc, #848]	; (cc8 <init_all+0x410>)
     976:	2292      	movs	r2, #146	; 0x92
     978:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_IOCON->SWDIO_PIO0_15 = 0x00000090; /* binary: 00000000_00000000_00000000_10010000 */
     97a:	4bd3      	ldr	r3, [pc, #844]	; (cc8 <init_all+0x410>)
     97c:	2290      	movs	r2, #144	; 0x90
     97e:	63da      	str	r2, [r3, #60]	; 0x3c

	// Init display
	INIT_A_SEG;
     980:	23a0      	movs	r3, #160	; 0xa0
     982:	05da      	lsls	r2, r3, #23
     984:	23a0      	movs	r3, #160	; 0xa0
     986:	05d9      	lsls	r1, r3, #23
     988:	2380      	movs	r3, #128	; 0x80
     98a:	019b      	lsls	r3, r3, #6
     98c:	58cb      	ldr	r3, [r1, r3]
     98e:	2180      	movs	r1, #128	; 0x80
     990:	0409      	lsls	r1, r1, #16
     992:	4319      	orrs	r1, r3
     994:	2380      	movs	r3, #128	; 0x80
     996:	019b      	lsls	r3, r3, #6
     998:	50d1      	str	r1, [r2, r3]
	INIT_B_SEG;
     99a:	23a0      	movs	r3, #160	; 0xa0
     99c:	05db      	lsls	r3, r3, #23
     99e:	22a0      	movs	r2, #160	; 0xa0
     9a0:	05d2      	lsls	r2, r2, #23
     9a2:	49ca      	ldr	r1, [pc, #808]	; (ccc <init_all+0x414>)
     9a4:	5852      	ldr	r2, [r2, r1]
     9a6:	2180      	movs	r1, #128	; 0x80
     9a8:	03c9      	lsls	r1, r1, #15
     9aa:	430a      	orrs	r2, r1
     9ac:	49c7      	ldr	r1, [pc, #796]	; (ccc <init_all+0x414>)
     9ae:	505a      	str	r2, [r3, r1]
	INIT_C_SEG;
     9b0:	23a0      	movs	r3, #160	; 0xa0
     9b2:	05db      	lsls	r3, r3, #23
     9b4:	22a0      	movs	r2, #160	; 0xa0
     9b6:	05d2      	lsls	r2, r2, #23
     9b8:	49c4      	ldr	r1, [pc, #784]	; (ccc <init_all+0x414>)
     9ba:	5852      	ldr	r2, [r2, r1]
     9bc:	2180      	movs	r1, #128	; 0x80
     9be:	0189      	lsls	r1, r1, #6
     9c0:	430a      	orrs	r2, r1
     9c2:	49c2      	ldr	r1, [pc, #776]	; (ccc <init_all+0x414>)
     9c4:	505a      	str	r2, [r3, r1]
	INIT_D_SEG;
     9c6:	23a0      	movs	r3, #160	; 0xa0
     9c8:	05da      	lsls	r2, r3, #23
     9ca:	23a0      	movs	r3, #160	; 0xa0
     9cc:	05d9      	lsls	r1, r3, #23
     9ce:	2380      	movs	r3, #128	; 0x80
     9d0:	019b      	lsls	r3, r3, #6
     9d2:	58cb      	ldr	r3, [r1, r3]
     9d4:	2180      	movs	r1, #128	; 0x80
     9d6:	0189      	lsls	r1, r1, #6
     9d8:	4319      	orrs	r1, r3
     9da:	2380      	movs	r3, #128	; 0x80
     9dc:	019b      	lsls	r3, r3, #6
     9de:	50d1      	str	r1, [r2, r3]
	INIT_E_SEG;
     9e0:	23a0      	movs	r3, #160	; 0xa0
     9e2:	05da      	lsls	r2, r3, #23
     9e4:	23a0      	movs	r3, #160	; 0xa0
     9e6:	05d9      	lsls	r1, r3, #23
     9e8:	2380      	movs	r3, #128	; 0x80
     9ea:	019b      	lsls	r3, r3, #6
     9ec:	58cb      	ldr	r3, [r1, r3]
     9ee:	2180      	movs	r1, #128	; 0x80
     9f0:	0249      	lsls	r1, r1, #9
     9f2:	4319      	orrs	r1, r3
     9f4:	2380      	movs	r3, #128	; 0x80
     9f6:	019b      	lsls	r3, r3, #6
     9f8:	50d1      	str	r1, [r2, r3]
	INIT_F_SEG;
     9fa:	23a0      	movs	r3, #160	; 0xa0
     9fc:	05da      	lsls	r2, r3, #23
     9fe:	23a0      	movs	r3, #160	; 0xa0
     a00:	05d9      	lsls	r1, r3, #23
     a02:	2380      	movs	r3, #128	; 0x80
     a04:	019b      	lsls	r3, r3, #6
     a06:	58cb      	ldr	r3, [r1, r3]
     a08:	2180      	movs	r1, #128	; 0x80
     a0a:	0149      	lsls	r1, r1, #5
     a0c:	4319      	orrs	r1, r3
     a0e:	2380      	movs	r3, #128	; 0x80
     a10:	019b      	lsls	r3, r3, #6
     a12:	50d1      	str	r1, [r2, r3]
	INIT_G_SEG;
     a14:	23a0      	movs	r3, #160	; 0xa0
     a16:	05db      	lsls	r3, r3, #23
     a18:	22a0      	movs	r2, #160	; 0xa0
     a1a:	05d2      	lsls	r2, r2, #23
     a1c:	49ab      	ldr	r1, [pc, #684]	; (ccc <init_all+0x414>)
     a1e:	5852      	ldr	r2, [r2, r1]
     a20:	2180      	movs	r1, #128	; 0x80
     a22:	01c9      	lsls	r1, r1, #7
     a24:	430a      	orrs	r2, r1
     a26:	49a9      	ldr	r1, [pc, #676]	; (ccc <init_all+0x414>)
     a28:	505a      	str	r2, [r3, r1]
	INIT_DP_SEG;
     a2a:	23a0      	movs	r3, #160	; 0xa0
     a2c:	05db      	lsls	r3, r3, #23
     a2e:	22a0      	movs	r2, #160	; 0xa0
     a30:	05d2      	lsls	r2, r2, #23
     a32:	49a6      	ldr	r1, [pc, #664]	; (ccc <init_all+0x414>)
     a34:	5852      	ldr	r2, [r2, r1]
     a36:	2180      	movs	r1, #128	; 0x80
     a38:	0209      	lsls	r1, r1, #8
     a3a:	430a      	orrs	r2, r1
     a3c:	49a3      	ldr	r1, [pc, #652]	; (ccc <init_all+0x414>)
     a3e:	505a      	str	r2, [r3, r1]
	INIT_7SEG_CTRL_1;
     a40:	23a0      	movs	r3, #160	; 0xa0
     a42:	05db      	lsls	r3, r3, #23
     a44:	22a0      	movs	r2, #160	; 0xa0
     a46:	05d2      	lsls	r2, r2, #23
     a48:	49a0      	ldr	r1, [pc, #640]	; (ccc <init_all+0x414>)
     a4a:	5852      	ldr	r2, [r2, r1]
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	0309      	lsls	r1, r1, #12
     a50:	430a      	orrs	r2, r1
     a52:	499e      	ldr	r1, [pc, #632]	; (ccc <init_all+0x414>)
     a54:	505a      	str	r2, [r3, r1]
	INIT_7SEG_CTRL_2;
     a56:	23a0      	movs	r3, #160	; 0xa0
     a58:	05db      	lsls	r3, r3, #23
     a5a:	22a0      	movs	r2, #160	; 0xa0
     a5c:	05d2      	lsls	r2, r2, #23
     a5e:	499b      	ldr	r1, [pc, #620]	; (ccc <init_all+0x414>)
     a60:	5852      	ldr	r2, [r2, r1]
     a62:	2180      	movs	r1, #128	; 0x80
     a64:	0489      	lsls	r1, r1, #18
     a66:	430a      	orrs	r2, r1
     a68:	4998      	ldr	r1, [pc, #608]	; (ccc <init_all+0x414>)
     a6a:	505a      	str	r2, [r3, r1]
	INIT_7SEG_CTRL_3;
     a6c:	23a0      	movs	r3, #160	; 0xa0
     a6e:	05db      	lsls	r3, r3, #23
     a70:	22a0      	movs	r2, #160	; 0xa0
     a72:	05d2      	lsls	r2, r2, #23
     a74:	4995      	ldr	r1, [pc, #596]	; (ccc <init_all+0x414>)
     a76:	5852      	ldr	r2, [r2, r1]
     a78:	2180      	movs	r1, #128	; 0x80
     a7a:	0249      	lsls	r1, r1, #9
     a7c:	430a      	orrs	r2, r1
     a7e:	4993      	ldr	r1, [pc, #588]	; (ccc <init_all+0x414>)
     a80:	505a      	str	r2, [r3, r1]
	INIT_7SEG_CTRL_4;
     a82:	23a0      	movs	r3, #160	; 0xa0
     a84:	05da      	lsls	r2, r3, #23
     a86:	23a0      	movs	r3, #160	; 0xa0
     a88:	05d9      	lsls	r1, r3, #23
     a8a:	2380      	movs	r3, #128	; 0x80
     a8c:	019b      	lsls	r3, r3, #6
     a8e:	58cb      	ldr	r3, [r1, r3]
     a90:	2180      	movs	r1, #128	; 0x80
     a92:	01c9      	lsls	r1, r1, #7
     a94:	4319      	orrs	r1, r3
     a96:	2380      	movs	r3, #128	; 0x80
     a98:	019b      	lsls	r3, r3, #6
     a9a:	50d1      	str	r1, [r2, r3]

	INIT_DEBUG_LED;
     a9c:	23a0      	movs	r3, #160	; 0xa0
     a9e:	05db      	lsls	r3, r3, #23
     aa0:	22a0      	movs	r2, #160	; 0xa0
     aa2:	05d2      	lsls	r2, r2, #23
     aa4:	4989      	ldr	r1, [pc, #548]	; (ccc <init_all+0x414>)
     aa6:	5852      	ldr	r2, [r2, r1]
     aa8:	2180      	movs	r1, #128	; 0x80
     aaa:	0609      	lsls	r1, r1, #24
     aac:	430a      	orrs	r2, r1
     aae:	4987      	ldr	r1, [pc, #540]	; (ccc <init_all+0x414>)
     ab0:	505a      	str	r2, [r3, r1]
	DEBUG_LED_OFF;
     ab2:	23a0      	movs	r3, #160	; 0xa0
     ab4:	05db      	lsls	r3, r3, #23
     ab6:	22a0      	movs	r2, #160	; 0xa0
     ab8:	05d2      	lsls	r2, r2, #23
     aba:	4985      	ldr	r1, [pc, #532]	; (cd0 <init_all+0x418>)
     abc:	5852      	ldr	r2, [r2, r1]
     abe:	2180      	movs	r1, #128	; 0x80
     ac0:	0609      	lsls	r1, r1, #24
     ac2:	430a      	orrs	r2, r1
     ac4:	4982      	ldr	r1, [pc, #520]	; (cd0 <init_all+0x418>)
     ac6:	505a      	str	r2, [r3, r1]

	SEG_CTRL_1_OFF;
     ac8:	23a0      	movs	r3, #160	; 0xa0
     aca:	05db      	lsls	r3, r3, #23
     acc:	22a0      	movs	r2, #160	; 0xa0
     ace:	05d2      	lsls	r2, r2, #23
     ad0:	4980      	ldr	r1, [pc, #512]	; (cd4 <init_all+0x41c>)
     ad2:	5852      	ldr	r2, [r2, r1]
     ad4:	2180      	movs	r1, #128	; 0x80
     ad6:	0309      	lsls	r1, r1, #12
     ad8:	430a      	orrs	r2, r1
     ada:	497e      	ldr	r1, [pc, #504]	; (cd4 <init_all+0x41c>)
     adc:	505a      	str	r2, [r3, r1]
	SEG_CTRL_2_OFF;
     ade:	23a0      	movs	r3, #160	; 0xa0
     ae0:	05db      	lsls	r3, r3, #23
     ae2:	22a0      	movs	r2, #160	; 0xa0
     ae4:	05d2      	lsls	r2, r2, #23
     ae6:	497b      	ldr	r1, [pc, #492]	; (cd4 <init_all+0x41c>)
     ae8:	5852      	ldr	r2, [r2, r1]
     aea:	2180      	movs	r1, #128	; 0x80
     aec:	0489      	lsls	r1, r1, #18
     aee:	430a      	orrs	r2, r1
     af0:	4978      	ldr	r1, [pc, #480]	; (cd4 <init_all+0x41c>)
     af2:	505a      	str	r2, [r3, r1]
	SEG_CTRL_3_OFF;
     af4:	23a0      	movs	r3, #160	; 0xa0
     af6:	05db      	lsls	r3, r3, #23
     af8:	22a0      	movs	r2, #160	; 0xa0
     afa:	05d2      	lsls	r2, r2, #23
     afc:	4975      	ldr	r1, [pc, #468]	; (cd4 <init_all+0x41c>)
     afe:	5852      	ldr	r2, [r2, r1]
     b00:	2180      	movs	r1, #128	; 0x80
     b02:	0249      	lsls	r1, r1, #9
     b04:	430a      	orrs	r2, r1
     b06:	4973      	ldr	r1, [pc, #460]	; (cd4 <init_all+0x41c>)
     b08:	505a      	str	r2, [r3, r1]
	SEG_CTRL_4_OFF;
     b0a:	23a0      	movs	r3, #160	; 0xa0
     b0c:	05da      	lsls	r2, r3, #23
     b0e:	23a0      	movs	r3, #160	; 0xa0
     b10:	05d9      	lsls	r1, r3, #23
     b12:	2388      	movs	r3, #136	; 0x88
     b14:	019b      	lsls	r3, r3, #6
     b16:	58cb      	ldr	r3, [r1, r3]
     b18:	2180      	movs	r1, #128	; 0x80
     b1a:	01c9      	lsls	r1, r1, #7
     b1c:	4319      	orrs	r1, r3
     b1e:	2388      	movs	r3, #136	; 0x88
     b20:	019b      	lsls	r3, r3, #6
     b22:	50d1      	str	r1, [r2, r3]

	A_SEG_OFF;
     b24:	23a0      	movs	r3, #160	; 0xa0
     b26:	05da      	lsls	r2, r3, #23
     b28:	23a0      	movs	r3, #160	; 0xa0
     b2a:	05d9      	lsls	r1, r3, #23
     b2c:	238a      	movs	r3, #138	; 0x8a
     b2e:	019b      	lsls	r3, r3, #6
     b30:	58cb      	ldr	r3, [r1, r3]
     b32:	2180      	movs	r1, #128	; 0x80
     b34:	0409      	lsls	r1, r1, #16
     b36:	4319      	orrs	r1, r3
     b38:	238a      	movs	r3, #138	; 0x8a
     b3a:	019b      	lsls	r3, r3, #6
     b3c:	50d1      	str	r1, [r2, r3]
	B_SEG_OFF;
     b3e:	23a0      	movs	r3, #160	; 0xa0
     b40:	05db      	lsls	r3, r3, #23
     b42:	22a0      	movs	r2, #160	; 0xa0
     b44:	05d2      	lsls	r2, r2, #23
     b46:	4962      	ldr	r1, [pc, #392]	; (cd0 <init_all+0x418>)
     b48:	5852      	ldr	r2, [r2, r1]
     b4a:	2180      	movs	r1, #128	; 0x80
     b4c:	03c9      	lsls	r1, r1, #15
     b4e:	430a      	orrs	r2, r1
     b50:	495f      	ldr	r1, [pc, #380]	; (cd0 <init_all+0x418>)
     b52:	505a      	str	r2, [r3, r1]
	C_SEG_OFF;
     b54:	23a0      	movs	r3, #160	; 0xa0
     b56:	05db      	lsls	r3, r3, #23
     b58:	22a0      	movs	r2, #160	; 0xa0
     b5a:	05d2      	lsls	r2, r2, #23
     b5c:	495c      	ldr	r1, [pc, #368]	; (cd0 <init_all+0x418>)
     b5e:	5852      	ldr	r2, [r2, r1]
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	0189      	lsls	r1, r1, #6
     b64:	430a      	orrs	r2, r1
     b66:	495a      	ldr	r1, [pc, #360]	; (cd0 <init_all+0x418>)
     b68:	505a      	str	r2, [r3, r1]
	D_SEG_OFF;
     b6a:	23a0      	movs	r3, #160	; 0xa0
     b6c:	05da      	lsls	r2, r3, #23
     b6e:	23a0      	movs	r3, #160	; 0xa0
     b70:	05d9      	lsls	r1, r3, #23
     b72:	238a      	movs	r3, #138	; 0x8a
     b74:	019b      	lsls	r3, r3, #6
     b76:	58cb      	ldr	r3, [r1, r3]
     b78:	2180      	movs	r1, #128	; 0x80
     b7a:	0189      	lsls	r1, r1, #6
     b7c:	4319      	orrs	r1, r3
     b7e:	238a      	movs	r3, #138	; 0x8a
     b80:	019b      	lsls	r3, r3, #6
     b82:	50d1      	str	r1, [r2, r3]
	E_SEG_OFF;
     b84:	23a0      	movs	r3, #160	; 0xa0
     b86:	05da      	lsls	r2, r3, #23
     b88:	23a0      	movs	r3, #160	; 0xa0
     b8a:	05d9      	lsls	r1, r3, #23
     b8c:	238a      	movs	r3, #138	; 0x8a
     b8e:	019b      	lsls	r3, r3, #6
     b90:	58cb      	ldr	r3, [r1, r3]
     b92:	2180      	movs	r1, #128	; 0x80
     b94:	0249      	lsls	r1, r1, #9
     b96:	4319      	orrs	r1, r3
     b98:	238a      	movs	r3, #138	; 0x8a
     b9a:	019b      	lsls	r3, r3, #6
     b9c:	50d1      	str	r1, [r2, r3]
	F_SEG_OFF;
     b9e:	23a0      	movs	r3, #160	; 0xa0
     ba0:	05da      	lsls	r2, r3, #23
     ba2:	23a0      	movs	r3, #160	; 0xa0
     ba4:	05d9      	lsls	r1, r3, #23
     ba6:	238a      	movs	r3, #138	; 0x8a
     ba8:	019b      	lsls	r3, r3, #6
     baa:	58cb      	ldr	r3, [r1, r3]
     bac:	2180      	movs	r1, #128	; 0x80
     bae:	0149      	lsls	r1, r1, #5
     bb0:	4319      	orrs	r1, r3
     bb2:	238a      	movs	r3, #138	; 0x8a
     bb4:	019b      	lsls	r3, r3, #6
     bb6:	50d1      	str	r1, [r2, r3]
	G_SEG_OFF;
     bb8:	23a0      	movs	r3, #160	; 0xa0
     bba:	05db      	lsls	r3, r3, #23
     bbc:	22a0      	movs	r2, #160	; 0xa0
     bbe:	05d2      	lsls	r2, r2, #23
     bc0:	4943      	ldr	r1, [pc, #268]	; (cd0 <init_all+0x418>)
     bc2:	5852      	ldr	r2, [r2, r1]
     bc4:	2180      	movs	r1, #128	; 0x80
     bc6:	01c9      	lsls	r1, r1, #7
     bc8:	430a      	orrs	r2, r1
     bca:	4941      	ldr	r1, [pc, #260]	; (cd0 <init_all+0x418>)
     bcc:	505a      	str	r2, [r3, r1]

	INIT_DUAL_LEDS;
     bce:	23a0      	movs	r3, #160	; 0xa0
     bd0:	05db      	lsls	r3, r3, #23
     bd2:	22a0      	movs	r2, #160	; 0xa0
     bd4:	05d2      	lsls	r2, r2, #23
     bd6:	493d      	ldr	r1, [pc, #244]	; (ccc <init_all+0x414>)
     bd8:	5852      	ldr	r2, [r2, r1]
     bda:	2180      	movs	r1, #128	; 0x80
     bdc:	0349      	lsls	r1, r1, #13
     bde:	430a      	orrs	r2, r1
     be0:	493a      	ldr	r1, [pc, #232]	; (ccc <init_all+0x414>)
     be2:	505a      	str	r2, [r3, r1]
	DUAL_LEDS_ON;
     be4:	23a0      	movs	r3, #160	; 0xa0
     be6:	05db      	lsls	r3, r3, #23
     be8:	22a0      	movs	r2, #160	; 0xa0
     bea:	05d2      	lsls	r2, r2, #23
     bec:	4939      	ldr	r1, [pc, #228]	; (cd4 <init_all+0x41c>)
     bee:	5852      	ldr	r2, [r2, r1]
     bf0:	2180      	movs	r1, #128	; 0x80
     bf2:	0349      	lsls	r1, r1, #13
     bf4:	430a      	orrs	r2, r1
     bf6:	4937      	ldr	r1, [pc, #220]	; (cd4 <init_all+0x41c>)
     bf8:	505a      	str	r2, [r3, r1]

	INIT_POT;
     bfa:	23a0      	movs	r3, #160	; 0xa0
     bfc:	05da      	lsls	r2, r3, #23
     bfe:	23a0      	movs	r3, #160	; 0xa0
     c00:	05d9      	lsls	r1, r3, #23
     c02:	2380      	movs	r3, #128	; 0x80
     c04:	019b      	lsls	r3, r3, #6
     c06:	58cb      	ldr	r3, [r1, r3]
     c08:	2180      	movs	r1, #128	; 0x80
     c0a:	0109      	lsls	r1, r1, #4
     c0c:	4319      	orrs	r1, r3
     c0e:	2380      	movs	r3, #128	; 0x80
     c10:	019b      	lsls	r3, r3, #6
     c12:	50d1      	str	r1, [r2, r3]
	// Switches
	INIT_SW1;
     c14:	23a0      	movs	r3, #160	; 0xa0
     c16:	05da      	lsls	r2, r3, #23
     c18:	23a0      	movs	r3, #160	; 0xa0
     c1a:	05d9      	lsls	r1, r3, #23
     c1c:	2380      	movs	r3, #128	; 0x80
     c1e:	019b      	lsls	r3, r3, #6
     c20:	58cb      	ldr	r3, [r1, r3]
     c22:	2102      	movs	r1, #2
     c24:	438b      	bics	r3, r1
     c26:	1c19      	adds	r1, r3, #0
     c28:	2380      	movs	r3, #128	; 0x80
     c2a:	019b      	lsls	r3, r3, #6
     c2c:	50d1      	str	r1, [r2, r3]
	INIT_SW2;
     c2e:	23a0      	movs	r3, #160	; 0xa0
     c30:	05da      	lsls	r2, r3, #23
     c32:	23a0      	movs	r3, #160	; 0xa0
     c34:	05d9      	lsls	r1, r3, #23
     c36:	2380      	movs	r3, #128	; 0x80
     c38:	019b      	lsls	r3, r3, #6
     c3a:	58cb      	ldr	r3, [r1, r3]
     c3c:	4926      	ldr	r1, [pc, #152]	; (cd8 <init_all+0x420>)
     c3e:	4019      	ands	r1, r3
     c40:	2380      	movs	r3, #128	; 0x80
     c42:	019b      	lsls	r3, r3, #6
     c44:	50d1      	str	r1, [r2, r3]
	INIT_SW3;
     c46:	23a0      	movs	r3, #160	; 0xa0
     c48:	05da      	lsls	r2, r3, #23
     c4a:	23a0      	movs	r3, #160	; 0xa0
     c4c:	05d9      	lsls	r1, r3, #23
     c4e:	2380      	movs	r3, #128	; 0x80
     c50:	019b      	lsls	r3, r3, #6
     c52:	58cb      	ldr	r3, [r1, r3]
     c54:	2104      	movs	r1, #4
     c56:	438b      	bics	r3, r1
     c58:	1c19      	adds	r1, r3, #0
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	019b      	lsls	r3, r3, #6
     c5e:	50d1      	str	r1, [r2, r3]
	INIT_SW4;
     c60:	23a0      	movs	r3, #160	; 0xa0
     c62:	05db      	lsls	r3, r3, #23
     c64:	22a0      	movs	r2, #160	; 0xa0
     c66:	05d2      	lsls	r2, r2, #23
     c68:	4918      	ldr	r1, [pc, #96]	; (ccc <init_all+0x414>)
     c6a:	5852      	ldr	r2, [r2, r1]
     c6c:	491b      	ldr	r1, [pc, #108]	; (cdc <init_all+0x424>)
     c6e:	400a      	ands	r2, r1
     c70:	4916      	ldr	r1, [pc, #88]	; (ccc <init_all+0x414>)
     c72:	505a      	str	r2, [r3, r1]
	INIT_SW5;
     c74:	23a0      	movs	r3, #160	; 0xa0
     c76:	05db      	lsls	r3, r3, #23
     c78:	22a0      	movs	r2, #160	; 0xa0
     c7a:	05d2      	lsls	r2, r2, #23
     c7c:	4913      	ldr	r1, [pc, #76]	; (ccc <init_all+0x414>)
     c7e:	5852      	ldr	r2, [r2, r1]
     c80:	4917      	ldr	r1, [pc, #92]	; (ce0 <init_all+0x428>)
     c82:	400a      	ands	r2, r1
     c84:	4911      	ldr	r1, [pc, #68]	; (ccc <init_all+0x414>)
     c86:	505a      	str	r2, [r3, r1]
	 GPIO pin interrupt 2 set for: P0.2 triggered with FALLING EDGE
	 GPIO pin interrupt 3 set for: P1.26 triggered with FALLING EDGE
	 GPIO pin interrupt 4 set for: P1.27 triggered with FALLING EDGE
	 */

	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     c88:	490a      	ldr	r1, [pc, #40]	; (cb4 <init_all+0x3fc>)
     c8a:	4a0a      	ldr	r2, [pc, #40]	; (cb4 <init_all+0x3fc>)
     c8c:	2380      	movs	r3, #128	; 0x80
     c8e:	58d3      	ldr	r3, [r2, r3]
			| (1UL << 19); /* enable clock for GPIO pin interrupt (default is disabled)*/
     c90:	4a14      	ldr	r2, [pc, #80]	; (ce4 <init_all+0x42c>)
     c92:	4013      	ands	r3, r2
     c94:	2280      	movs	r2, #128	; 0x80
     c96:	0312      	lsls	r2, r2, #12
     c98:	4313      	orrs	r3, r2
	 GPIO pin interrupt 2 set for: P0.2 triggered with FALLING EDGE
	 GPIO pin interrupt 3 set for: P1.26 triggered with FALLING EDGE
	 GPIO pin interrupt 4 set for: P1.27 triggered with FALLING EDGE
	 */

	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     c9a:	2280      	movs	r2, #128	; 0x80
     c9c:	508b      	str	r3, [r1, r2]
			| (1UL << 19); /* enable clock for GPIO pin interrupt (default is disabled)*/

	LPC_GPIO_PIN_INT->ISEL = 0x00000000; /* binary: 00000000_00000000_00000000_00000000 */
     c9e:	4b12      	ldr	r3, [pc, #72]	; (ce8 <init_all+0x430>)
     ca0:	2200      	movs	r2, #0
     ca2:	601a      	str	r2, [r3, #0]
	LPC_GPIO_PIN_INT->IENR = 0x0000001F; /* binary: 00000000_00000000_00000000_00000000 */
     ca4:	4b10      	ldr	r3, [pc, #64]	; (ce8 <init_all+0x430>)
     ca6:	221f      	movs	r2, #31
     ca8:	605a      	str	r2, [r3, #4]
	LPC_GPIO_PIN_INT->IENF = 0x00000000; /* binary: 00000000_00000000_00000000_00011111 */
     caa:	4b0f      	ldr	r3, [pc, #60]	; (ce8 <init_all+0x430>)
     cac:	2200      	movs	r2, #0
     cae:	611a      	str	r2, [r3, #16]
     cb0:	e01c      	b.n	cec <init_all+0x434>
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	40048000 	.word	0x40048000
     cb8:	098dffbf 	.word	0x098dffbf
     cbc:	098cffff 	.word	0x098cffff
     cc0:	098defff 	.word	0x098defff
     cc4:	40008000 	.word	0x40008000
     cc8:	40044000 	.word	0x40044000
     ccc:	00002004 	.word	0x00002004
     cd0:	00002284 	.word	0x00002284
     cd4:	00002204 	.word	0x00002204
     cd8:	ffefffff 	.word	0xffefffff
     cdc:	fbffffff 	.word	0xfbffffff
     ce0:	f7ffffff 	.word	0xf7ffffff
     ce4:	0985ffff 	.word	0x0985ffff
     ce8:	4004c000 	.word	0x4004c000

	LPC_SYSCON->PINTSEL[0] = 0x00000001; /* binary: 00000000_00000000_00000000_00000001 */
     cec:	4a58      	ldr	r2, [pc, #352]	; (e50 <init_all+0x598>)
     cee:	23bc      	movs	r3, #188	; 0xbc
     cf0:	005b      	lsls	r3, r3, #1
     cf2:	2101      	movs	r1, #1
     cf4:	50d1      	str	r1, [r2, r3]
	LPC_SYSCON->PINTSEL[1] = 0x00000014; /* binary: 00000000_00000000_00000000_00010100 */
     cf6:	4a56      	ldr	r2, [pc, #344]	; (e50 <init_all+0x598>)
     cf8:	23be      	movs	r3, #190	; 0xbe
     cfa:	005b      	lsls	r3, r3, #1
     cfc:	2114      	movs	r1, #20
     cfe:	50d1      	str	r1, [r2, r3]
	LPC_SYSCON->PINTSEL[2] = 0x00000002; /* binary: 00000000_00000000_00000000_00000010 */
     d00:	4a53      	ldr	r2, [pc, #332]	; (e50 <init_all+0x598>)
     d02:	23c0      	movs	r3, #192	; 0xc0
     d04:	005b      	lsls	r3, r3, #1
     d06:	2102      	movs	r1, #2
     d08:	50d1      	str	r1, [r2, r3]
	LPC_SYSCON->PINTSEL[3] = 0x00000032; /* binary: 00000000_00000000_00000000_00110010 */
     d0a:	4a51      	ldr	r2, [pc, #324]	; (e50 <init_all+0x598>)
     d0c:	23c2      	movs	r3, #194	; 0xc2
     d0e:	005b      	lsls	r3, r3, #1
     d10:	2132      	movs	r1, #50	; 0x32
     d12:	50d1      	str	r1, [r2, r3]
	LPC_SYSCON->PINTSEL[4] = 0x00000033; /* binary: 00000000_00000000_00000000_00110011 */
     d14:	4a4e      	ldr	r2, [pc, #312]	; (e50 <init_all+0x598>)
     d16:	23c4      	movs	r3, #196	; 0xc4
     d18:	005b      	lsls	r3, r3, #1
     d1a:	2133      	movs	r1, #51	; 0x33
     d1c:	50d1      	str	r1, [r2, r3]
	 Counter clk: 100 Hz, Counts every: 10 ms  (calculated with peripheral clock: 40MHz)
	 Clear on Rising Edge of CAP0.0
	 MCR0.0 : reset, generate interrupt on compare match
	 */

	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     d1e:	494c      	ldr	r1, [pc, #304]	; (e50 <init_all+0x598>)
     d20:	4a4b      	ldr	r2, [pc, #300]	; (e50 <init_all+0x598>)
     d22:	2380      	movs	r3, #128	; 0x80
     d24:	58d3      	ldr	r3, [r2, r3]
			| (1UL << 9); /* Enable clock for CT32B0 (default is disabled) */
     d26:	4a4b      	ldr	r2, [pc, #300]	; (e54 <init_all+0x59c>)
     d28:	4013      	ands	r3, r2
     d2a:	2280      	movs	r2, #128	; 0x80
     d2c:	0092      	lsls	r2, r2, #2
     d2e:	4313      	orrs	r3, r2
	 Counter clk: 100 Hz, Counts every: 10 ms  (calculated with peripheral clock: 40MHz)
	 Clear on Rising Edge of CAP0.0
	 MCR0.0 : reset, generate interrupt on compare match
	 */

	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     d30:	2280      	movs	r2, #128	; 0x80
     d32:	508b      	str	r3, [r1, r2]
			| (1UL << 9); /* Enable clock for CT32B0 (default is disabled) */

	LPC_CT32B0->CTCR = 0x10; /* binary: 00010000 */
     d34:	4b48      	ldr	r3, [pc, #288]	; (e58 <init_all+0x5a0>)
     d36:	2210      	movs	r2, #16
     d38:	671a      	str	r2, [r3, #112]	; 0x70
	LPC_CT32B0->TC = 0x00000000; /* decimal 0 */
     d3a:	4b47      	ldr	r3, [pc, #284]	; (e58 <init_all+0x5a0>)
     d3c:	2200      	movs	r2, #0
     d3e:	609a      	str	r2, [r3, #8]
	LPC_CT32B0->PR = 0x00061A7F; /* decimal 399999 */
     d40:	4b45      	ldr	r3, [pc, #276]	; (e58 <init_all+0x5a0>)
     d42:	4a46      	ldr	r2, [pc, #280]	; (e5c <init_all+0x5a4>)
     d44:	60da      	str	r2, [r3, #12]
	LPC_CT32B0->MCR = 0x0003; /* binary: 00000000_00000011 */
     d46:	4b44      	ldr	r3, [pc, #272]	; (e58 <init_all+0x5a0>)
     d48:	2203      	movs	r2, #3
     d4a:	615a      	str	r2, [r3, #20]
	LPC_CT32B0->MR0 = 0x00000001; /* decimal 1 */
     d4c:	4b42      	ldr	r3, [pc, #264]	; (e58 <init_all+0x5a0>)
     d4e:	2201      	movs	r2, #1
     d50:	619a      	str	r2, [r3, #24]
	LPC_CT32B0->MR1 = 0x00000000; /* decimal 0 */
     d52:	4b41      	ldr	r3, [pc, #260]	; (e58 <init_all+0x5a0>)
     d54:	2200      	movs	r2, #0
     d56:	61da      	str	r2, [r3, #28]
	LPC_CT32B0->MR2 = 0x00000000; /* decimal 0 */
     d58:	4b3f      	ldr	r3, [pc, #252]	; (e58 <init_all+0x5a0>)
     d5a:	2200      	movs	r2, #0
     d5c:	621a      	str	r2, [r3, #32]
	LPC_CT32B0->MR3 = 0x00000000; /* decimal 0 */
     d5e:	4b3e      	ldr	r3, [pc, #248]	; (e58 <init_all+0x5a0>)
     d60:	2200      	movs	r2, #0
     d62:	625a      	str	r2, [r3, #36]	; 0x24
	LPC_CT32B0->CCR = 0x0000; /* binary: 00000000_00000000 */
     d64:	4b3c      	ldr	r3, [pc, #240]	; (e58 <init_all+0x5a0>)
     d66:	2200      	movs	r2, #0
     d68:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_CT32B0->EMR = 0x0000; /* binary: 00000000_00000000 */
     d6a:	4b3b      	ldr	r3, [pc, #236]	; (e58 <init_all+0x5a0>)
     d6c:	2200      	movs	r2, #0
     d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	LPC_CT32B0->PWMC = 0x00000000; /* binary: 00000000_00000000_00000000_00000000 */
     d70:	4b39      	ldr	r3, [pc, #228]	; (e58 <init_all+0x5a0>)
     d72:	2200      	movs	r2, #0
     d74:	675a      	str	r2, [r3, #116]	; 0x74
	LPC_CT32B0->TCR = 0x01; /* binary: 00000001 */
     d76:	4b38      	ldr	r3, [pc, #224]	; (e58 <init_all+0x5a0>)
     d78:	2201      	movs	r2, #1
     d7a:	605a      	str	r2, [r3, #4]
	 Counter clk: 40 MHz, Counts every: 25 ns  (calculated with peripheral clock: 40MHz)
	 Clear on Rising Edge of CAP1.0
	 MCR1.1 : reset, generate interrupt on compare match
	 */

	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     d7c:	4934      	ldr	r1, [pc, #208]	; (e50 <init_all+0x598>)
     d7e:	4a34      	ldr	r2, [pc, #208]	; (e50 <init_all+0x598>)
     d80:	2380      	movs	r3, #128	; 0x80
     d82:	58d3      	ldr	r3, [r2, r3]
			| (1UL << 10); /* Enable clock for CT32B1 (default is disabled) */
     d84:	4a36      	ldr	r2, [pc, #216]	; (e60 <init_all+0x5a8>)
     d86:	4013      	ands	r3, r2
     d88:	2280      	movs	r2, #128	; 0x80
     d8a:	00d2      	lsls	r2, r2, #3
     d8c:	4313      	orrs	r3, r2
	 Counter clk: 40 MHz, Counts every: 25 ns  (calculated with peripheral clock: 40MHz)
	 Clear on Rising Edge of CAP1.0
	 MCR1.1 : reset, generate interrupt on compare match
	 */

	LPC_SYSCON->SYSAHBCLKCTRL = (LPC_SYSCON->SYSAHBCLKCTRL & 0x098DFFFF)
     d8e:	2280      	movs	r2, #128	; 0x80
     d90:	508b      	str	r3, [r1, r2]
			| (1UL << 10); /* Enable clock for CT32B1 (default is disabled) */

	LPC_CT32B1->CTCR = 0x10; /* binary: 00010000 */
     d92:	4b34      	ldr	r3, [pc, #208]	; (e64 <init_all+0x5ac>)
     d94:	2210      	movs	r2, #16
     d96:	671a      	str	r2, [r3, #112]	; 0x70
	LPC_CT32B1->TC = 0x00000000; /* decimal 0 */
     d98:	4b32      	ldr	r3, [pc, #200]	; (e64 <init_all+0x5ac>)
     d9a:	2200      	movs	r2, #0
     d9c:	609a      	str	r2, [r3, #8]
	LPC_CT32B1->PR = 0x00000000; /* decimal 0 */
     d9e:	4b31      	ldr	r3, [pc, #196]	; (e64 <init_all+0x5ac>)
     da0:	2200      	movs	r2, #0
     da2:	60da      	str	r2, [r3, #12]
	LPC_CT32B1->MCR = 0x0018; /* binary: 00000000_00011000 */
     da4:	4b2f      	ldr	r3, [pc, #188]	; (e64 <init_all+0x5ac>)
     da6:	2218      	movs	r2, #24
     da8:	615a      	str	r2, [r3, #20]
	LPC_CT32B1->MR0 = 0x00000000; /* decimal 0 */
     daa:	4b2e      	ldr	r3, [pc, #184]	; (e64 <init_all+0x5ac>)
     dac:	2200      	movs	r2, #0
     dae:	619a      	str	r2, [r3, #24]
	LPC_CT32B1->MR1 = 0x00000001; /* decimal 1 */
     db0:	4b2c      	ldr	r3, [pc, #176]	; (e64 <init_all+0x5ac>)
     db2:	2201      	movs	r2, #1
     db4:	61da      	str	r2, [r3, #28]
	LPC_CT32B1->MR2 = 0x00000000; /* decimal 0 */
     db6:	4b2b      	ldr	r3, [pc, #172]	; (e64 <init_all+0x5ac>)
     db8:	2200      	movs	r2, #0
     dba:	621a      	str	r2, [r3, #32]
	LPC_CT32B1->MR3 = 0x00000000; /* decimal 0 */
     dbc:	4b29      	ldr	r3, [pc, #164]	; (e64 <init_all+0x5ac>)
     dbe:	2200      	movs	r2, #0
     dc0:	625a      	str	r2, [r3, #36]	; 0x24
	LPC_CT32B1->CCR = 0x0000; /* binary: 00000000_00000000 */
     dc2:	4b28      	ldr	r3, [pc, #160]	; (e64 <init_all+0x5ac>)
     dc4:	2200      	movs	r2, #0
     dc6:	629a      	str	r2, [r3, #40]	; 0x28
	LPC_CT32B1->EMR = 0x0000; /* binary: 00000000_00000000 */
     dc8:	4b26      	ldr	r3, [pc, #152]	; (e64 <init_all+0x5ac>)
     dca:	2200      	movs	r2, #0
     dcc:	63da      	str	r2, [r3, #60]	; 0x3c
	LPC_CT32B1->PWMC = 0x00000000; /* binary: 00000000_00000000_00000000_00000000 */
     dce:	4b25      	ldr	r3, [pc, #148]	; (e64 <init_all+0x5ac>)
     dd0:	2200      	movs	r2, #0
     dd2:	675a      	str	r2, [r3, #116]	; 0x74
	LPC_CT32B1->TCR = 0x01; /* binary: 00000001 */
     dd4:	4b23      	ldr	r3, [pc, #140]	; (e64 <init_all+0x5ac>)
     dd6:	2201      	movs	r2, #1
     dd8:	605a      	str	r2, [r3, #4]
	 Vectored Interrupt initialization
	 ******************************************************************************/

//	NVIC_SetPriority(SysTick_IRQn, 0); /* Default priority 0, can be 0(highest) - 3(lowest) */
//	NVIC_EnableIRQ(SysTick_IRQn); /* Enable System Tick Interrupt */
	NVIC_SetPriority(FLEX_INT0_IRQn, 0); /* Default priority 0, can be 0(highest) - 3(lowest) */
     dda:	2000      	movs	r0, #0
     ddc:	2100      	movs	r1, #0
     dde:	f7ff faa5 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(FLEX_INT0_IRQn); /* Enable GPIO pin interrupt 0 */
     de2:	2000      	movs	r0, #0
     de4:	f7ff fa8c 	bl	300 <NVIC_EnableIRQ>

	NVIC_SetPriority(FLEX_INT1_IRQn, 2); /* Default priority 0, can be 0(highest) - 3(lowest) */
     de8:	2001      	movs	r0, #1
     dea:	2102      	movs	r1, #2
     dec:	f7ff fa9e 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(FLEX_INT1_IRQn); /* Enable GPIO pin interrupt 1 */
     df0:	2001      	movs	r0, #1
     df2:	f7ff fa85 	bl	300 <NVIC_EnableIRQ>

	NVIC_SetPriority(FLEX_INT2_IRQn, 2); /* Default priority 0, can be 0(highest) - 3(lowest) */
     df6:	2002      	movs	r0, #2
     df8:	2102      	movs	r1, #2
     dfa:	f7ff fa97 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(FLEX_INT2_IRQn); /* Enable GPIO pin interrupt 2 */
     dfe:	2002      	movs	r0, #2
     e00:	f7ff fa7e 	bl	300 <NVIC_EnableIRQ>

	NVIC_SetPriority(FLEX_INT3_IRQn, 2); /* Default priority 0, can be 0(highest) - 3(lowest) */
     e04:	2003      	movs	r0, #3
     e06:	2102      	movs	r1, #2
     e08:	f7ff fa90 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(FLEX_INT3_IRQn); /* Enable GPIO pin interrupt 3 */
     e0c:	2003      	movs	r0, #3
     e0e:	f7ff fa77 	bl	300 <NVIC_EnableIRQ>

	NVIC_SetPriority(FLEX_INT4_IRQn, 2); /* Default priority 0, can be 0(highest) - 3(lowest) */
     e12:	2004      	movs	r0, #4
     e14:	2102      	movs	r1, #2
     e16:	f7ff fa89 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(FLEX_INT4_IRQn); /* Enable GPIO pin interrupt 4 */
     e1a:	2004      	movs	r0, #4
     e1c:	f7ff fa70 	bl	300 <NVIC_EnableIRQ>

	NVIC_SetPriority(TIMER_32_0_IRQn, 0); /* Default priority 0, can be 0(highest) - 3(lowest) */
     e20:	2012      	movs	r0, #18
     e22:	2100      	movs	r1, #0
     e24:	f7ff fa82 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIMER_32_0_IRQn); /* Enable 32-bit Timer0 (CT32B0) Interrupt */
     e28:	2012      	movs	r0, #18
     e2a:	f7ff fa69 	bl	300 <NVIC_EnableIRQ>

	NVIC_SetPriority(TIMER_32_1_IRQn, 1); /* Default priority 0, can be 0(highest) - 3(lowest) */
     e2e:	2013      	movs	r0, #19
     e30:	2101      	movs	r1, #1
     e32:	f7ff fa7b 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIMER_32_1_IRQn); /* Enable 32-bit Timer1 (CT32B1) Interrupt */
     e36:	2013      	movs	r0, #19
     e38:	f7ff fa62 	bl	300 <NVIC_EnableIRQ>

	NVIC_SetPriority(UART_IRQn, 1); /* Default priority 0, can be 0(highest) - 3(lowest) */
     e3c:	2015      	movs	r0, #21
     e3e:	2101      	movs	r1, #1
     e40:	f7ff fa74 	bl	32c <NVIC_SetPriority>
	NVIC_EnableIRQ(UART_IRQn); /* Enable UART Interrupt */
     e44:	2015      	movs	r0, #21
     e46:	f7ff fa5b 	bl	300 <NVIC_EnableIRQ>
}
     e4a:	46bd      	mov	sp, r7
     e4c:	bd80      	pop	{r7, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	40048000 	.word	0x40048000
     e54:	098dfdff 	.word	0x098dfdff
     e58:	40014000 	.word	0x40014000
     e5c:	00061a7f 	.word	0x00061a7f
     e60:	098dfbff 	.word	0x098dfbff
     e64:	40018000 	.word	0x40018000

00000e68 <usart_senddata>:

void usart_senddata(char send) {
     e68:	b580      	push	{r7, lr}
     e6a:	b082      	sub	sp, #8
     e6c:	af00      	add	r7, sp, #0
     e6e:	1c02      	adds	r2, r0, #0
     e70:	1dfb      	adds	r3, r7, #7
     e72:	701a      	strb	r2, [r3, #0]
	LPC_USART->THR = send;
     e74:	4b03      	ldr	r3, [pc, #12]	; (e84 <usart_senddata+0x1c>)
     e76:	1dfa      	adds	r2, r7, #7
     e78:	7812      	ldrb	r2, [r2, #0]
     e7a:	601a      	str	r2, [r3, #0]
}
     e7c:	46bd      	mov	sp, r7
     e7e:	b002      	add	sp, #8
     e80:	bd80      	pop	{r7, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	40008000 	.word	0x40008000

00000e88 <show1>:
#include "hal_pio.h"
#include "seg.h"



void show1(int choose) {
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
     e90:	4b17      	ldr	r3, [pc, #92]	; (ef0 <show1+0x68>)
     e92:	687a      	ldr	r2, [r7, #4]
     e94:	0092      	lsls	r2, r2, #2
     e96:	58d3      	ldr	r3, [r2, r3]
     e98:	1c58      	adds	r0, r3, #1
     e9a:	4a15      	ldr	r2, [pc, #84]	; (ef0 <show1+0x68>)
     e9c:	6879      	ldr	r1, [r7, #4]
     e9e:	0089      	lsls	r1, r1, #2
     ea0:	5088      	str	r0, [r1, r2]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d002      	beq.n	eac <show1+0x24>
     ea6:	2b01      	cmp	r3, #1
     ea8:	d00c      	beq.n	ec4 <show1+0x3c>
     eaa:	e017      	b.n	edc <show1+0x54>
	case 0:
		B_SEG_ON;
     eac:	23a0      	movs	r3, #160	; 0xa0
     eae:	05db      	lsls	r3, r3, #23
     eb0:	22a0      	movs	r2, #160	; 0xa0
     eb2:	05d2      	lsls	r2, r2, #23
     eb4:	490f      	ldr	r1, [pc, #60]	; (ef4 <show1+0x6c>)
     eb6:	5852      	ldr	r2, [r2, r1]
     eb8:	2180      	movs	r1, #128	; 0x80
     eba:	03c9      	lsls	r1, r1, #15
     ebc:	430a      	orrs	r2, r1
     ebe:	490d      	ldr	r1, [pc, #52]	; (ef4 <show1+0x6c>)
     ec0:	505a      	str	r2, [r3, r1]
		break;
     ec2:	e011      	b.n	ee8 <show1+0x60>
	case 1:
		C_SEG_ON;
     ec4:	23a0      	movs	r3, #160	; 0xa0
     ec6:	05db      	lsls	r3, r3, #23
     ec8:	22a0      	movs	r2, #160	; 0xa0
     eca:	05d2      	lsls	r2, r2, #23
     ecc:	4909      	ldr	r1, [pc, #36]	; (ef4 <show1+0x6c>)
     ece:	5852      	ldr	r2, [r2, r1]
     ed0:	2180      	movs	r1, #128	; 0x80
     ed2:	0189      	lsls	r1, r1, #6
     ed4:	430a      	orrs	r2, r1
     ed6:	4907      	ldr	r1, [pc, #28]	; (ef4 <show1+0x6c>)
     ed8:	505a      	str	r2, [r3, r1]
		break;
     eda:	e005      	b.n	ee8 <show1+0x60>
//	case 4:
//		break;
//	case 5:
//		break;
	default:
		p[choose] = 0;
     edc:	4b04      	ldr	r3, [pc, #16]	; (ef0 <show1+0x68>)
     ede:	687a      	ldr	r2, [r7, #4]
     ee0:	0092      	lsls	r2, r2, #2
     ee2:	2100      	movs	r1, #0
     ee4:	50d1      	str	r1, [r2, r3]
		break;
     ee6:	46c0      	nop			; (mov r8, r8)
	}
}
     ee8:	46bd      	mov	sp, r7
     eea:	b002      	add	sp, #8
     eec:	bd80      	pop	{r7, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	10000038 	.word	0x10000038
     ef4:	00002204 	.word	0x00002204

00000ef8 <show2>:
void show2(int choose) {
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
     f00:	4b2d      	ldr	r3, [pc, #180]	; (fb8 <show2+0xc0>)
     f02:	687a      	ldr	r2, [r7, #4]
     f04:	0092      	lsls	r2, r2, #2
     f06:	58d3      	ldr	r3, [r2, r3]
     f08:	1c58      	adds	r0, r3, #1
     f0a:	4a2b      	ldr	r2, [pc, #172]	; (fb8 <show2+0xc0>)
     f0c:	6879      	ldr	r1, [r7, #4]
     f0e:	0089      	lsls	r1, r1, #2
     f10:	5088      	str	r0, [r1, r2]
     f12:	2b04      	cmp	r3, #4
     f14:	d846      	bhi.n	fa4 <show2+0xac>
     f16:	009a      	lsls	r2, r3, #2
     f18:	4b28      	ldr	r3, [pc, #160]	; (fbc <show2+0xc4>)
     f1a:	18d3      	adds	r3, r2, r3
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	469f      	mov	pc, r3
	case 0:
		A_SEG_ON;
     f20:	23a0      	movs	r3, #160	; 0xa0
     f22:	05da      	lsls	r2, r3, #23
     f24:	23a0      	movs	r3, #160	; 0xa0
     f26:	05d9      	lsls	r1, r3, #23
     f28:	2388      	movs	r3, #136	; 0x88
     f2a:	019b      	lsls	r3, r3, #6
     f2c:	58cb      	ldr	r3, [r1, r3]
     f2e:	2180      	movs	r1, #128	; 0x80
     f30:	0409      	lsls	r1, r1, #16
     f32:	4319      	orrs	r1, r3
     f34:	2388      	movs	r3, #136	; 0x88
     f36:	019b      	lsls	r3, r3, #6
     f38:	50d1      	str	r1, [r2, r3]
		break;
     f3a:	e039      	b.n	fb0 <show2+0xb8>
	case 1:
		B_SEG_ON;
     f3c:	23a0      	movs	r3, #160	; 0xa0
     f3e:	05db      	lsls	r3, r3, #23
     f40:	22a0      	movs	r2, #160	; 0xa0
     f42:	05d2      	lsls	r2, r2, #23
     f44:	491e      	ldr	r1, [pc, #120]	; (fc0 <show2+0xc8>)
     f46:	5852      	ldr	r2, [r2, r1]
     f48:	2180      	movs	r1, #128	; 0x80
     f4a:	03c9      	lsls	r1, r1, #15
     f4c:	430a      	orrs	r2, r1
     f4e:	491c      	ldr	r1, [pc, #112]	; (fc0 <show2+0xc8>)
     f50:	505a      	str	r2, [r3, r1]
		break;
     f52:	e02d      	b.n	fb0 <show2+0xb8>
	case 2:
		G_SEG_ON;
     f54:	23a0      	movs	r3, #160	; 0xa0
     f56:	05db      	lsls	r3, r3, #23
     f58:	22a0      	movs	r2, #160	; 0xa0
     f5a:	05d2      	lsls	r2, r2, #23
     f5c:	4918      	ldr	r1, [pc, #96]	; (fc0 <show2+0xc8>)
     f5e:	5852      	ldr	r2, [r2, r1]
     f60:	2180      	movs	r1, #128	; 0x80
     f62:	01c9      	lsls	r1, r1, #7
     f64:	430a      	orrs	r2, r1
     f66:	4916      	ldr	r1, [pc, #88]	; (fc0 <show2+0xc8>)
     f68:	505a      	str	r2, [r3, r1]
		break;
     f6a:	e021      	b.n	fb0 <show2+0xb8>
	case 3:
		E_SEG_ON;
     f6c:	23a0      	movs	r3, #160	; 0xa0
     f6e:	05da      	lsls	r2, r3, #23
     f70:	23a0      	movs	r3, #160	; 0xa0
     f72:	05d9      	lsls	r1, r3, #23
     f74:	2388      	movs	r3, #136	; 0x88
     f76:	019b      	lsls	r3, r3, #6
     f78:	58cb      	ldr	r3, [r1, r3]
     f7a:	2180      	movs	r1, #128	; 0x80
     f7c:	0249      	lsls	r1, r1, #9
     f7e:	4319      	orrs	r1, r3
     f80:	2388      	movs	r3, #136	; 0x88
     f82:	019b      	lsls	r3, r3, #6
     f84:	50d1      	str	r1, [r2, r3]
		break;
     f86:	e013      	b.n	fb0 <show2+0xb8>
	case 4:
		D_SEG_ON;
     f88:	23a0      	movs	r3, #160	; 0xa0
     f8a:	05da      	lsls	r2, r3, #23
     f8c:	23a0      	movs	r3, #160	; 0xa0
     f8e:	05d9      	lsls	r1, r3, #23
     f90:	2388      	movs	r3, #136	; 0x88
     f92:	019b      	lsls	r3, r3, #6
     f94:	58cb      	ldr	r3, [r1, r3]
     f96:	2180      	movs	r1, #128	; 0x80
     f98:	0189      	lsls	r1, r1, #6
     f9a:	4319      	orrs	r1, r3
     f9c:	2388      	movs	r3, #136	; 0x88
     f9e:	019b      	lsls	r3, r3, #6
     fa0:	50d1      	str	r1, [r2, r3]
		break;
     fa2:	e005      	b.n	fb0 <show2+0xb8>
//	case 5:
//		break;
	default:
		p[choose] = 0;
     fa4:	4b04      	ldr	r3, [pc, #16]	; (fb8 <show2+0xc0>)
     fa6:	687a      	ldr	r2, [r7, #4]
     fa8:	0092      	lsls	r2, r2, #2
     faa:	2100      	movs	r1, #0
     fac:	50d1      	str	r1, [r2, r3]
		break;
     fae:	46c0      	nop			; (mov r8, r8)
	}
}
     fb0:	46bd      	mov	sp, r7
     fb2:	b002      	add	sp, #8
     fb4:	bd80      	pop	{r7, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	10000048 	.word	0x10000048
     fbc:	000025d4 	.word	0x000025d4
     fc0:	00002204 	.word	0x00002204

00000fc4 <show3>:
void show3(int choose) {
     fc4:	b580      	push	{r7, lr}
     fc6:	b082      	sub	sp, #8
     fc8:	af00      	add	r7, sp, #0
     fca:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
     fcc:	4b2c      	ldr	r3, [pc, #176]	; (1080 <show3+0xbc>)
     fce:	687a      	ldr	r2, [r7, #4]
     fd0:	0092      	lsls	r2, r2, #2
     fd2:	58d3      	ldr	r3, [r2, r3]
     fd4:	1c58      	adds	r0, r3, #1
     fd6:	4a2a      	ldr	r2, [pc, #168]	; (1080 <show3+0xbc>)
     fd8:	6879      	ldr	r1, [r7, #4]
     fda:	0089      	lsls	r1, r1, #2
     fdc:	5088      	str	r0, [r1, r2]
     fde:	2b04      	cmp	r3, #4
     fe0:	d844      	bhi.n	106c <show3+0xa8>
     fe2:	009a      	lsls	r2, r3, #2
     fe4:	4b27      	ldr	r3, [pc, #156]	; (1084 <show3+0xc0>)
     fe6:	18d3      	adds	r3, r2, r3
     fe8:	681b      	ldr	r3, [r3, #0]
     fea:	469f      	mov	pc, r3
	case 0:
		A_SEG_ON;
     fec:	23a0      	movs	r3, #160	; 0xa0
     fee:	05da      	lsls	r2, r3, #23
     ff0:	23a0      	movs	r3, #160	; 0xa0
     ff2:	05d9      	lsls	r1, r3, #23
     ff4:	2388      	movs	r3, #136	; 0x88
     ff6:	019b      	lsls	r3, r3, #6
     ff8:	58cb      	ldr	r3, [r1, r3]
     ffa:	2180      	movs	r1, #128	; 0x80
     ffc:	0409      	lsls	r1, r1, #16
     ffe:	4319      	orrs	r1, r3
    1000:	2388      	movs	r3, #136	; 0x88
    1002:	019b      	lsls	r3, r3, #6
    1004:	50d1      	str	r1, [r2, r3]
		break;
    1006:	e037      	b.n	1078 <show3+0xb4>
	case 1:
		B_SEG_ON;
    1008:	23a0      	movs	r3, #160	; 0xa0
    100a:	05db      	lsls	r3, r3, #23
    100c:	22a0      	movs	r2, #160	; 0xa0
    100e:	05d2      	lsls	r2, r2, #23
    1010:	491d      	ldr	r1, [pc, #116]	; (1088 <show3+0xc4>)
    1012:	5852      	ldr	r2, [r2, r1]
    1014:	2180      	movs	r1, #128	; 0x80
    1016:	03c9      	lsls	r1, r1, #15
    1018:	430a      	orrs	r2, r1
    101a:	491b      	ldr	r1, [pc, #108]	; (1088 <show3+0xc4>)
    101c:	505a      	str	r2, [r3, r1]
		break;
    101e:	e02b      	b.n	1078 <show3+0xb4>
	case 2:
		C_SEG_ON;
    1020:	23a0      	movs	r3, #160	; 0xa0
    1022:	05db      	lsls	r3, r3, #23
    1024:	22a0      	movs	r2, #160	; 0xa0
    1026:	05d2      	lsls	r2, r2, #23
    1028:	4917      	ldr	r1, [pc, #92]	; (1088 <show3+0xc4>)
    102a:	5852      	ldr	r2, [r2, r1]
    102c:	2180      	movs	r1, #128	; 0x80
    102e:	0189      	lsls	r1, r1, #6
    1030:	430a      	orrs	r2, r1
    1032:	4915      	ldr	r1, [pc, #84]	; (1088 <show3+0xc4>)
    1034:	505a      	str	r2, [r3, r1]
		break;
    1036:	e01f      	b.n	1078 <show3+0xb4>
	case 3:
		D_SEG_ON;
    1038:	23a0      	movs	r3, #160	; 0xa0
    103a:	05da      	lsls	r2, r3, #23
    103c:	23a0      	movs	r3, #160	; 0xa0
    103e:	05d9      	lsls	r1, r3, #23
    1040:	2388      	movs	r3, #136	; 0x88
    1042:	019b      	lsls	r3, r3, #6
    1044:	58cb      	ldr	r3, [r1, r3]
    1046:	2180      	movs	r1, #128	; 0x80
    1048:	0189      	lsls	r1, r1, #6
    104a:	4319      	orrs	r1, r3
    104c:	2388      	movs	r3, #136	; 0x88
    104e:	019b      	lsls	r3, r3, #6
    1050:	50d1      	str	r1, [r2, r3]
		break;
    1052:	e011      	b.n	1078 <show3+0xb4>
	case 4:
		G_SEG_ON;
    1054:	23a0      	movs	r3, #160	; 0xa0
    1056:	05db      	lsls	r3, r3, #23
    1058:	22a0      	movs	r2, #160	; 0xa0
    105a:	05d2      	lsls	r2, r2, #23
    105c:	490a      	ldr	r1, [pc, #40]	; (1088 <show3+0xc4>)
    105e:	5852      	ldr	r2, [r2, r1]
    1060:	2180      	movs	r1, #128	; 0x80
    1062:	01c9      	lsls	r1, r1, #7
    1064:	430a      	orrs	r2, r1
    1066:	4908      	ldr	r1, [pc, #32]	; (1088 <show3+0xc4>)
    1068:	505a      	str	r2, [r3, r1]
		break;
    106a:	e005      	b.n	1078 <show3+0xb4>
//	case 5:
//		break;
	default:
		p[choose] = 0;
    106c:	4b04      	ldr	r3, [pc, #16]	; (1080 <show3+0xbc>)
    106e:	687a      	ldr	r2, [r7, #4]
    1070:	0092      	lsls	r2, r2, #2
    1072:	2100      	movs	r1, #0
    1074:	50d1      	str	r1, [r2, r3]
		break;
    1076:	46c0      	nop			; (mov r8, r8)
	}
}
    1078:	46bd      	mov	sp, r7
    107a:	b002      	add	sp, #8
    107c:	bd80      	pop	{r7, pc}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	10000058 	.word	0x10000058
    1084:	000025e8 	.word	0x000025e8
    1088:	00002204 	.word	0x00002204

0000108c <show4>:
void show4(int choose) {
    108c:	b580      	push	{r7, lr}
    108e:	b082      	sub	sp, #8
    1090:	af00      	add	r7, sp, #0
    1092:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
    1094:	4b27      	ldr	r3, [pc, #156]	; (1134 <show4+0xa8>)
    1096:	687a      	ldr	r2, [r7, #4]
    1098:	0092      	lsls	r2, r2, #2
    109a:	58d3      	ldr	r3, [r2, r3]
    109c:	1c58      	adds	r0, r3, #1
    109e:	4a25      	ldr	r2, [pc, #148]	; (1134 <show4+0xa8>)
    10a0:	6879      	ldr	r1, [r7, #4]
    10a2:	0089      	lsls	r1, r1, #2
    10a4:	5088      	str	r0, [r1, r2]
    10a6:	2b01      	cmp	r3, #1
    10a8:	d016      	beq.n	10d8 <show4+0x4c>
    10aa:	dc02      	bgt.n	10b2 <show4+0x26>
    10ac:	2b00      	cmp	r3, #0
    10ae:	d005      	beq.n	10bc <show4+0x30>
    10b0:	e036      	b.n	1120 <show4+0x94>
    10b2:	2b02      	cmp	r3, #2
    10b4:	d01c      	beq.n	10f0 <show4+0x64>
    10b6:	2b03      	cmp	r3, #3
    10b8:	d026      	beq.n	1108 <show4+0x7c>
    10ba:	e031      	b.n	1120 <show4+0x94>
	case 0:
		F_SEG_ON;
    10bc:	23a0      	movs	r3, #160	; 0xa0
    10be:	05da      	lsls	r2, r3, #23
    10c0:	23a0      	movs	r3, #160	; 0xa0
    10c2:	05d9      	lsls	r1, r3, #23
    10c4:	2388      	movs	r3, #136	; 0x88
    10c6:	019b      	lsls	r3, r3, #6
    10c8:	58cb      	ldr	r3, [r1, r3]
    10ca:	2180      	movs	r1, #128	; 0x80
    10cc:	0149      	lsls	r1, r1, #5
    10ce:	4319      	orrs	r1, r3
    10d0:	2388      	movs	r3, #136	; 0x88
    10d2:	019b      	lsls	r3, r3, #6
    10d4:	50d1      	str	r1, [r2, r3]
		break;
    10d6:	e029      	b.n	112c <show4+0xa0>
	case 1:
		B_SEG_ON;
    10d8:	23a0      	movs	r3, #160	; 0xa0
    10da:	05db      	lsls	r3, r3, #23
    10dc:	22a0      	movs	r2, #160	; 0xa0
    10de:	05d2      	lsls	r2, r2, #23
    10e0:	4915      	ldr	r1, [pc, #84]	; (1138 <show4+0xac>)
    10e2:	5852      	ldr	r2, [r2, r1]
    10e4:	2180      	movs	r1, #128	; 0x80
    10e6:	03c9      	lsls	r1, r1, #15
    10e8:	430a      	orrs	r2, r1
    10ea:	4913      	ldr	r1, [pc, #76]	; (1138 <show4+0xac>)
    10ec:	505a      	str	r2, [r3, r1]
		break;
    10ee:	e01d      	b.n	112c <show4+0xa0>
	case 2:
		C_SEG_ON;
    10f0:	23a0      	movs	r3, #160	; 0xa0
    10f2:	05db      	lsls	r3, r3, #23
    10f4:	22a0      	movs	r2, #160	; 0xa0
    10f6:	05d2      	lsls	r2, r2, #23
    10f8:	490f      	ldr	r1, [pc, #60]	; (1138 <show4+0xac>)
    10fa:	5852      	ldr	r2, [r2, r1]
    10fc:	2180      	movs	r1, #128	; 0x80
    10fe:	0189      	lsls	r1, r1, #6
    1100:	430a      	orrs	r2, r1
    1102:	490d      	ldr	r1, [pc, #52]	; (1138 <show4+0xac>)
    1104:	505a      	str	r2, [r3, r1]
		break;
    1106:	e011      	b.n	112c <show4+0xa0>
	case 3:
		G_SEG_ON;
    1108:	23a0      	movs	r3, #160	; 0xa0
    110a:	05db      	lsls	r3, r3, #23
    110c:	22a0      	movs	r2, #160	; 0xa0
    110e:	05d2      	lsls	r2, r2, #23
    1110:	4909      	ldr	r1, [pc, #36]	; (1138 <show4+0xac>)
    1112:	5852      	ldr	r2, [r2, r1]
    1114:	2180      	movs	r1, #128	; 0x80
    1116:	01c9      	lsls	r1, r1, #7
    1118:	430a      	orrs	r2, r1
    111a:	4907      	ldr	r1, [pc, #28]	; (1138 <show4+0xac>)
    111c:	505a      	str	r2, [r3, r1]
		break;
    111e:	e005      	b.n	112c <show4+0xa0>
//	case 4:
//		break;
//	case 5:
//		break;
	default:
		p[choose] = 0;
    1120:	4b04      	ldr	r3, [pc, #16]	; (1134 <show4+0xa8>)
    1122:	687a      	ldr	r2, [r7, #4]
    1124:	0092      	lsls	r2, r2, #2
    1126:	2100      	movs	r1, #0
    1128:	50d1      	str	r1, [r2, r3]
		break;
    112a:	46c0      	nop			; (mov r8, r8)
	}
}
    112c:	46bd      	mov	sp, r7
    112e:	b002      	add	sp, #8
    1130:	bd80      	pop	{r7, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	10000068 	.word	0x10000068
    1138:	00002204 	.word	0x00002204

0000113c <show5>:
void show5(int choose) {
    113c:	b580      	push	{r7, lr}
    113e:	b082      	sub	sp, #8
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
    1144:	4b2d      	ldr	r3, [pc, #180]	; (11fc <show5+0xc0>)
    1146:	687a      	ldr	r2, [r7, #4]
    1148:	0092      	lsls	r2, r2, #2
    114a:	58d3      	ldr	r3, [r2, r3]
    114c:	1c58      	adds	r0, r3, #1
    114e:	4a2b      	ldr	r2, [pc, #172]	; (11fc <show5+0xc0>)
    1150:	6879      	ldr	r1, [r7, #4]
    1152:	0089      	lsls	r1, r1, #2
    1154:	5088      	str	r0, [r1, r2]
    1156:	2b04      	cmp	r3, #4
    1158:	d846      	bhi.n	11e8 <show5+0xac>
    115a:	009a      	lsls	r2, r3, #2
    115c:	4b28      	ldr	r3, [pc, #160]	; (1200 <show5+0xc4>)
    115e:	18d3      	adds	r3, r2, r3
    1160:	681b      	ldr	r3, [r3, #0]
    1162:	469f      	mov	pc, r3
	case 0:
		A_SEG_ON;
    1164:	23a0      	movs	r3, #160	; 0xa0
    1166:	05da      	lsls	r2, r3, #23
    1168:	23a0      	movs	r3, #160	; 0xa0
    116a:	05d9      	lsls	r1, r3, #23
    116c:	2388      	movs	r3, #136	; 0x88
    116e:	019b      	lsls	r3, r3, #6
    1170:	58cb      	ldr	r3, [r1, r3]
    1172:	2180      	movs	r1, #128	; 0x80
    1174:	0409      	lsls	r1, r1, #16
    1176:	4319      	orrs	r1, r3
    1178:	2388      	movs	r3, #136	; 0x88
    117a:	019b      	lsls	r3, r3, #6
    117c:	50d1      	str	r1, [r2, r3]
		break;
    117e:	e039      	b.n	11f4 <show5+0xb8>
	case 1:
		F_SEG_ON;
    1180:	23a0      	movs	r3, #160	; 0xa0
    1182:	05da      	lsls	r2, r3, #23
    1184:	23a0      	movs	r3, #160	; 0xa0
    1186:	05d9      	lsls	r1, r3, #23
    1188:	2388      	movs	r3, #136	; 0x88
    118a:	019b      	lsls	r3, r3, #6
    118c:	58cb      	ldr	r3, [r1, r3]
    118e:	2180      	movs	r1, #128	; 0x80
    1190:	0149      	lsls	r1, r1, #5
    1192:	4319      	orrs	r1, r3
    1194:	2388      	movs	r3, #136	; 0x88
    1196:	019b      	lsls	r3, r3, #6
    1198:	50d1      	str	r1, [r2, r3]
		break;
    119a:	e02b      	b.n	11f4 <show5+0xb8>
	case 2:
		C_SEG_ON;
    119c:	23a0      	movs	r3, #160	; 0xa0
    119e:	05db      	lsls	r3, r3, #23
    11a0:	22a0      	movs	r2, #160	; 0xa0
    11a2:	05d2      	lsls	r2, r2, #23
    11a4:	4917      	ldr	r1, [pc, #92]	; (1204 <show5+0xc8>)
    11a6:	5852      	ldr	r2, [r2, r1]
    11a8:	2180      	movs	r1, #128	; 0x80
    11aa:	0189      	lsls	r1, r1, #6
    11ac:	430a      	orrs	r2, r1
    11ae:	4915      	ldr	r1, [pc, #84]	; (1204 <show5+0xc8>)
    11b0:	505a      	str	r2, [r3, r1]
		break;
    11b2:	e01f      	b.n	11f4 <show5+0xb8>
	case 3:
		D_SEG_ON;
    11b4:	23a0      	movs	r3, #160	; 0xa0
    11b6:	05da      	lsls	r2, r3, #23
    11b8:	23a0      	movs	r3, #160	; 0xa0
    11ba:	05d9      	lsls	r1, r3, #23
    11bc:	2388      	movs	r3, #136	; 0x88
    11be:	019b      	lsls	r3, r3, #6
    11c0:	58cb      	ldr	r3, [r1, r3]
    11c2:	2180      	movs	r1, #128	; 0x80
    11c4:	0189      	lsls	r1, r1, #6
    11c6:	4319      	orrs	r1, r3
    11c8:	2388      	movs	r3, #136	; 0x88
    11ca:	019b      	lsls	r3, r3, #6
    11cc:	50d1      	str	r1, [r2, r3]
		break;
    11ce:	e011      	b.n	11f4 <show5+0xb8>
	case 4:
		G_SEG_ON;
    11d0:	23a0      	movs	r3, #160	; 0xa0
    11d2:	05db      	lsls	r3, r3, #23
    11d4:	22a0      	movs	r2, #160	; 0xa0
    11d6:	05d2      	lsls	r2, r2, #23
    11d8:	490a      	ldr	r1, [pc, #40]	; (1204 <show5+0xc8>)
    11da:	5852      	ldr	r2, [r2, r1]
    11dc:	2180      	movs	r1, #128	; 0x80
    11de:	01c9      	lsls	r1, r1, #7
    11e0:	430a      	orrs	r2, r1
    11e2:	4908      	ldr	r1, [pc, #32]	; (1204 <show5+0xc8>)
    11e4:	505a      	str	r2, [r3, r1]
		break;
    11e6:	e005      	b.n	11f4 <show5+0xb8>
//	case 5:
//		break;
	default:
		p[choose] = 0;
    11e8:	4b04      	ldr	r3, [pc, #16]	; (11fc <show5+0xc0>)
    11ea:	687a      	ldr	r2, [r7, #4]
    11ec:	0092      	lsls	r2, r2, #2
    11ee:	2100      	movs	r1, #0
    11f0:	50d1      	str	r1, [r2, r3]
		break;
    11f2:	46c0      	nop			; (mov r8, r8)
	}
}
    11f4:	46bd      	mov	sp, r7
    11f6:	b002      	add	sp, #8
    11f8:	bd80      	pop	{r7, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	10000078 	.word	0x10000078
    1200:	000025fc 	.word	0x000025fc
    1204:	00002204 	.word	0x00002204

00001208 <show6>:
void show6(int choose) {
    1208:	b580      	push	{r7, lr}
    120a:	b082      	sub	sp, #8
    120c:	af00      	add	r7, sp, #0
    120e:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
    1210:	4b34      	ldr	r3, [pc, #208]	; (12e4 <show6+0xdc>)
    1212:	687a      	ldr	r2, [r7, #4]
    1214:	0092      	lsls	r2, r2, #2
    1216:	58d3      	ldr	r3, [r2, r3]
    1218:	1c58      	adds	r0, r3, #1
    121a:	4a32      	ldr	r2, [pc, #200]	; (12e4 <show6+0xdc>)
    121c:	6879      	ldr	r1, [r7, #4]
    121e:	0089      	lsls	r1, r1, #2
    1220:	5088      	str	r0, [r1, r2]
    1222:	2b05      	cmp	r3, #5
    1224:	d854      	bhi.n	12d0 <show6+0xc8>
    1226:	009a      	lsls	r2, r3, #2
    1228:	4b2f      	ldr	r3, [pc, #188]	; (12e8 <show6+0xe0>)
    122a:	18d3      	adds	r3, r2, r3
    122c:	681b      	ldr	r3, [r3, #0]
    122e:	469f      	mov	pc, r3
	case 0:
		A_SEG_ON;
    1230:	23a0      	movs	r3, #160	; 0xa0
    1232:	05da      	lsls	r2, r3, #23
    1234:	23a0      	movs	r3, #160	; 0xa0
    1236:	05d9      	lsls	r1, r3, #23
    1238:	2388      	movs	r3, #136	; 0x88
    123a:	019b      	lsls	r3, r3, #6
    123c:	58cb      	ldr	r3, [r1, r3]
    123e:	2180      	movs	r1, #128	; 0x80
    1240:	0409      	lsls	r1, r1, #16
    1242:	4319      	orrs	r1, r3
    1244:	2388      	movs	r3, #136	; 0x88
    1246:	019b      	lsls	r3, r3, #6
    1248:	50d1      	str	r1, [r2, r3]
		break;
    124a:	e047      	b.n	12dc <show6+0xd4>
	case 1:
		F_SEG_ON;
    124c:	23a0      	movs	r3, #160	; 0xa0
    124e:	05da      	lsls	r2, r3, #23
    1250:	23a0      	movs	r3, #160	; 0xa0
    1252:	05d9      	lsls	r1, r3, #23
    1254:	2388      	movs	r3, #136	; 0x88
    1256:	019b      	lsls	r3, r3, #6
    1258:	58cb      	ldr	r3, [r1, r3]
    125a:	2180      	movs	r1, #128	; 0x80
    125c:	0149      	lsls	r1, r1, #5
    125e:	4319      	orrs	r1, r3
    1260:	2388      	movs	r3, #136	; 0x88
    1262:	019b      	lsls	r3, r3, #6
    1264:	50d1      	str	r1, [r2, r3]
		break;
    1266:	e039      	b.n	12dc <show6+0xd4>
	case 2:
		C_SEG_ON;
    1268:	23a0      	movs	r3, #160	; 0xa0
    126a:	05db      	lsls	r3, r3, #23
    126c:	22a0      	movs	r2, #160	; 0xa0
    126e:	05d2      	lsls	r2, r2, #23
    1270:	491e      	ldr	r1, [pc, #120]	; (12ec <show6+0xe4>)
    1272:	5852      	ldr	r2, [r2, r1]
    1274:	2180      	movs	r1, #128	; 0x80
    1276:	0189      	lsls	r1, r1, #6
    1278:	430a      	orrs	r2, r1
    127a:	491c      	ldr	r1, [pc, #112]	; (12ec <show6+0xe4>)
    127c:	505a      	str	r2, [r3, r1]
		break;
    127e:	e02d      	b.n	12dc <show6+0xd4>
	case 3:
		D_SEG_ON;
    1280:	23a0      	movs	r3, #160	; 0xa0
    1282:	05da      	lsls	r2, r3, #23
    1284:	23a0      	movs	r3, #160	; 0xa0
    1286:	05d9      	lsls	r1, r3, #23
    1288:	2388      	movs	r3, #136	; 0x88
    128a:	019b      	lsls	r3, r3, #6
    128c:	58cb      	ldr	r3, [r1, r3]
    128e:	2180      	movs	r1, #128	; 0x80
    1290:	0189      	lsls	r1, r1, #6
    1292:	4319      	orrs	r1, r3
    1294:	2388      	movs	r3, #136	; 0x88
    1296:	019b      	lsls	r3, r3, #6
    1298:	50d1      	str	r1, [r2, r3]
		break;
    129a:	e01f      	b.n	12dc <show6+0xd4>
	case 4:
		G_SEG_ON;
    129c:	23a0      	movs	r3, #160	; 0xa0
    129e:	05db      	lsls	r3, r3, #23
    12a0:	22a0      	movs	r2, #160	; 0xa0
    12a2:	05d2      	lsls	r2, r2, #23
    12a4:	4911      	ldr	r1, [pc, #68]	; (12ec <show6+0xe4>)
    12a6:	5852      	ldr	r2, [r2, r1]
    12a8:	2180      	movs	r1, #128	; 0x80
    12aa:	01c9      	lsls	r1, r1, #7
    12ac:	430a      	orrs	r2, r1
    12ae:	490f      	ldr	r1, [pc, #60]	; (12ec <show6+0xe4>)
    12b0:	505a      	str	r2, [r3, r1]
		break;
    12b2:	e013      	b.n	12dc <show6+0xd4>
	case 5:
		E_SEG_ON;
    12b4:	23a0      	movs	r3, #160	; 0xa0
    12b6:	05da      	lsls	r2, r3, #23
    12b8:	23a0      	movs	r3, #160	; 0xa0
    12ba:	05d9      	lsls	r1, r3, #23
    12bc:	2388      	movs	r3, #136	; 0x88
    12be:	019b      	lsls	r3, r3, #6
    12c0:	58cb      	ldr	r3, [r1, r3]
    12c2:	2180      	movs	r1, #128	; 0x80
    12c4:	0249      	lsls	r1, r1, #9
    12c6:	4319      	orrs	r1, r3
    12c8:	2388      	movs	r3, #136	; 0x88
    12ca:	019b      	lsls	r3, r3, #6
    12cc:	50d1      	str	r1, [r2, r3]
		break;
    12ce:	e005      	b.n	12dc <show6+0xd4>
	default:
		p[choose] = 0;
    12d0:	4b04      	ldr	r3, [pc, #16]	; (12e4 <show6+0xdc>)
    12d2:	687a      	ldr	r2, [r7, #4]
    12d4:	0092      	lsls	r2, r2, #2
    12d6:	2100      	movs	r1, #0
    12d8:	50d1      	str	r1, [r2, r3]
		break;
    12da:	46c0      	nop			; (mov r8, r8)
	}
}
    12dc:	46bd      	mov	sp, r7
    12de:	b002      	add	sp, #8
    12e0:	bd80      	pop	{r7, pc}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	10000088 	.word	0x10000088
    12e8:	00002610 	.word	0x00002610
    12ec:	00002204 	.word	0x00002204

000012f0 <show7>:
void show7(int choose) {
    12f0:	b580      	push	{r7, lr}
    12f2:	b082      	sub	sp, #8
    12f4:	af00      	add	r7, sp, #0
    12f6:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
    12f8:	4b1e      	ldr	r3, [pc, #120]	; (1374 <show7+0x84>)
    12fa:	687a      	ldr	r2, [r7, #4]
    12fc:	0092      	lsls	r2, r2, #2
    12fe:	58d3      	ldr	r3, [r2, r3]
    1300:	1c58      	adds	r0, r3, #1
    1302:	4a1c      	ldr	r2, [pc, #112]	; (1374 <show7+0x84>)
    1304:	6879      	ldr	r1, [r7, #4]
    1306:	0089      	lsls	r1, r1, #2
    1308:	5088      	str	r0, [r1, r2]
    130a:	2b01      	cmp	r3, #1
    130c:	d011      	beq.n	1332 <show7+0x42>
    130e:	2b02      	cmp	r3, #2
    1310:	d01b      	beq.n	134a <show7+0x5a>
    1312:	2b00      	cmp	r3, #0
    1314:	d125      	bne.n	1362 <show7+0x72>
	case 0:
		A_SEG_ON;
    1316:	23a0      	movs	r3, #160	; 0xa0
    1318:	05da      	lsls	r2, r3, #23
    131a:	23a0      	movs	r3, #160	; 0xa0
    131c:	05d9      	lsls	r1, r3, #23
    131e:	2388      	movs	r3, #136	; 0x88
    1320:	019b      	lsls	r3, r3, #6
    1322:	58cb      	ldr	r3, [r1, r3]
    1324:	2180      	movs	r1, #128	; 0x80
    1326:	0409      	lsls	r1, r1, #16
    1328:	4319      	orrs	r1, r3
    132a:	2388      	movs	r3, #136	; 0x88
    132c:	019b      	lsls	r3, r3, #6
    132e:	50d1      	str	r1, [r2, r3]
		break;
    1330:	e01d      	b.n	136e <show7+0x7e>
	case 1:
		B_SEG_ON;
    1332:	23a0      	movs	r3, #160	; 0xa0
    1334:	05db      	lsls	r3, r3, #23
    1336:	22a0      	movs	r2, #160	; 0xa0
    1338:	05d2      	lsls	r2, r2, #23
    133a:	490f      	ldr	r1, [pc, #60]	; (1378 <show7+0x88>)
    133c:	5852      	ldr	r2, [r2, r1]
    133e:	2180      	movs	r1, #128	; 0x80
    1340:	03c9      	lsls	r1, r1, #15
    1342:	430a      	orrs	r2, r1
    1344:	490c      	ldr	r1, [pc, #48]	; (1378 <show7+0x88>)
    1346:	505a      	str	r2, [r3, r1]
		break;
    1348:	e011      	b.n	136e <show7+0x7e>
	case 2:
		C_SEG_ON;
    134a:	23a0      	movs	r3, #160	; 0xa0
    134c:	05db      	lsls	r3, r3, #23
    134e:	22a0      	movs	r2, #160	; 0xa0
    1350:	05d2      	lsls	r2, r2, #23
    1352:	4909      	ldr	r1, [pc, #36]	; (1378 <show7+0x88>)
    1354:	5852      	ldr	r2, [r2, r1]
    1356:	2180      	movs	r1, #128	; 0x80
    1358:	0189      	lsls	r1, r1, #6
    135a:	430a      	orrs	r2, r1
    135c:	4906      	ldr	r1, [pc, #24]	; (1378 <show7+0x88>)
    135e:	505a      	str	r2, [r3, r1]
		break;
    1360:	e005      	b.n	136e <show7+0x7e>
//	case 4:
//		break;
//	case 5:
//		break;
	default:
		p[choose] = 0;
    1362:	4b04      	ldr	r3, [pc, #16]	; (1374 <show7+0x84>)
    1364:	687a      	ldr	r2, [r7, #4]
    1366:	0092      	lsls	r2, r2, #2
    1368:	2100      	movs	r1, #0
    136a:	50d1      	str	r1, [r2, r3]
		break;
    136c:	46c0      	nop			; (mov r8, r8)
	}
}
    136e:	46bd      	mov	sp, r7
    1370:	b002      	add	sp, #8
    1372:	bd80      	pop	{r7, pc}
    1374:	10000098 	.word	0x10000098
    1378:	00002204 	.word	0x00002204

0000137c <show8>:
void show8(int choose) {
    137c:	b580      	push	{r7, lr}
    137e:	b082      	sub	sp, #8
    1380:	af00      	add	r7, sp, #0
    1382:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
    1384:	4b3a      	ldr	r3, [pc, #232]	; (1470 <show8+0xf4>)
    1386:	687a      	ldr	r2, [r7, #4]
    1388:	0092      	lsls	r2, r2, #2
    138a:	58d3      	ldr	r3, [r2, r3]
    138c:	1c58      	adds	r0, r3, #1
    138e:	4a38      	ldr	r2, [pc, #224]	; (1470 <show8+0xf4>)
    1390:	6879      	ldr	r1, [r7, #4]
    1392:	0089      	lsls	r1, r1, #2
    1394:	5088      	str	r0, [r1, r2]
    1396:	2b06      	cmp	r3, #6
    1398:	d860      	bhi.n	145c <show8+0xe0>
    139a:	009a      	lsls	r2, r3, #2
    139c:	4b35      	ldr	r3, [pc, #212]	; (1474 <show8+0xf8>)
    139e:	18d3      	adds	r3, r2, r3
    13a0:	681b      	ldr	r3, [r3, #0]
    13a2:	469f      	mov	pc, r3
	case 0:
		A_SEG_ON;
    13a4:	23a0      	movs	r3, #160	; 0xa0
    13a6:	05da      	lsls	r2, r3, #23
    13a8:	23a0      	movs	r3, #160	; 0xa0
    13aa:	05d9      	lsls	r1, r3, #23
    13ac:	2388      	movs	r3, #136	; 0x88
    13ae:	019b      	lsls	r3, r3, #6
    13b0:	58cb      	ldr	r3, [r1, r3]
    13b2:	2180      	movs	r1, #128	; 0x80
    13b4:	0409      	lsls	r1, r1, #16
    13b6:	4319      	orrs	r1, r3
    13b8:	2388      	movs	r3, #136	; 0x88
    13ba:	019b      	lsls	r3, r3, #6
    13bc:	50d1      	str	r1, [r2, r3]
		break;
    13be:	e053      	b.n	1468 <show8+0xec>
	case 1:
		B_SEG_ON;
    13c0:	23a0      	movs	r3, #160	; 0xa0
    13c2:	05db      	lsls	r3, r3, #23
    13c4:	22a0      	movs	r2, #160	; 0xa0
    13c6:	05d2      	lsls	r2, r2, #23
    13c8:	492b      	ldr	r1, [pc, #172]	; (1478 <show8+0xfc>)
    13ca:	5852      	ldr	r2, [r2, r1]
    13cc:	2180      	movs	r1, #128	; 0x80
    13ce:	03c9      	lsls	r1, r1, #15
    13d0:	430a      	orrs	r2, r1
    13d2:	4929      	ldr	r1, [pc, #164]	; (1478 <show8+0xfc>)
    13d4:	505a      	str	r2, [r3, r1]
		break;
    13d6:	e047      	b.n	1468 <show8+0xec>
	case 2:
		C_SEG_ON;
    13d8:	23a0      	movs	r3, #160	; 0xa0
    13da:	05db      	lsls	r3, r3, #23
    13dc:	22a0      	movs	r2, #160	; 0xa0
    13de:	05d2      	lsls	r2, r2, #23
    13e0:	4925      	ldr	r1, [pc, #148]	; (1478 <show8+0xfc>)
    13e2:	5852      	ldr	r2, [r2, r1]
    13e4:	2180      	movs	r1, #128	; 0x80
    13e6:	0189      	lsls	r1, r1, #6
    13e8:	430a      	orrs	r2, r1
    13ea:	4923      	ldr	r1, [pc, #140]	; (1478 <show8+0xfc>)
    13ec:	505a      	str	r2, [r3, r1]
		break;
    13ee:	e03b      	b.n	1468 <show8+0xec>
	case 3:
		D_SEG_ON;
    13f0:	23a0      	movs	r3, #160	; 0xa0
    13f2:	05da      	lsls	r2, r3, #23
    13f4:	23a0      	movs	r3, #160	; 0xa0
    13f6:	05d9      	lsls	r1, r3, #23
    13f8:	2388      	movs	r3, #136	; 0x88
    13fa:	019b      	lsls	r3, r3, #6
    13fc:	58cb      	ldr	r3, [r1, r3]
    13fe:	2180      	movs	r1, #128	; 0x80
    1400:	0189      	lsls	r1, r1, #6
    1402:	4319      	orrs	r1, r3
    1404:	2388      	movs	r3, #136	; 0x88
    1406:	019b      	lsls	r3, r3, #6
    1408:	50d1      	str	r1, [r2, r3]
		break;
    140a:	e02d      	b.n	1468 <show8+0xec>
	case 4:
		E_SEG_ON;
    140c:	23a0      	movs	r3, #160	; 0xa0
    140e:	05da      	lsls	r2, r3, #23
    1410:	23a0      	movs	r3, #160	; 0xa0
    1412:	05d9      	lsls	r1, r3, #23
    1414:	2388      	movs	r3, #136	; 0x88
    1416:	019b      	lsls	r3, r3, #6
    1418:	58cb      	ldr	r3, [r1, r3]
    141a:	2180      	movs	r1, #128	; 0x80
    141c:	0249      	lsls	r1, r1, #9
    141e:	4319      	orrs	r1, r3
    1420:	2388      	movs	r3, #136	; 0x88
    1422:	019b      	lsls	r3, r3, #6
    1424:	50d1      	str	r1, [r2, r3]
		break;
    1426:	e01f      	b.n	1468 <show8+0xec>
	case 5:
		F_SEG_ON;
    1428:	23a0      	movs	r3, #160	; 0xa0
    142a:	05da      	lsls	r2, r3, #23
    142c:	23a0      	movs	r3, #160	; 0xa0
    142e:	05d9      	lsls	r1, r3, #23
    1430:	2388      	movs	r3, #136	; 0x88
    1432:	019b      	lsls	r3, r3, #6
    1434:	58cb      	ldr	r3, [r1, r3]
    1436:	2180      	movs	r1, #128	; 0x80
    1438:	0149      	lsls	r1, r1, #5
    143a:	4319      	orrs	r1, r3
    143c:	2388      	movs	r3, #136	; 0x88
    143e:	019b      	lsls	r3, r3, #6
    1440:	50d1      	str	r1, [r2, r3]
		break;
    1442:	e011      	b.n	1468 <show8+0xec>
	case 6:
		G_SEG_ON;
    1444:	23a0      	movs	r3, #160	; 0xa0
    1446:	05db      	lsls	r3, r3, #23
    1448:	22a0      	movs	r2, #160	; 0xa0
    144a:	05d2      	lsls	r2, r2, #23
    144c:	490a      	ldr	r1, [pc, #40]	; (1478 <show8+0xfc>)
    144e:	5852      	ldr	r2, [r2, r1]
    1450:	2180      	movs	r1, #128	; 0x80
    1452:	01c9      	lsls	r1, r1, #7
    1454:	430a      	orrs	r2, r1
    1456:	4908      	ldr	r1, [pc, #32]	; (1478 <show8+0xfc>)
    1458:	505a      	str	r2, [r3, r1]
		break;
    145a:	e005      	b.n	1468 <show8+0xec>
//	case 7:
//		break;
	default:
		p[choose] = 0;
    145c:	4b04      	ldr	r3, [pc, #16]	; (1470 <show8+0xf4>)
    145e:	687a      	ldr	r2, [r7, #4]
    1460:	0092      	lsls	r2, r2, #2
    1462:	2100      	movs	r1, #0
    1464:	50d1      	str	r1, [r2, r3]
		break;
    1466:	46c0      	nop			; (mov r8, r8)
	}
}
    1468:	46bd      	mov	sp, r7
    146a:	b002      	add	sp, #8
    146c:	bd80      	pop	{r7, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	100000a8 	.word	0x100000a8
    1474:	00002628 	.word	0x00002628
    1478:	00002204 	.word	0x00002204

0000147c <show9>:
void show9(int choose) {
    147c:	b580      	push	{r7, lr}
    147e:	b082      	sub	sp, #8
    1480:	af00      	add	r7, sp, #0
    1482:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
    1484:	4b33      	ldr	r3, [pc, #204]	; (1554 <show9+0xd8>)
    1486:	687a      	ldr	r2, [r7, #4]
    1488:	0092      	lsls	r2, r2, #2
    148a:	58d3      	ldr	r3, [r2, r3]
    148c:	1c58      	adds	r0, r3, #1
    148e:	4a31      	ldr	r2, [pc, #196]	; (1554 <show9+0xd8>)
    1490:	6879      	ldr	r1, [r7, #4]
    1492:	0089      	lsls	r1, r1, #2
    1494:	5088      	str	r0, [r1, r2]
    1496:	2b05      	cmp	r3, #5
    1498:	d852      	bhi.n	1540 <show9+0xc4>
    149a:	009a      	lsls	r2, r3, #2
    149c:	4b2e      	ldr	r3, [pc, #184]	; (1558 <show9+0xdc>)
    149e:	18d3      	adds	r3, r2, r3
    14a0:	681b      	ldr	r3, [r3, #0]
    14a2:	469f      	mov	pc, r3
	case 0:
		A_SEG_ON;
    14a4:	23a0      	movs	r3, #160	; 0xa0
    14a6:	05da      	lsls	r2, r3, #23
    14a8:	23a0      	movs	r3, #160	; 0xa0
    14aa:	05d9      	lsls	r1, r3, #23
    14ac:	2388      	movs	r3, #136	; 0x88
    14ae:	019b      	lsls	r3, r3, #6
    14b0:	58cb      	ldr	r3, [r1, r3]
    14b2:	2180      	movs	r1, #128	; 0x80
    14b4:	0409      	lsls	r1, r1, #16
    14b6:	4319      	orrs	r1, r3
    14b8:	2388      	movs	r3, #136	; 0x88
    14ba:	019b      	lsls	r3, r3, #6
    14bc:	50d1      	str	r1, [r2, r3]
		break;
    14be:	e045      	b.n	154c <show9+0xd0>
	case 1:
		B_SEG_ON;
    14c0:	23a0      	movs	r3, #160	; 0xa0
    14c2:	05db      	lsls	r3, r3, #23
    14c4:	22a0      	movs	r2, #160	; 0xa0
    14c6:	05d2      	lsls	r2, r2, #23
    14c8:	4924      	ldr	r1, [pc, #144]	; (155c <show9+0xe0>)
    14ca:	5852      	ldr	r2, [r2, r1]
    14cc:	2180      	movs	r1, #128	; 0x80
    14ce:	03c9      	lsls	r1, r1, #15
    14d0:	430a      	orrs	r2, r1
    14d2:	4922      	ldr	r1, [pc, #136]	; (155c <show9+0xe0>)
    14d4:	505a      	str	r2, [r3, r1]
		break;
    14d6:	e039      	b.n	154c <show9+0xd0>
	case 2:
		C_SEG_ON;
    14d8:	23a0      	movs	r3, #160	; 0xa0
    14da:	05db      	lsls	r3, r3, #23
    14dc:	22a0      	movs	r2, #160	; 0xa0
    14de:	05d2      	lsls	r2, r2, #23
    14e0:	491e      	ldr	r1, [pc, #120]	; (155c <show9+0xe0>)
    14e2:	5852      	ldr	r2, [r2, r1]
    14e4:	2180      	movs	r1, #128	; 0x80
    14e6:	0189      	lsls	r1, r1, #6
    14e8:	430a      	orrs	r2, r1
    14ea:	491c      	ldr	r1, [pc, #112]	; (155c <show9+0xe0>)
    14ec:	505a      	str	r2, [r3, r1]
		break;
    14ee:	e02d      	b.n	154c <show9+0xd0>
	case 3:
		D_SEG_ON;
    14f0:	23a0      	movs	r3, #160	; 0xa0
    14f2:	05da      	lsls	r2, r3, #23
    14f4:	23a0      	movs	r3, #160	; 0xa0
    14f6:	05d9      	lsls	r1, r3, #23
    14f8:	2388      	movs	r3, #136	; 0x88
    14fa:	019b      	lsls	r3, r3, #6
    14fc:	58cb      	ldr	r3, [r1, r3]
    14fe:	2180      	movs	r1, #128	; 0x80
    1500:	0189      	lsls	r1, r1, #6
    1502:	4319      	orrs	r1, r3
    1504:	2388      	movs	r3, #136	; 0x88
    1506:	019b      	lsls	r3, r3, #6
    1508:	50d1      	str	r1, [r2, r3]
		break;
    150a:	e01f      	b.n	154c <show9+0xd0>
	case 4:
		G_SEG_ON;
    150c:	23a0      	movs	r3, #160	; 0xa0
    150e:	05db      	lsls	r3, r3, #23
    1510:	22a0      	movs	r2, #160	; 0xa0
    1512:	05d2      	lsls	r2, r2, #23
    1514:	4911      	ldr	r1, [pc, #68]	; (155c <show9+0xe0>)
    1516:	5852      	ldr	r2, [r2, r1]
    1518:	2180      	movs	r1, #128	; 0x80
    151a:	01c9      	lsls	r1, r1, #7
    151c:	430a      	orrs	r2, r1
    151e:	490f      	ldr	r1, [pc, #60]	; (155c <show9+0xe0>)
    1520:	505a      	str	r2, [r3, r1]
		break;
    1522:	e013      	b.n	154c <show9+0xd0>
	case 5:
		F_SEG_ON;
    1524:	23a0      	movs	r3, #160	; 0xa0
    1526:	05da      	lsls	r2, r3, #23
    1528:	23a0      	movs	r3, #160	; 0xa0
    152a:	05d9      	lsls	r1, r3, #23
    152c:	2388      	movs	r3, #136	; 0x88
    152e:	019b      	lsls	r3, r3, #6
    1530:	58cb      	ldr	r3, [r1, r3]
    1532:	2180      	movs	r1, #128	; 0x80
    1534:	0149      	lsls	r1, r1, #5
    1536:	4319      	orrs	r1, r3
    1538:	2388      	movs	r3, #136	; 0x88
    153a:	019b      	lsls	r3, r3, #6
    153c:	50d1      	str	r1, [r2, r3]
		break;
    153e:	e005      	b.n	154c <show9+0xd0>
	default:
		p[choose] = 0;
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <show9+0xd8>)
    1542:	687a      	ldr	r2, [r7, #4]
    1544:	0092      	lsls	r2, r2, #2
    1546:	2100      	movs	r1, #0
    1548:	50d1      	str	r1, [r2, r3]
		break;
    154a:	46c0      	nop			; (mov r8, r8)
	}
}
    154c:	46bd      	mov	sp, r7
    154e:	b002      	add	sp, #8
    1550:	bd80      	pop	{r7, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	100000b8 	.word	0x100000b8
    1558:	00002644 	.word	0x00002644
    155c:	00002204 	.word	0x00002204

00001560 <show0>:
void show0(int choose) {
    1560:	b580      	push	{r7, lr}
    1562:	b082      	sub	sp, #8
    1564:	af00      	add	r7, sp, #0
    1566:	6078      	str	r0, [r7, #4]
	static int p[4] = {0, 0, 0, 0};
	switch (p[choose]++) {
    1568:	4b34      	ldr	r3, [pc, #208]	; (163c <show0+0xdc>)
    156a:	687a      	ldr	r2, [r7, #4]
    156c:	0092      	lsls	r2, r2, #2
    156e:	58d3      	ldr	r3, [r2, r3]
    1570:	1c58      	adds	r0, r3, #1
    1572:	4a32      	ldr	r2, [pc, #200]	; (163c <show0+0xdc>)
    1574:	6879      	ldr	r1, [r7, #4]
    1576:	0089      	lsls	r1, r1, #2
    1578:	5088      	str	r0, [r1, r2]
    157a:	2b05      	cmp	r3, #5
    157c:	d854      	bhi.n	1628 <show0+0xc8>
    157e:	009a      	lsls	r2, r3, #2
    1580:	4b2f      	ldr	r3, [pc, #188]	; (1640 <show0+0xe0>)
    1582:	18d3      	adds	r3, r2, r3
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	469f      	mov	pc, r3
	case 0:
		A_SEG_ON;
    1588:	23a0      	movs	r3, #160	; 0xa0
    158a:	05da      	lsls	r2, r3, #23
    158c:	23a0      	movs	r3, #160	; 0xa0
    158e:	05d9      	lsls	r1, r3, #23
    1590:	2388      	movs	r3, #136	; 0x88
    1592:	019b      	lsls	r3, r3, #6
    1594:	58cb      	ldr	r3, [r1, r3]
    1596:	2180      	movs	r1, #128	; 0x80
    1598:	0409      	lsls	r1, r1, #16
    159a:	4319      	orrs	r1, r3
    159c:	2388      	movs	r3, #136	; 0x88
    159e:	019b      	lsls	r3, r3, #6
    15a0:	50d1      	str	r1, [r2, r3]
		break;
    15a2:	e047      	b.n	1634 <show0+0xd4>
	case 1:
		B_SEG_ON;
    15a4:	23a0      	movs	r3, #160	; 0xa0
    15a6:	05db      	lsls	r3, r3, #23
    15a8:	22a0      	movs	r2, #160	; 0xa0
    15aa:	05d2      	lsls	r2, r2, #23
    15ac:	4925      	ldr	r1, [pc, #148]	; (1644 <show0+0xe4>)
    15ae:	5852      	ldr	r2, [r2, r1]
    15b0:	2180      	movs	r1, #128	; 0x80
    15b2:	03c9      	lsls	r1, r1, #15
    15b4:	430a      	orrs	r2, r1
    15b6:	4923      	ldr	r1, [pc, #140]	; (1644 <show0+0xe4>)
    15b8:	505a      	str	r2, [r3, r1]
		break;
    15ba:	e03b      	b.n	1634 <show0+0xd4>
	case 2:
		C_SEG_ON;
    15bc:	23a0      	movs	r3, #160	; 0xa0
    15be:	05db      	lsls	r3, r3, #23
    15c0:	22a0      	movs	r2, #160	; 0xa0
    15c2:	05d2      	lsls	r2, r2, #23
    15c4:	491f      	ldr	r1, [pc, #124]	; (1644 <show0+0xe4>)
    15c6:	5852      	ldr	r2, [r2, r1]
    15c8:	2180      	movs	r1, #128	; 0x80
    15ca:	0189      	lsls	r1, r1, #6
    15cc:	430a      	orrs	r2, r1
    15ce:	491d      	ldr	r1, [pc, #116]	; (1644 <show0+0xe4>)
    15d0:	505a      	str	r2, [r3, r1]
		break;
    15d2:	e02f      	b.n	1634 <show0+0xd4>
	case 3:
		D_SEG_ON;
    15d4:	23a0      	movs	r3, #160	; 0xa0
    15d6:	05da      	lsls	r2, r3, #23
    15d8:	23a0      	movs	r3, #160	; 0xa0
    15da:	05d9      	lsls	r1, r3, #23
    15dc:	2388      	movs	r3, #136	; 0x88
    15de:	019b      	lsls	r3, r3, #6
    15e0:	58cb      	ldr	r3, [r1, r3]
    15e2:	2180      	movs	r1, #128	; 0x80
    15e4:	0189      	lsls	r1, r1, #6
    15e6:	4319      	orrs	r1, r3
    15e8:	2388      	movs	r3, #136	; 0x88
    15ea:	019b      	lsls	r3, r3, #6
    15ec:	50d1      	str	r1, [r2, r3]
		break;
    15ee:	e021      	b.n	1634 <show0+0xd4>
	case 4:
		E_SEG_ON;
    15f0:	23a0      	movs	r3, #160	; 0xa0
    15f2:	05da      	lsls	r2, r3, #23
    15f4:	23a0      	movs	r3, #160	; 0xa0
    15f6:	05d9      	lsls	r1, r3, #23
    15f8:	2388      	movs	r3, #136	; 0x88
    15fa:	019b      	lsls	r3, r3, #6
    15fc:	58cb      	ldr	r3, [r1, r3]
    15fe:	2180      	movs	r1, #128	; 0x80
    1600:	0249      	lsls	r1, r1, #9
    1602:	4319      	orrs	r1, r3
    1604:	2388      	movs	r3, #136	; 0x88
    1606:	019b      	lsls	r3, r3, #6
    1608:	50d1      	str	r1, [r2, r3]
		break;
    160a:	e013      	b.n	1634 <show0+0xd4>
	case 5:
		F_SEG_ON;
    160c:	23a0      	movs	r3, #160	; 0xa0
    160e:	05da      	lsls	r2, r3, #23
    1610:	23a0      	movs	r3, #160	; 0xa0
    1612:	05d9      	lsls	r1, r3, #23
    1614:	2388      	movs	r3, #136	; 0x88
    1616:	019b      	lsls	r3, r3, #6
    1618:	58cb      	ldr	r3, [r1, r3]
    161a:	2180      	movs	r1, #128	; 0x80
    161c:	0149      	lsls	r1, r1, #5
    161e:	4319      	orrs	r1, r3
    1620:	2388      	movs	r3, #136	; 0x88
    1622:	019b      	lsls	r3, r3, #6
    1624:	50d1      	str	r1, [r2, r3]
		break;
    1626:	e005      	b.n	1634 <show0+0xd4>
	default:
		p[choose] = 0;
    1628:	4b04      	ldr	r3, [pc, #16]	; (163c <show0+0xdc>)
    162a:	687a      	ldr	r2, [r7, #4]
    162c:	0092      	lsls	r2, r2, #2
    162e:	2100      	movs	r1, #0
    1630:	50d1      	str	r1, [r2, r3]
		break;
    1632:	46c0      	nop			; (mov r8, r8)
	}
}
    1634:	46bd      	mov	sp, r7
    1636:	b002      	add	sp, #8
    1638:	bd80      	pop	{r7, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	100000c8 	.word	0x100000c8
    1640:	0000265c 	.word	0x0000265c
    1644:	00002204 	.word	0x00002204

00001648 <showScreen>:

void showScreen(uint8_t screen){
    1648:	b580      	push	{r7, lr}
    164a:	b082      	sub	sp, #8
    164c:	af00      	add	r7, sp, #0
    164e:	1c02      	adds	r2, r0, #0
    1650:	1dfb      	adds	r3, r7, #7
    1652:	701a      	strb	r2, [r3, #0]
	switch(screen) {
    1654:	1dfb      	adds	r3, r7, #7
    1656:	781b      	ldrb	r3, [r3, #0]
    1658:	2b02      	cmp	r3, #2
    165a:	d038      	beq.n	16ce <showScreen+0x86>
    165c:	dc02      	bgt.n	1664 <showScreen+0x1c>
    165e:	2b01      	cmp	r3, #1
    1660:	d006      	beq.n	1670 <showScreen+0x28>
    1662:	e0c1      	b.n	17e8 <showScreen+0x1a0>
    1664:	2b03      	cmp	r3, #3
    1666:	d061      	beq.n	172c <showScreen+0xe4>
    1668:	2b04      	cmp	r3, #4
    166a:	d100      	bne.n	166e <showScreen+0x26>
    166c:	e08d      	b.n	178a <showScreen+0x142>
    166e:	e0bb      	b.n	17e8 <showScreen+0x1a0>
	case 1:
		SEG_CTRL_1_ON;
    1670:	23a0      	movs	r3, #160	; 0xa0
    1672:	05db      	lsls	r3, r3, #23
    1674:	22a0      	movs	r2, #160	; 0xa0
    1676:	05d2      	lsls	r2, r2, #23
    1678:	4974      	ldr	r1, [pc, #464]	; (184c <showScreen+0x204>)
    167a:	5852      	ldr	r2, [r2, r1]
    167c:	2180      	movs	r1, #128	; 0x80
    167e:	0309      	lsls	r1, r1, #12
    1680:	430a      	orrs	r2, r1
    1682:	4972      	ldr	r1, [pc, #456]	; (184c <showScreen+0x204>)
    1684:	505a      	str	r2, [r3, r1]
		SEG_CTRL_2_OFF;
    1686:	23a0      	movs	r3, #160	; 0xa0
    1688:	05db      	lsls	r3, r3, #23
    168a:	22a0      	movs	r2, #160	; 0xa0
    168c:	05d2      	lsls	r2, r2, #23
    168e:	4970      	ldr	r1, [pc, #448]	; (1850 <showScreen+0x208>)
    1690:	5852      	ldr	r2, [r2, r1]
    1692:	2180      	movs	r1, #128	; 0x80
    1694:	0489      	lsls	r1, r1, #18
    1696:	430a      	orrs	r2, r1
    1698:	496d      	ldr	r1, [pc, #436]	; (1850 <showScreen+0x208>)
    169a:	505a      	str	r2, [r3, r1]
		SEG_CTRL_3_OFF;
    169c:	23a0      	movs	r3, #160	; 0xa0
    169e:	05db      	lsls	r3, r3, #23
    16a0:	22a0      	movs	r2, #160	; 0xa0
    16a2:	05d2      	lsls	r2, r2, #23
    16a4:	496a      	ldr	r1, [pc, #424]	; (1850 <showScreen+0x208>)
    16a6:	5852      	ldr	r2, [r2, r1]
    16a8:	2180      	movs	r1, #128	; 0x80
    16aa:	0249      	lsls	r1, r1, #9
    16ac:	430a      	orrs	r2, r1
    16ae:	4968      	ldr	r1, [pc, #416]	; (1850 <showScreen+0x208>)
    16b0:	505a      	str	r2, [r3, r1]
		SEG_CTRL_4_OFF;
    16b2:	23a0      	movs	r3, #160	; 0xa0
    16b4:	05da      	lsls	r2, r3, #23
    16b6:	23a0      	movs	r3, #160	; 0xa0
    16b8:	05d9      	lsls	r1, r3, #23
    16ba:	2388      	movs	r3, #136	; 0x88
    16bc:	019b      	lsls	r3, r3, #6
    16be:	58cb      	ldr	r3, [r1, r3]
    16c0:	2180      	movs	r1, #128	; 0x80
    16c2:	01c9      	lsls	r1, r1, #7
    16c4:	4319      	orrs	r1, r3
    16c6:	2388      	movs	r3, #136	; 0x88
    16c8:	019b      	lsls	r3, r3, #6
    16ca:	50d1      	str	r1, [r2, r3]
		break;
    16cc:	e0bb      	b.n	1846 <showScreen+0x1fe>
	case 2:
		SEG_CTRL_1_OFF;
    16ce:	23a0      	movs	r3, #160	; 0xa0
    16d0:	05db      	lsls	r3, r3, #23
    16d2:	22a0      	movs	r2, #160	; 0xa0
    16d4:	05d2      	lsls	r2, r2, #23
    16d6:	495e      	ldr	r1, [pc, #376]	; (1850 <showScreen+0x208>)
    16d8:	5852      	ldr	r2, [r2, r1]
    16da:	2180      	movs	r1, #128	; 0x80
    16dc:	0309      	lsls	r1, r1, #12
    16de:	430a      	orrs	r2, r1
    16e0:	495b      	ldr	r1, [pc, #364]	; (1850 <showScreen+0x208>)
    16e2:	505a      	str	r2, [r3, r1]
		SEG_CTRL_2_ON;
    16e4:	23a0      	movs	r3, #160	; 0xa0
    16e6:	05db      	lsls	r3, r3, #23
    16e8:	22a0      	movs	r2, #160	; 0xa0
    16ea:	05d2      	lsls	r2, r2, #23
    16ec:	4957      	ldr	r1, [pc, #348]	; (184c <showScreen+0x204>)
    16ee:	5852      	ldr	r2, [r2, r1]
    16f0:	2180      	movs	r1, #128	; 0x80
    16f2:	0489      	lsls	r1, r1, #18
    16f4:	430a      	orrs	r2, r1
    16f6:	4955      	ldr	r1, [pc, #340]	; (184c <showScreen+0x204>)
    16f8:	505a      	str	r2, [r3, r1]
		SEG_CTRL_3_OFF;
    16fa:	23a0      	movs	r3, #160	; 0xa0
    16fc:	05db      	lsls	r3, r3, #23
    16fe:	22a0      	movs	r2, #160	; 0xa0
    1700:	05d2      	lsls	r2, r2, #23
    1702:	4953      	ldr	r1, [pc, #332]	; (1850 <showScreen+0x208>)
    1704:	5852      	ldr	r2, [r2, r1]
    1706:	2180      	movs	r1, #128	; 0x80
    1708:	0249      	lsls	r1, r1, #9
    170a:	430a      	orrs	r2, r1
    170c:	4950      	ldr	r1, [pc, #320]	; (1850 <showScreen+0x208>)
    170e:	505a      	str	r2, [r3, r1]
		SEG_CTRL_4_OFF;
    1710:	23a0      	movs	r3, #160	; 0xa0
    1712:	05da      	lsls	r2, r3, #23
    1714:	23a0      	movs	r3, #160	; 0xa0
    1716:	05d9      	lsls	r1, r3, #23
    1718:	2388      	movs	r3, #136	; 0x88
    171a:	019b      	lsls	r3, r3, #6
    171c:	58cb      	ldr	r3, [r1, r3]
    171e:	2180      	movs	r1, #128	; 0x80
    1720:	01c9      	lsls	r1, r1, #7
    1722:	4319      	orrs	r1, r3
    1724:	2388      	movs	r3, #136	; 0x88
    1726:	019b      	lsls	r3, r3, #6
    1728:	50d1      	str	r1, [r2, r3]
		break;
    172a:	e08c      	b.n	1846 <showScreen+0x1fe>
	case 3:
		SEG_CTRL_1_OFF;
    172c:	23a0      	movs	r3, #160	; 0xa0
    172e:	05db      	lsls	r3, r3, #23
    1730:	22a0      	movs	r2, #160	; 0xa0
    1732:	05d2      	lsls	r2, r2, #23
    1734:	4946      	ldr	r1, [pc, #280]	; (1850 <showScreen+0x208>)
    1736:	5852      	ldr	r2, [r2, r1]
    1738:	2180      	movs	r1, #128	; 0x80
    173a:	0309      	lsls	r1, r1, #12
    173c:	430a      	orrs	r2, r1
    173e:	4944      	ldr	r1, [pc, #272]	; (1850 <showScreen+0x208>)
    1740:	505a      	str	r2, [r3, r1]
		SEG_CTRL_2_OFF;
    1742:	23a0      	movs	r3, #160	; 0xa0
    1744:	05db      	lsls	r3, r3, #23
    1746:	22a0      	movs	r2, #160	; 0xa0
    1748:	05d2      	lsls	r2, r2, #23
    174a:	4941      	ldr	r1, [pc, #260]	; (1850 <showScreen+0x208>)
    174c:	5852      	ldr	r2, [r2, r1]
    174e:	2180      	movs	r1, #128	; 0x80
    1750:	0489      	lsls	r1, r1, #18
    1752:	430a      	orrs	r2, r1
    1754:	493e      	ldr	r1, [pc, #248]	; (1850 <showScreen+0x208>)
    1756:	505a      	str	r2, [r3, r1]
		SEG_CTRL_3_ON;
    1758:	23a0      	movs	r3, #160	; 0xa0
    175a:	05db      	lsls	r3, r3, #23
    175c:	22a0      	movs	r2, #160	; 0xa0
    175e:	05d2      	lsls	r2, r2, #23
    1760:	493a      	ldr	r1, [pc, #232]	; (184c <showScreen+0x204>)
    1762:	5852      	ldr	r2, [r2, r1]
    1764:	2180      	movs	r1, #128	; 0x80
    1766:	0249      	lsls	r1, r1, #9
    1768:	430a      	orrs	r2, r1
    176a:	4938      	ldr	r1, [pc, #224]	; (184c <showScreen+0x204>)
    176c:	505a      	str	r2, [r3, r1]
		SEG_CTRL_4_OFF;
    176e:	23a0      	movs	r3, #160	; 0xa0
    1770:	05da      	lsls	r2, r3, #23
    1772:	23a0      	movs	r3, #160	; 0xa0
    1774:	05d9      	lsls	r1, r3, #23
    1776:	2388      	movs	r3, #136	; 0x88
    1778:	019b      	lsls	r3, r3, #6
    177a:	58cb      	ldr	r3, [r1, r3]
    177c:	2180      	movs	r1, #128	; 0x80
    177e:	01c9      	lsls	r1, r1, #7
    1780:	4319      	orrs	r1, r3
    1782:	2388      	movs	r3, #136	; 0x88
    1784:	019b      	lsls	r3, r3, #6
    1786:	50d1      	str	r1, [r2, r3]
		break;
    1788:	e05d      	b.n	1846 <showScreen+0x1fe>
	case 4:
		SEG_CTRL_1_OFF;
    178a:	23a0      	movs	r3, #160	; 0xa0
    178c:	05db      	lsls	r3, r3, #23
    178e:	22a0      	movs	r2, #160	; 0xa0
    1790:	05d2      	lsls	r2, r2, #23
    1792:	492f      	ldr	r1, [pc, #188]	; (1850 <showScreen+0x208>)
    1794:	5852      	ldr	r2, [r2, r1]
    1796:	2180      	movs	r1, #128	; 0x80
    1798:	0309      	lsls	r1, r1, #12
    179a:	430a      	orrs	r2, r1
    179c:	492c      	ldr	r1, [pc, #176]	; (1850 <showScreen+0x208>)
    179e:	505a      	str	r2, [r3, r1]
		SEG_CTRL_2_OFF;
    17a0:	23a0      	movs	r3, #160	; 0xa0
    17a2:	05db      	lsls	r3, r3, #23
    17a4:	22a0      	movs	r2, #160	; 0xa0
    17a6:	05d2      	lsls	r2, r2, #23
    17a8:	4929      	ldr	r1, [pc, #164]	; (1850 <showScreen+0x208>)
    17aa:	5852      	ldr	r2, [r2, r1]
    17ac:	2180      	movs	r1, #128	; 0x80
    17ae:	0489      	lsls	r1, r1, #18
    17b0:	430a      	orrs	r2, r1
    17b2:	4927      	ldr	r1, [pc, #156]	; (1850 <showScreen+0x208>)
    17b4:	505a      	str	r2, [r3, r1]
		SEG_CTRL_3_OFF;
    17b6:	23a0      	movs	r3, #160	; 0xa0
    17b8:	05db      	lsls	r3, r3, #23
    17ba:	22a0      	movs	r2, #160	; 0xa0
    17bc:	05d2      	lsls	r2, r2, #23
    17be:	4924      	ldr	r1, [pc, #144]	; (1850 <showScreen+0x208>)
    17c0:	5852      	ldr	r2, [r2, r1]
    17c2:	2180      	movs	r1, #128	; 0x80
    17c4:	0249      	lsls	r1, r1, #9
    17c6:	430a      	orrs	r2, r1
    17c8:	4921      	ldr	r1, [pc, #132]	; (1850 <showScreen+0x208>)
    17ca:	505a      	str	r2, [r3, r1]
		SEG_CTRL_4_ON;
    17cc:	23a0      	movs	r3, #160	; 0xa0
    17ce:	05da      	lsls	r2, r3, #23
    17d0:	23a0      	movs	r3, #160	; 0xa0
    17d2:	05d9      	lsls	r1, r3, #23
    17d4:	238a      	movs	r3, #138	; 0x8a
    17d6:	019b      	lsls	r3, r3, #6
    17d8:	58cb      	ldr	r3, [r1, r3]
    17da:	2180      	movs	r1, #128	; 0x80
    17dc:	01c9      	lsls	r1, r1, #7
    17de:	4319      	orrs	r1, r3
    17e0:	238a      	movs	r3, #138	; 0x8a
    17e2:	019b      	lsls	r3, r3, #6
    17e4:	50d1      	str	r1, [r2, r3]
		break;
    17e6:	e02e      	b.n	1846 <showScreen+0x1fe>
	default:
		SEG_CTRL_1_OFF;
    17e8:	23a0      	movs	r3, #160	; 0xa0
    17ea:	05db      	lsls	r3, r3, #23
    17ec:	22a0      	movs	r2, #160	; 0xa0
    17ee:	05d2      	lsls	r2, r2, #23
    17f0:	4917      	ldr	r1, [pc, #92]	; (1850 <showScreen+0x208>)
    17f2:	5852      	ldr	r2, [r2, r1]
    17f4:	2180      	movs	r1, #128	; 0x80
    17f6:	0309      	lsls	r1, r1, #12
    17f8:	430a      	orrs	r2, r1
    17fa:	4915      	ldr	r1, [pc, #84]	; (1850 <showScreen+0x208>)
    17fc:	505a      	str	r2, [r3, r1]
		SEG_CTRL_2_OFF;
    17fe:	23a0      	movs	r3, #160	; 0xa0
    1800:	05db      	lsls	r3, r3, #23
    1802:	22a0      	movs	r2, #160	; 0xa0
    1804:	05d2      	lsls	r2, r2, #23
    1806:	4912      	ldr	r1, [pc, #72]	; (1850 <showScreen+0x208>)
    1808:	5852      	ldr	r2, [r2, r1]
    180a:	2180      	movs	r1, #128	; 0x80
    180c:	0489      	lsls	r1, r1, #18
    180e:	430a      	orrs	r2, r1
    1810:	490f      	ldr	r1, [pc, #60]	; (1850 <showScreen+0x208>)
    1812:	505a      	str	r2, [r3, r1]
		SEG_CTRL_3_OFF;
    1814:	23a0      	movs	r3, #160	; 0xa0
    1816:	05db      	lsls	r3, r3, #23
    1818:	22a0      	movs	r2, #160	; 0xa0
    181a:	05d2      	lsls	r2, r2, #23
    181c:	490c      	ldr	r1, [pc, #48]	; (1850 <showScreen+0x208>)
    181e:	5852      	ldr	r2, [r2, r1]
    1820:	2180      	movs	r1, #128	; 0x80
    1822:	0249      	lsls	r1, r1, #9
    1824:	430a      	orrs	r2, r1
    1826:	490a      	ldr	r1, [pc, #40]	; (1850 <showScreen+0x208>)
    1828:	505a      	str	r2, [r3, r1]
		SEG_CTRL_4_OFF;
    182a:	23a0      	movs	r3, #160	; 0xa0
    182c:	05da      	lsls	r2, r3, #23
    182e:	23a0      	movs	r3, #160	; 0xa0
    1830:	05d9      	lsls	r1, r3, #23
    1832:	2388      	movs	r3, #136	; 0x88
    1834:	019b      	lsls	r3, r3, #6
    1836:	58cb      	ldr	r3, [r1, r3]
    1838:	2180      	movs	r1, #128	; 0x80
    183a:	01c9      	lsls	r1, r1, #7
    183c:	4319      	orrs	r1, r3
    183e:	2388      	movs	r3, #136	; 0x88
    1840:	019b      	lsls	r3, r3, #6
    1842:	50d1      	str	r1, [r2, r3]
		break;
    1844:	46c0      	nop			; (mov r8, r8)
	}
}
    1846:	46bd      	mov	sp, r7
    1848:	b002      	add	sp, #8
    184a:	bd80      	pop	{r7, pc}
    184c:	00002284 	.word	0x00002284
    1850:	00002204 	.word	0x00002204

00001854 <showMinute2>:

void showMinute2(uint8_t minute) {
    1854:	b580      	push	{r7, lr}
    1856:	b082      	sub	sp, #8
    1858:	af00      	add	r7, sp, #0
    185a:	1c02      	adds	r2, r0, #0
    185c:	1dfb      	adds	r3, r7, #7
    185e:	701a      	strb	r2, [r3, #0]
	A_SEG_OFF;
    1860:	23a0      	movs	r3, #160	; 0xa0
    1862:	05da      	lsls	r2, r3, #23
    1864:	23a0      	movs	r3, #160	; 0xa0
    1866:	05d9      	lsls	r1, r3, #23
    1868:	238a      	movs	r3, #138	; 0x8a
    186a:	019b      	lsls	r3, r3, #6
    186c:	58cb      	ldr	r3, [r1, r3]
    186e:	2180      	movs	r1, #128	; 0x80
    1870:	0409      	lsls	r1, r1, #16
    1872:	4319      	orrs	r1, r3
    1874:	238a      	movs	r3, #138	; 0x8a
    1876:	019b      	lsls	r3, r3, #6
    1878:	50d1      	str	r1, [r2, r3]
	B_SEG_OFF;
    187a:	23a0      	movs	r3, #160	; 0xa0
    187c:	05db      	lsls	r3, r3, #23
    187e:	22a0      	movs	r2, #160	; 0xa0
    1880:	05d2      	lsls	r2, r2, #23
    1882:	4943      	ldr	r1, [pc, #268]	; (1990 <showMinute2+0x13c>)
    1884:	5852      	ldr	r2, [r2, r1]
    1886:	2180      	movs	r1, #128	; 0x80
    1888:	03c9      	lsls	r1, r1, #15
    188a:	430a      	orrs	r2, r1
    188c:	4940      	ldr	r1, [pc, #256]	; (1990 <showMinute2+0x13c>)
    188e:	505a      	str	r2, [r3, r1]
	C_SEG_OFF;
    1890:	23a0      	movs	r3, #160	; 0xa0
    1892:	05db      	lsls	r3, r3, #23
    1894:	22a0      	movs	r2, #160	; 0xa0
    1896:	05d2      	lsls	r2, r2, #23
    1898:	493d      	ldr	r1, [pc, #244]	; (1990 <showMinute2+0x13c>)
    189a:	5852      	ldr	r2, [r2, r1]
    189c:	2180      	movs	r1, #128	; 0x80
    189e:	0189      	lsls	r1, r1, #6
    18a0:	430a      	orrs	r2, r1
    18a2:	493b      	ldr	r1, [pc, #236]	; (1990 <showMinute2+0x13c>)
    18a4:	505a      	str	r2, [r3, r1]
	D_SEG_OFF;
    18a6:	23a0      	movs	r3, #160	; 0xa0
    18a8:	05da      	lsls	r2, r3, #23
    18aa:	23a0      	movs	r3, #160	; 0xa0
    18ac:	05d9      	lsls	r1, r3, #23
    18ae:	238a      	movs	r3, #138	; 0x8a
    18b0:	019b      	lsls	r3, r3, #6
    18b2:	58cb      	ldr	r3, [r1, r3]
    18b4:	2180      	movs	r1, #128	; 0x80
    18b6:	0189      	lsls	r1, r1, #6
    18b8:	4319      	orrs	r1, r3
    18ba:	238a      	movs	r3, #138	; 0x8a
    18bc:	019b      	lsls	r3, r3, #6
    18be:	50d1      	str	r1, [r2, r3]
	E_SEG_OFF;
    18c0:	23a0      	movs	r3, #160	; 0xa0
    18c2:	05da      	lsls	r2, r3, #23
    18c4:	23a0      	movs	r3, #160	; 0xa0
    18c6:	05d9      	lsls	r1, r3, #23
    18c8:	238a      	movs	r3, #138	; 0x8a
    18ca:	019b      	lsls	r3, r3, #6
    18cc:	58cb      	ldr	r3, [r1, r3]
    18ce:	2180      	movs	r1, #128	; 0x80
    18d0:	0249      	lsls	r1, r1, #9
    18d2:	4319      	orrs	r1, r3
    18d4:	238a      	movs	r3, #138	; 0x8a
    18d6:	019b      	lsls	r3, r3, #6
    18d8:	50d1      	str	r1, [r2, r3]
	F_SEG_OFF;
    18da:	23a0      	movs	r3, #160	; 0xa0
    18dc:	05da      	lsls	r2, r3, #23
    18de:	23a0      	movs	r3, #160	; 0xa0
    18e0:	05d9      	lsls	r1, r3, #23
    18e2:	238a      	movs	r3, #138	; 0x8a
    18e4:	019b      	lsls	r3, r3, #6
    18e6:	58cb      	ldr	r3, [r1, r3]
    18e8:	2180      	movs	r1, #128	; 0x80
    18ea:	0149      	lsls	r1, r1, #5
    18ec:	4319      	orrs	r1, r3
    18ee:	238a      	movs	r3, #138	; 0x8a
    18f0:	019b      	lsls	r3, r3, #6
    18f2:	50d1      	str	r1, [r2, r3]
	G_SEG_OFF;
    18f4:	23a0      	movs	r3, #160	; 0xa0
    18f6:	05db      	lsls	r3, r3, #23
    18f8:	22a0      	movs	r2, #160	; 0xa0
    18fa:	05d2      	lsls	r2, r2, #23
    18fc:	4924      	ldr	r1, [pc, #144]	; (1990 <showMinute2+0x13c>)
    18fe:	5852      	ldr	r2, [r2, r1]
    1900:	2180      	movs	r1, #128	; 0x80
    1902:	01c9      	lsls	r1, r1, #7
    1904:	430a      	orrs	r2, r1
    1906:	4922      	ldr	r1, [pc, #136]	; (1990 <showMinute2+0x13c>)
    1908:	505a      	str	r2, [r3, r1]
	DP_SEG_OFF;
    190a:	23a0      	movs	r3, #160	; 0xa0
    190c:	05db      	lsls	r3, r3, #23
    190e:	22a0      	movs	r2, #160	; 0xa0
    1910:	05d2      	lsls	r2, r2, #23
    1912:	491f      	ldr	r1, [pc, #124]	; (1990 <showMinute2+0x13c>)
    1914:	5852      	ldr	r2, [r2, r1]
    1916:	2180      	movs	r1, #128	; 0x80
    1918:	0209      	lsls	r1, r1, #8
    191a:	430a      	orrs	r2, r1
    191c:	491c      	ldr	r1, [pc, #112]	; (1990 <showMinute2+0x13c>)
    191e:	505a      	str	r2, [r3, r1]
	showScreen(1);
    1920:	2001      	movs	r0, #1
    1922:	f7ff fe91 	bl	1648 <showScreen>
	switch (minute) {
    1926:	1dfb      	adds	r3, r7, #7
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	2b09      	cmp	r3, #9
    192c:	d82c      	bhi.n	1988 <showMinute2+0x134>
    192e:	009a      	lsls	r2, r3, #2
    1930:	4b18      	ldr	r3, [pc, #96]	; (1994 <showMinute2+0x140>)
    1932:	18d3      	adds	r3, r2, r3
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	469f      	mov	pc, r3
	case 0:
		show0(0);
    1938:	2000      	movs	r0, #0
    193a:	f7ff fe11 	bl	1560 <show0>
		break;
    193e:	e024      	b.n	198a <showMinute2+0x136>
	case 1:
		show1(0);
    1940:	2000      	movs	r0, #0
    1942:	f7ff faa1 	bl	e88 <show1>
		break;
    1946:	e020      	b.n	198a <showMinute2+0x136>
	case 2:
		show2(0);
    1948:	2000      	movs	r0, #0
    194a:	f7ff fad5 	bl	ef8 <show2>
		break;
    194e:	e01c      	b.n	198a <showMinute2+0x136>
	case 3:
		show3(0);
    1950:	2000      	movs	r0, #0
    1952:	f7ff fb37 	bl	fc4 <show3>
		break;
    1956:	e018      	b.n	198a <showMinute2+0x136>
	case 4:
		show4(0);
    1958:	2000      	movs	r0, #0
    195a:	f7ff fb97 	bl	108c <show4>
		break;
    195e:	e014      	b.n	198a <showMinute2+0x136>
	case 5:
		show5(0);
    1960:	2000      	movs	r0, #0
    1962:	f7ff fbeb 	bl	113c <show5>
		break;
    1966:	e010      	b.n	198a <showMinute2+0x136>
	case 6:
		show6(0);
    1968:	2000      	movs	r0, #0
    196a:	f7ff fc4d 	bl	1208 <show6>
		break;
    196e:	e00c      	b.n	198a <showMinute2+0x136>
	case 7:
		show7(0);
    1970:	2000      	movs	r0, #0
    1972:	f7ff fcbd 	bl	12f0 <show7>
		break;
    1976:	e008      	b.n	198a <showMinute2+0x136>
	case 8:
		show8(0);
    1978:	2000      	movs	r0, #0
    197a:	f7ff fcff 	bl	137c <show8>
		break;
    197e:	e004      	b.n	198a <showMinute2+0x136>
	case 9:
		show9(0);
    1980:	2000      	movs	r0, #0
    1982:	f7ff fd7b 	bl	147c <show9>
		break;
    1986:	e000      	b.n	198a <showMinute2+0x136>
	default:
		break;
    1988:	46c0      	nop			; (mov r8, r8)
	}
}
    198a:	46bd      	mov	sp, r7
    198c:	b002      	add	sp, #8
    198e:	bd80      	pop	{r7, pc}
    1990:	00002284 	.word	0x00002284
    1994:	00002674 	.word	0x00002674

00001998 <showMinute1>:

void showMinute1(uint8_t minute){
    1998:	b580      	push	{r7, lr}
    199a:	b082      	sub	sp, #8
    199c:	af00      	add	r7, sp, #0
    199e:	1c02      	adds	r2, r0, #0
    19a0:	1dfb      	adds	r3, r7, #7
    19a2:	701a      	strb	r2, [r3, #0]
	A_SEG_OFF;
    19a4:	23a0      	movs	r3, #160	; 0xa0
    19a6:	05da      	lsls	r2, r3, #23
    19a8:	23a0      	movs	r3, #160	; 0xa0
    19aa:	05d9      	lsls	r1, r3, #23
    19ac:	238a      	movs	r3, #138	; 0x8a
    19ae:	019b      	lsls	r3, r3, #6
    19b0:	58cb      	ldr	r3, [r1, r3]
    19b2:	2180      	movs	r1, #128	; 0x80
    19b4:	0409      	lsls	r1, r1, #16
    19b6:	4319      	orrs	r1, r3
    19b8:	238a      	movs	r3, #138	; 0x8a
    19ba:	019b      	lsls	r3, r3, #6
    19bc:	50d1      	str	r1, [r2, r3]
	B_SEG_OFF;
    19be:	23a0      	movs	r3, #160	; 0xa0
    19c0:	05db      	lsls	r3, r3, #23
    19c2:	22a0      	movs	r2, #160	; 0xa0
    19c4:	05d2      	lsls	r2, r2, #23
    19c6:	4943      	ldr	r1, [pc, #268]	; (1ad4 <showMinute1+0x13c>)
    19c8:	5852      	ldr	r2, [r2, r1]
    19ca:	2180      	movs	r1, #128	; 0x80
    19cc:	03c9      	lsls	r1, r1, #15
    19ce:	430a      	orrs	r2, r1
    19d0:	4940      	ldr	r1, [pc, #256]	; (1ad4 <showMinute1+0x13c>)
    19d2:	505a      	str	r2, [r3, r1]
	C_SEG_OFF;
    19d4:	23a0      	movs	r3, #160	; 0xa0
    19d6:	05db      	lsls	r3, r3, #23
    19d8:	22a0      	movs	r2, #160	; 0xa0
    19da:	05d2      	lsls	r2, r2, #23
    19dc:	493d      	ldr	r1, [pc, #244]	; (1ad4 <showMinute1+0x13c>)
    19de:	5852      	ldr	r2, [r2, r1]
    19e0:	2180      	movs	r1, #128	; 0x80
    19e2:	0189      	lsls	r1, r1, #6
    19e4:	430a      	orrs	r2, r1
    19e6:	493b      	ldr	r1, [pc, #236]	; (1ad4 <showMinute1+0x13c>)
    19e8:	505a      	str	r2, [r3, r1]
	D_SEG_OFF;
    19ea:	23a0      	movs	r3, #160	; 0xa0
    19ec:	05da      	lsls	r2, r3, #23
    19ee:	23a0      	movs	r3, #160	; 0xa0
    19f0:	05d9      	lsls	r1, r3, #23
    19f2:	238a      	movs	r3, #138	; 0x8a
    19f4:	019b      	lsls	r3, r3, #6
    19f6:	58cb      	ldr	r3, [r1, r3]
    19f8:	2180      	movs	r1, #128	; 0x80
    19fa:	0189      	lsls	r1, r1, #6
    19fc:	4319      	orrs	r1, r3
    19fe:	238a      	movs	r3, #138	; 0x8a
    1a00:	019b      	lsls	r3, r3, #6
    1a02:	50d1      	str	r1, [r2, r3]
	E_SEG_OFF;
    1a04:	23a0      	movs	r3, #160	; 0xa0
    1a06:	05da      	lsls	r2, r3, #23
    1a08:	23a0      	movs	r3, #160	; 0xa0
    1a0a:	05d9      	lsls	r1, r3, #23
    1a0c:	238a      	movs	r3, #138	; 0x8a
    1a0e:	019b      	lsls	r3, r3, #6
    1a10:	58cb      	ldr	r3, [r1, r3]
    1a12:	2180      	movs	r1, #128	; 0x80
    1a14:	0249      	lsls	r1, r1, #9
    1a16:	4319      	orrs	r1, r3
    1a18:	238a      	movs	r3, #138	; 0x8a
    1a1a:	019b      	lsls	r3, r3, #6
    1a1c:	50d1      	str	r1, [r2, r3]
	F_SEG_OFF;
    1a1e:	23a0      	movs	r3, #160	; 0xa0
    1a20:	05da      	lsls	r2, r3, #23
    1a22:	23a0      	movs	r3, #160	; 0xa0
    1a24:	05d9      	lsls	r1, r3, #23
    1a26:	238a      	movs	r3, #138	; 0x8a
    1a28:	019b      	lsls	r3, r3, #6
    1a2a:	58cb      	ldr	r3, [r1, r3]
    1a2c:	2180      	movs	r1, #128	; 0x80
    1a2e:	0149      	lsls	r1, r1, #5
    1a30:	4319      	orrs	r1, r3
    1a32:	238a      	movs	r3, #138	; 0x8a
    1a34:	019b      	lsls	r3, r3, #6
    1a36:	50d1      	str	r1, [r2, r3]
	G_SEG_OFF;
    1a38:	23a0      	movs	r3, #160	; 0xa0
    1a3a:	05db      	lsls	r3, r3, #23
    1a3c:	22a0      	movs	r2, #160	; 0xa0
    1a3e:	05d2      	lsls	r2, r2, #23
    1a40:	4924      	ldr	r1, [pc, #144]	; (1ad4 <showMinute1+0x13c>)
    1a42:	5852      	ldr	r2, [r2, r1]
    1a44:	2180      	movs	r1, #128	; 0x80
    1a46:	01c9      	lsls	r1, r1, #7
    1a48:	430a      	orrs	r2, r1
    1a4a:	4922      	ldr	r1, [pc, #136]	; (1ad4 <showMinute1+0x13c>)
    1a4c:	505a      	str	r2, [r3, r1]
	DP_SEG_OFF;
    1a4e:	23a0      	movs	r3, #160	; 0xa0
    1a50:	05db      	lsls	r3, r3, #23
    1a52:	22a0      	movs	r2, #160	; 0xa0
    1a54:	05d2      	lsls	r2, r2, #23
    1a56:	491f      	ldr	r1, [pc, #124]	; (1ad4 <showMinute1+0x13c>)
    1a58:	5852      	ldr	r2, [r2, r1]
    1a5a:	2180      	movs	r1, #128	; 0x80
    1a5c:	0209      	lsls	r1, r1, #8
    1a5e:	430a      	orrs	r2, r1
    1a60:	491c      	ldr	r1, [pc, #112]	; (1ad4 <showMinute1+0x13c>)
    1a62:	505a      	str	r2, [r3, r1]
	showScreen(2);
    1a64:	2002      	movs	r0, #2
    1a66:	f7ff fdef 	bl	1648 <showScreen>
	switch (minute) {
    1a6a:	1dfb      	adds	r3, r7, #7
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	2b09      	cmp	r3, #9
    1a70:	d82c      	bhi.n	1acc <showMinute1+0x134>
    1a72:	009a      	lsls	r2, r3, #2
    1a74:	4b18      	ldr	r3, [pc, #96]	; (1ad8 <showMinute1+0x140>)
    1a76:	18d3      	adds	r3, r2, r3
    1a78:	681b      	ldr	r3, [r3, #0]
    1a7a:	469f      	mov	pc, r3
	case 0:
		show0(1);
    1a7c:	2001      	movs	r0, #1
    1a7e:	f7ff fd6f 	bl	1560 <show0>
		break;
    1a82:	e024      	b.n	1ace <showMinute1+0x136>
	case 1:
		show1(1);
    1a84:	2001      	movs	r0, #1
    1a86:	f7ff f9ff 	bl	e88 <show1>
		break;
    1a8a:	e020      	b.n	1ace <showMinute1+0x136>
	case 2:
		show2(1);
    1a8c:	2001      	movs	r0, #1
    1a8e:	f7ff fa33 	bl	ef8 <show2>
		break;
    1a92:	e01c      	b.n	1ace <showMinute1+0x136>
	case 3:
		show3(1);
    1a94:	2001      	movs	r0, #1
    1a96:	f7ff fa95 	bl	fc4 <show3>
		break;
    1a9a:	e018      	b.n	1ace <showMinute1+0x136>
	case 4:
		show4(1);
    1a9c:	2001      	movs	r0, #1
    1a9e:	f7ff faf5 	bl	108c <show4>
		break;
    1aa2:	e014      	b.n	1ace <showMinute1+0x136>
	case 5:
		show5(1);
    1aa4:	2001      	movs	r0, #1
    1aa6:	f7ff fb49 	bl	113c <show5>
		break;
    1aaa:	e010      	b.n	1ace <showMinute1+0x136>
	case 6:
		show6(1);
    1aac:	2001      	movs	r0, #1
    1aae:	f7ff fbab 	bl	1208 <show6>
		break;
    1ab2:	e00c      	b.n	1ace <showMinute1+0x136>
	case 7:
		show7(1);
    1ab4:	2001      	movs	r0, #1
    1ab6:	f7ff fc1b 	bl	12f0 <show7>
		break;
    1aba:	e008      	b.n	1ace <showMinute1+0x136>
	case 8:
		show8(1);
    1abc:	2001      	movs	r0, #1
    1abe:	f7ff fc5d 	bl	137c <show8>
		break;
    1ac2:	e004      	b.n	1ace <showMinute1+0x136>
	case 9:
		show9(1);
    1ac4:	2001      	movs	r0, #1
    1ac6:	f7ff fcd9 	bl	147c <show9>
		break;
    1aca:	e000      	b.n	1ace <showMinute1+0x136>
	default:
		break;
    1acc:	46c0      	nop			; (mov r8, r8)
	}
}
    1ace:	46bd      	mov	sp, r7
    1ad0:	b002      	add	sp, #8
    1ad2:	bd80      	pop	{r7, pc}
    1ad4:	00002284 	.word	0x00002284
    1ad8:	0000269c 	.word	0x0000269c

00001adc <showHour1>:

void showHour1(uint8_t hour){
    1adc:	b580      	push	{r7, lr}
    1ade:	b082      	sub	sp, #8
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	1c02      	adds	r2, r0, #0
    1ae4:	1dfb      	adds	r3, r7, #7
    1ae6:	701a      	strb	r2, [r3, #0]
	A_SEG_OFF;
    1ae8:	23a0      	movs	r3, #160	; 0xa0
    1aea:	05da      	lsls	r2, r3, #23
    1aec:	23a0      	movs	r3, #160	; 0xa0
    1aee:	05d9      	lsls	r1, r3, #23
    1af0:	238a      	movs	r3, #138	; 0x8a
    1af2:	019b      	lsls	r3, r3, #6
    1af4:	58cb      	ldr	r3, [r1, r3]
    1af6:	2180      	movs	r1, #128	; 0x80
    1af8:	0409      	lsls	r1, r1, #16
    1afa:	4319      	orrs	r1, r3
    1afc:	238a      	movs	r3, #138	; 0x8a
    1afe:	019b      	lsls	r3, r3, #6
    1b00:	50d1      	str	r1, [r2, r3]
	B_SEG_OFF;
    1b02:	23a0      	movs	r3, #160	; 0xa0
    1b04:	05db      	lsls	r3, r3, #23
    1b06:	22a0      	movs	r2, #160	; 0xa0
    1b08:	05d2      	lsls	r2, r2, #23
    1b0a:	4943      	ldr	r1, [pc, #268]	; (1c18 <showHour1+0x13c>)
    1b0c:	5852      	ldr	r2, [r2, r1]
    1b0e:	2180      	movs	r1, #128	; 0x80
    1b10:	03c9      	lsls	r1, r1, #15
    1b12:	430a      	orrs	r2, r1
    1b14:	4940      	ldr	r1, [pc, #256]	; (1c18 <showHour1+0x13c>)
    1b16:	505a      	str	r2, [r3, r1]
	C_SEG_OFF;
    1b18:	23a0      	movs	r3, #160	; 0xa0
    1b1a:	05db      	lsls	r3, r3, #23
    1b1c:	22a0      	movs	r2, #160	; 0xa0
    1b1e:	05d2      	lsls	r2, r2, #23
    1b20:	493d      	ldr	r1, [pc, #244]	; (1c18 <showHour1+0x13c>)
    1b22:	5852      	ldr	r2, [r2, r1]
    1b24:	2180      	movs	r1, #128	; 0x80
    1b26:	0189      	lsls	r1, r1, #6
    1b28:	430a      	orrs	r2, r1
    1b2a:	493b      	ldr	r1, [pc, #236]	; (1c18 <showHour1+0x13c>)
    1b2c:	505a      	str	r2, [r3, r1]
	D_SEG_OFF;
    1b2e:	23a0      	movs	r3, #160	; 0xa0
    1b30:	05da      	lsls	r2, r3, #23
    1b32:	23a0      	movs	r3, #160	; 0xa0
    1b34:	05d9      	lsls	r1, r3, #23
    1b36:	238a      	movs	r3, #138	; 0x8a
    1b38:	019b      	lsls	r3, r3, #6
    1b3a:	58cb      	ldr	r3, [r1, r3]
    1b3c:	2180      	movs	r1, #128	; 0x80
    1b3e:	0189      	lsls	r1, r1, #6
    1b40:	4319      	orrs	r1, r3
    1b42:	238a      	movs	r3, #138	; 0x8a
    1b44:	019b      	lsls	r3, r3, #6
    1b46:	50d1      	str	r1, [r2, r3]
	E_SEG_OFF;
    1b48:	23a0      	movs	r3, #160	; 0xa0
    1b4a:	05da      	lsls	r2, r3, #23
    1b4c:	23a0      	movs	r3, #160	; 0xa0
    1b4e:	05d9      	lsls	r1, r3, #23
    1b50:	238a      	movs	r3, #138	; 0x8a
    1b52:	019b      	lsls	r3, r3, #6
    1b54:	58cb      	ldr	r3, [r1, r3]
    1b56:	2180      	movs	r1, #128	; 0x80
    1b58:	0249      	lsls	r1, r1, #9
    1b5a:	4319      	orrs	r1, r3
    1b5c:	238a      	movs	r3, #138	; 0x8a
    1b5e:	019b      	lsls	r3, r3, #6
    1b60:	50d1      	str	r1, [r2, r3]
	F_SEG_OFF;
    1b62:	23a0      	movs	r3, #160	; 0xa0
    1b64:	05da      	lsls	r2, r3, #23
    1b66:	23a0      	movs	r3, #160	; 0xa0
    1b68:	05d9      	lsls	r1, r3, #23
    1b6a:	238a      	movs	r3, #138	; 0x8a
    1b6c:	019b      	lsls	r3, r3, #6
    1b6e:	58cb      	ldr	r3, [r1, r3]
    1b70:	2180      	movs	r1, #128	; 0x80
    1b72:	0149      	lsls	r1, r1, #5
    1b74:	4319      	orrs	r1, r3
    1b76:	238a      	movs	r3, #138	; 0x8a
    1b78:	019b      	lsls	r3, r3, #6
    1b7a:	50d1      	str	r1, [r2, r3]
	G_SEG_OFF;
    1b7c:	23a0      	movs	r3, #160	; 0xa0
    1b7e:	05db      	lsls	r3, r3, #23
    1b80:	22a0      	movs	r2, #160	; 0xa0
    1b82:	05d2      	lsls	r2, r2, #23
    1b84:	4924      	ldr	r1, [pc, #144]	; (1c18 <showHour1+0x13c>)
    1b86:	5852      	ldr	r2, [r2, r1]
    1b88:	2180      	movs	r1, #128	; 0x80
    1b8a:	01c9      	lsls	r1, r1, #7
    1b8c:	430a      	orrs	r2, r1
    1b8e:	4922      	ldr	r1, [pc, #136]	; (1c18 <showHour1+0x13c>)
    1b90:	505a      	str	r2, [r3, r1]
	DP_SEG_OFF;
    1b92:	23a0      	movs	r3, #160	; 0xa0
    1b94:	05db      	lsls	r3, r3, #23
    1b96:	22a0      	movs	r2, #160	; 0xa0
    1b98:	05d2      	lsls	r2, r2, #23
    1b9a:	491f      	ldr	r1, [pc, #124]	; (1c18 <showHour1+0x13c>)
    1b9c:	5852      	ldr	r2, [r2, r1]
    1b9e:	2180      	movs	r1, #128	; 0x80
    1ba0:	0209      	lsls	r1, r1, #8
    1ba2:	430a      	orrs	r2, r1
    1ba4:	491c      	ldr	r1, [pc, #112]	; (1c18 <showHour1+0x13c>)
    1ba6:	505a      	str	r2, [r3, r1]
	showScreen(3);
    1ba8:	2003      	movs	r0, #3
    1baa:	f7ff fd4d 	bl	1648 <showScreen>
	switch (hour) {
    1bae:	1dfb      	adds	r3, r7, #7
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	2b09      	cmp	r3, #9
    1bb4:	d82c      	bhi.n	1c10 <showHour1+0x134>
    1bb6:	009a      	lsls	r2, r3, #2
    1bb8:	4b18      	ldr	r3, [pc, #96]	; (1c1c <showHour1+0x140>)
    1bba:	18d3      	adds	r3, r2, r3
    1bbc:	681b      	ldr	r3, [r3, #0]
    1bbe:	469f      	mov	pc, r3
	case 0:
		show0(2);
    1bc0:	2002      	movs	r0, #2
    1bc2:	f7ff fccd 	bl	1560 <show0>
		break;
    1bc6:	e024      	b.n	1c12 <showHour1+0x136>
	case 1:
		show1(2);
    1bc8:	2002      	movs	r0, #2
    1bca:	f7ff f95d 	bl	e88 <show1>
		break;
    1bce:	e020      	b.n	1c12 <showHour1+0x136>
	case 2:
		show2(2);
    1bd0:	2002      	movs	r0, #2
    1bd2:	f7ff f991 	bl	ef8 <show2>
		break;
    1bd6:	e01c      	b.n	1c12 <showHour1+0x136>
	case 3:
		show3(2);
    1bd8:	2002      	movs	r0, #2
    1bda:	f7ff f9f3 	bl	fc4 <show3>
		break;
    1bde:	e018      	b.n	1c12 <showHour1+0x136>
	case 4:
		show4(2);
    1be0:	2002      	movs	r0, #2
    1be2:	f7ff fa53 	bl	108c <show4>
		break;
    1be6:	e014      	b.n	1c12 <showHour1+0x136>
	case 5:
		show5(2);
    1be8:	2002      	movs	r0, #2
    1bea:	f7ff faa7 	bl	113c <show5>
		break;
    1bee:	e010      	b.n	1c12 <showHour1+0x136>
	case 6:
		show6(2);
    1bf0:	2002      	movs	r0, #2
    1bf2:	f7ff fb09 	bl	1208 <show6>
		break;
    1bf6:	e00c      	b.n	1c12 <showHour1+0x136>
	case 7:
		show7(2);
    1bf8:	2002      	movs	r0, #2
    1bfa:	f7ff fb79 	bl	12f0 <show7>
		break;
    1bfe:	e008      	b.n	1c12 <showHour1+0x136>
	case 8:
		show8(2);
    1c00:	2002      	movs	r0, #2
    1c02:	f7ff fbbb 	bl	137c <show8>
		break;
    1c06:	e004      	b.n	1c12 <showHour1+0x136>
	case 9:
		show9(2);
    1c08:	2002      	movs	r0, #2
    1c0a:	f7ff fc37 	bl	147c <show9>
		break;
    1c0e:	e000      	b.n	1c12 <showHour1+0x136>
	default:
		break;
    1c10:	46c0      	nop			; (mov r8, r8)
	}
}
    1c12:	46bd      	mov	sp, r7
    1c14:	b002      	add	sp, #8
    1c16:	bd80      	pop	{r7, pc}
    1c18:	00002284 	.word	0x00002284
    1c1c:	000026c4 	.word	0x000026c4

00001c20 <showHour2>:

void showHour2(uint8_t hour){
    1c20:	b580      	push	{r7, lr}
    1c22:	b082      	sub	sp, #8
    1c24:	af00      	add	r7, sp, #0
    1c26:	1c02      	adds	r2, r0, #0
    1c28:	1dfb      	adds	r3, r7, #7
    1c2a:	701a      	strb	r2, [r3, #0]
	A_SEG_OFF;
    1c2c:	23a0      	movs	r3, #160	; 0xa0
    1c2e:	05da      	lsls	r2, r3, #23
    1c30:	23a0      	movs	r3, #160	; 0xa0
    1c32:	05d9      	lsls	r1, r3, #23
    1c34:	238a      	movs	r3, #138	; 0x8a
    1c36:	019b      	lsls	r3, r3, #6
    1c38:	58cb      	ldr	r3, [r1, r3]
    1c3a:	2180      	movs	r1, #128	; 0x80
    1c3c:	0409      	lsls	r1, r1, #16
    1c3e:	4319      	orrs	r1, r3
    1c40:	238a      	movs	r3, #138	; 0x8a
    1c42:	019b      	lsls	r3, r3, #6
    1c44:	50d1      	str	r1, [r2, r3]
	B_SEG_OFF;
    1c46:	23a0      	movs	r3, #160	; 0xa0
    1c48:	05db      	lsls	r3, r3, #23
    1c4a:	22a0      	movs	r2, #160	; 0xa0
    1c4c:	05d2      	lsls	r2, r2, #23
    1c4e:	4943      	ldr	r1, [pc, #268]	; (1d5c <showHour2+0x13c>)
    1c50:	5852      	ldr	r2, [r2, r1]
    1c52:	2180      	movs	r1, #128	; 0x80
    1c54:	03c9      	lsls	r1, r1, #15
    1c56:	430a      	orrs	r2, r1
    1c58:	4940      	ldr	r1, [pc, #256]	; (1d5c <showHour2+0x13c>)
    1c5a:	505a      	str	r2, [r3, r1]
	C_SEG_OFF;
    1c5c:	23a0      	movs	r3, #160	; 0xa0
    1c5e:	05db      	lsls	r3, r3, #23
    1c60:	22a0      	movs	r2, #160	; 0xa0
    1c62:	05d2      	lsls	r2, r2, #23
    1c64:	493d      	ldr	r1, [pc, #244]	; (1d5c <showHour2+0x13c>)
    1c66:	5852      	ldr	r2, [r2, r1]
    1c68:	2180      	movs	r1, #128	; 0x80
    1c6a:	0189      	lsls	r1, r1, #6
    1c6c:	430a      	orrs	r2, r1
    1c6e:	493b      	ldr	r1, [pc, #236]	; (1d5c <showHour2+0x13c>)
    1c70:	505a      	str	r2, [r3, r1]
	D_SEG_OFF;
    1c72:	23a0      	movs	r3, #160	; 0xa0
    1c74:	05da      	lsls	r2, r3, #23
    1c76:	23a0      	movs	r3, #160	; 0xa0
    1c78:	05d9      	lsls	r1, r3, #23
    1c7a:	238a      	movs	r3, #138	; 0x8a
    1c7c:	019b      	lsls	r3, r3, #6
    1c7e:	58cb      	ldr	r3, [r1, r3]
    1c80:	2180      	movs	r1, #128	; 0x80
    1c82:	0189      	lsls	r1, r1, #6
    1c84:	4319      	orrs	r1, r3
    1c86:	238a      	movs	r3, #138	; 0x8a
    1c88:	019b      	lsls	r3, r3, #6
    1c8a:	50d1      	str	r1, [r2, r3]
	E_SEG_OFF;
    1c8c:	23a0      	movs	r3, #160	; 0xa0
    1c8e:	05da      	lsls	r2, r3, #23
    1c90:	23a0      	movs	r3, #160	; 0xa0
    1c92:	05d9      	lsls	r1, r3, #23
    1c94:	238a      	movs	r3, #138	; 0x8a
    1c96:	019b      	lsls	r3, r3, #6
    1c98:	58cb      	ldr	r3, [r1, r3]
    1c9a:	2180      	movs	r1, #128	; 0x80
    1c9c:	0249      	lsls	r1, r1, #9
    1c9e:	4319      	orrs	r1, r3
    1ca0:	238a      	movs	r3, #138	; 0x8a
    1ca2:	019b      	lsls	r3, r3, #6
    1ca4:	50d1      	str	r1, [r2, r3]
	F_SEG_OFF;
    1ca6:	23a0      	movs	r3, #160	; 0xa0
    1ca8:	05da      	lsls	r2, r3, #23
    1caa:	23a0      	movs	r3, #160	; 0xa0
    1cac:	05d9      	lsls	r1, r3, #23
    1cae:	238a      	movs	r3, #138	; 0x8a
    1cb0:	019b      	lsls	r3, r3, #6
    1cb2:	58cb      	ldr	r3, [r1, r3]
    1cb4:	2180      	movs	r1, #128	; 0x80
    1cb6:	0149      	lsls	r1, r1, #5
    1cb8:	4319      	orrs	r1, r3
    1cba:	238a      	movs	r3, #138	; 0x8a
    1cbc:	019b      	lsls	r3, r3, #6
    1cbe:	50d1      	str	r1, [r2, r3]
	G_SEG_OFF;
    1cc0:	23a0      	movs	r3, #160	; 0xa0
    1cc2:	05db      	lsls	r3, r3, #23
    1cc4:	22a0      	movs	r2, #160	; 0xa0
    1cc6:	05d2      	lsls	r2, r2, #23
    1cc8:	4924      	ldr	r1, [pc, #144]	; (1d5c <showHour2+0x13c>)
    1cca:	5852      	ldr	r2, [r2, r1]
    1ccc:	2180      	movs	r1, #128	; 0x80
    1cce:	01c9      	lsls	r1, r1, #7
    1cd0:	430a      	orrs	r2, r1
    1cd2:	4922      	ldr	r1, [pc, #136]	; (1d5c <showHour2+0x13c>)
    1cd4:	505a      	str	r2, [r3, r1]
	DP_SEG_OFF;
    1cd6:	23a0      	movs	r3, #160	; 0xa0
    1cd8:	05db      	lsls	r3, r3, #23
    1cda:	22a0      	movs	r2, #160	; 0xa0
    1cdc:	05d2      	lsls	r2, r2, #23
    1cde:	491f      	ldr	r1, [pc, #124]	; (1d5c <showHour2+0x13c>)
    1ce0:	5852      	ldr	r2, [r2, r1]
    1ce2:	2180      	movs	r1, #128	; 0x80
    1ce4:	0209      	lsls	r1, r1, #8
    1ce6:	430a      	orrs	r2, r1
    1ce8:	491c      	ldr	r1, [pc, #112]	; (1d5c <showHour2+0x13c>)
    1cea:	505a      	str	r2, [r3, r1]
	showScreen(4);
    1cec:	2004      	movs	r0, #4
    1cee:	f7ff fcab 	bl	1648 <showScreen>
	switch (hour) {
    1cf2:	1dfb      	adds	r3, r7, #7
    1cf4:	781b      	ldrb	r3, [r3, #0]
    1cf6:	2b09      	cmp	r3, #9
    1cf8:	d82c      	bhi.n	1d54 <showHour2+0x134>
    1cfa:	009a      	lsls	r2, r3, #2
    1cfc:	4b18      	ldr	r3, [pc, #96]	; (1d60 <showHour2+0x140>)
    1cfe:	18d3      	adds	r3, r2, r3
    1d00:	681b      	ldr	r3, [r3, #0]
    1d02:	469f      	mov	pc, r3
	case 0:
		show0(3);
    1d04:	2003      	movs	r0, #3
    1d06:	f7ff fc2b 	bl	1560 <show0>
		break;
    1d0a:	e024      	b.n	1d56 <showHour2+0x136>
	case 1:
		show1(3);
    1d0c:	2003      	movs	r0, #3
    1d0e:	f7ff f8bb 	bl	e88 <show1>
		break;
    1d12:	e020      	b.n	1d56 <showHour2+0x136>
	case 2:
		show2(3);
    1d14:	2003      	movs	r0, #3
    1d16:	f7ff f8ef 	bl	ef8 <show2>
		break;
    1d1a:	e01c      	b.n	1d56 <showHour2+0x136>
	case 3:
		show3(3);
    1d1c:	2003      	movs	r0, #3
    1d1e:	f7ff f951 	bl	fc4 <show3>
		break;
    1d22:	e018      	b.n	1d56 <showHour2+0x136>
	case 4:
		show4(3);
    1d24:	2003      	movs	r0, #3
    1d26:	f7ff f9b1 	bl	108c <show4>
		break;
    1d2a:	e014      	b.n	1d56 <showHour2+0x136>
	case 5:
		show5(3);
    1d2c:	2003      	movs	r0, #3
    1d2e:	f7ff fa05 	bl	113c <show5>
		break;
    1d32:	e010      	b.n	1d56 <showHour2+0x136>
	case 6:
		show6(3);
    1d34:	2003      	movs	r0, #3
    1d36:	f7ff fa67 	bl	1208 <show6>
		break;
    1d3a:	e00c      	b.n	1d56 <showHour2+0x136>
	case 7:
		show7(3);
    1d3c:	2003      	movs	r0, #3
    1d3e:	f7ff fad7 	bl	12f0 <show7>
		break;
    1d42:	e008      	b.n	1d56 <showHour2+0x136>
	case 8:
		show8(3);
    1d44:	2003      	movs	r0, #3
    1d46:	f7ff fb19 	bl	137c <show8>
		break;
    1d4a:	e004      	b.n	1d56 <showHour2+0x136>
	case 9:
		show9(3);
    1d4c:	2003      	movs	r0, #3
    1d4e:	f7ff fb95 	bl	147c <show9>
		break;
    1d52:	e000      	b.n	1d56 <showHour2+0x136>
	default:
		break;
    1d54:	46c0      	nop			; (mov r8, r8)
	}
}
    1d56:	46bd      	mov	sp, r7
    1d58:	b002      	add	sp, #8
    1d5a:	bd80      	pop	{r7, pc}
    1d5c:	00002284 	.word	0x00002284
    1d60:	000026ec 	.word	0x000026ec

00001d64 <SystemInit>:
    1d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1d66:	218e      	movs	r1, #142	; 0x8e
    1d68:	2020      	movs	r0, #32
    1d6a:	4b2c      	ldr	r3, [pc, #176]	; (1e1c <SystemInit+0xb8>)
    1d6c:	0089      	lsls	r1, r1, #2
    1d6e:	585a      	ldr	r2, [r3, r1]
    1d70:	4382      	bics	r2, r0
    1d72:	505a      	str	r2, [r3, r1]
    1d74:	2200      	movs	r2, #0
    1d76:	621a      	str	r2, [r3, #32]
    1d78:	9201      	str	r2, [sp, #4]
    1d7a:	9a01      	ldr	r2, [sp, #4]
    1d7c:	2ac7      	cmp	r2, #199	; 0xc7
    1d7e:	d803      	bhi.n	1d88 <SystemInit+0x24>
    1d80:	46c0      	nop			; (mov r8, r8)
    1d82:	9a01      	ldr	r2, [sp, #4]
    1d84:	3201      	adds	r2, #1
    1d86:	e7f7      	b.n	1d78 <SystemInit+0x14>
    1d88:	2201      	movs	r2, #1
    1d8a:	2100      	movs	r1, #0
    1d8c:	641a      	str	r2, [r3, #64]	; 0x40
    1d8e:	645a      	str	r2, [r3, #68]	; 0x44
    1d90:	6459      	str	r1, [r3, #68]	; 0x44
    1d92:	645a      	str	r2, [r3, #68]	; 0x44
    1d94:	6c59      	ldr	r1, [r3, #68]	; 0x44
    1d96:	4a21      	ldr	r2, [pc, #132]	; (1e1c <SystemInit+0xb8>)
    1d98:	07c9      	lsls	r1, r1, #31
    1d9a:	d5fb      	bpl.n	1d94 <SystemInit+0x30>
    1d9c:	2123      	movs	r1, #35	; 0x23
    1d9e:	208e      	movs	r0, #142	; 0x8e
    1da0:	2480      	movs	r4, #128	; 0x80
    1da2:	6091      	str	r1, [r2, #8]
    1da4:	0080      	lsls	r0, r0, #2
    1da6:	5811      	ldr	r1, [r2, r0]
    1da8:	43a1      	bics	r1, r4
    1daa:	5011      	str	r1, [r2, r0]
    1dac:	2101      	movs	r1, #1
    1dae:	68d8      	ldr	r0, [r3, #12]
    1db0:	4a1a      	ldr	r2, [pc, #104]	; (1e1c <SystemInit+0xb8>)
    1db2:	4208      	tst	r0, r1
    1db4:	d0fa      	beq.n	1dac <SystemInit+0x48>
    1db6:	2003      	movs	r0, #3
    1db8:	6710      	str	r0, [r2, #112]	; 0x70
    1dba:	2000      	movs	r0, #0
    1dbc:	6751      	str	r1, [r2, #116]	; 0x74
    1dbe:	6750      	str	r0, [r2, #116]	; 0x74
    1dc0:	6751      	str	r1, [r2, #116]	; 0x74
    1dc2:	2101      	movs	r1, #1
    1dc4:	6f58      	ldr	r0, [r3, #116]	; 0x74
    1dc6:	4a15      	ldr	r2, [pc, #84]	; (1e1c <SystemInit+0xb8>)
    1dc8:	4208      	tst	r0, r1
    1dca:	d0fa      	beq.n	1dc2 <SystemInit+0x5e>
    1dcc:	208e      	movs	r0, #142	; 0x8e
    1dce:	6791      	str	r1, [r2, #120]	; 0x78
    1dd0:	0080      	lsls	r0, r0, #2
    1dd2:	5815      	ldr	r5, [r2, r0]
    1dd4:	4c12      	ldr	r4, [pc, #72]	; (1e20 <SystemInit+0xbc>)
    1dd6:	402c      	ands	r4, r5
    1dd8:	5014      	str	r4, [r2, r0]
    1dda:	5815      	ldr	r5, [r2, r0]
    1ddc:	4c11      	ldr	r4, [pc, #68]	; (1e24 <SystemInit+0xc0>)
    1dde:	402c      	ands	r4, r5
    1de0:	5014      	str	r4, [r2, r0]
    1de2:	2000      	movs	r0, #0
    1de4:	6491      	str	r1, [r2, #72]	; 0x48
    1de6:	64d1      	str	r1, [r2, #76]	; 0x4c
    1de8:	64d0      	str	r0, [r2, #76]	; 0x4c
    1dea:	64d1      	str	r1, [r2, #76]	; 0x4c
    1dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1dee:	07d2      	lsls	r2, r2, #31
    1df0:	d5fc      	bpl.n	1dec <SystemInit+0x88>
    1df2:	2123      	movs	r1, #35	; 0x23
    1df4:	4a09      	ldr	r2, [pc, #36]	; (1e1c <SystemInit+0xb8>)
    1df6:	6111      	str	r1, [r2, #16]
    1df8:	2201      	movs	r2, #1
    1dfa:	6959      	ldr	r1, [r3, #20]
    1dfc:	4211      	tst	r1, r2
    1dfe:	d0fb      	beq.n	1df8 <SystemInit+0x94>
    1e00:	2100      	movs	r1, #0
    1e02:	4b09      	ldr	r3, [pc, #36]	; (1e28 <SystemInit+0xc4>)
    1e04:	6019      	str	r1, [r3, #0]
    1e06:	6019      	str	r1, [r3, #0]
    1e08:	2180      	movs	r1, #128	; 0x80
    1e0a:	4b08      	ldr	r3, [pc, #32]	; (1e2c <SystemInit+0xc8>)
    1e0c:	0249      	lsls	r1, r1, #9
    1e0e:	601a      	str	r2, [r3, #0]
    1e10:	4a07      	ldr	r2, [pc, #28]	; (1e30 <SystemInit+0xcc>)
    1e12:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    1e14:	430b      	orrs	r3, r1
    1e16:	67d3      	str	r3, [r2, #124]	; 0x7c
    1e18:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	40048000 	.word	0x40048000
    1e20:	fffffbff 	.word	0xfffffbff
    1e24:	fffffeff 	.word	0xfffffeff
    1e28:	400480c0 	.word	0x400480c0
    1e2c:	400480c8 	.word	0x400480c8
    1e30:	40048004 	.word	0x40048004

00001e34 <__main>:
    1e34:	2000      	movs	r0, #0
    1e36:	b508      	push	{r3, lr}
    1e38:	1c01      	adds	r1, r0, #0
    1e3a:	1c02      	adds	r2, r0, #0
    1e3c:	f000 f804 	bl	1e48 <_initio>
    1e40:	f7fe fcfe 	bl	840 <main>
    1e44:	bd08      	pop	{r3, pc}
	...

00001e48 <_initio>:
    1e48:	22a0      	movs	r2, #160	; 0xa0
    1e4a:	b538      	push	{r3, r4, r5, lr}
    1e4c:	4c22      	ldr	r4, [pc, #136]	; (1ed8 <_initio+0x90>)
    1e4e:	2100      	movs	r1, #0
    1e50:	0052      	lsls	r2, r2, #1
    1e52:	1c20      	adds	r0, r4, #0
    1e54:	f000 f870 	bl	1f38 <memset>
    1e58:	20c0      	movs	r0, #192	; 0xc0
    1e5a:	f000 f9ad 	bl	21b8 <_Csys_alloc>
    1e5e:	4d1f      	ldr	r5, [pc, #124]	; (1edc <_initio+0x94>)
    1e60:	2100      	movs	r1, #0
    1e62:	22c0      	movs	r2, #192	; 0xc0
    1e64:	6028      	str	r0, [r5, #0]
    1e66:	f000 f867 	bl	1f38 <memset>
    1e6a:	2300      	movs	r3, #0
    1e6c:	6828      	ldr	r0, [r5, #0]
    1e6e:	2228      	movs	r2, #40	; 0x28
    1e70:	2118      	movs	r1, #24
    1e72:	435a      	muls	r2, r3
    1e74:	4359      	muls	r1, r3
    1e76:	18a2      	adds	r2, r4, r2
    1e78:	1841      	adds	r1, r0, r1
    1e7a:	3301      	adds	r3, #1
    1e7c:	6251      	str	r1, [r2, #36]	; 0x24
    1e7e:	2b08      	cmp	r3, #8
    1e80:	d1f5      	bne.n	1e6e <_initio+0x26>
    1e82:	1c22      	adds	r2, r4, #0
    1e84:	4916      	ldr	r1, [pc, #88]	; (1ee0 <_initio+0x98>)
    1e86:	2000      	movs	r0, #0
    1e88:	f000 f87c 	bl	1f84 <_fdopen>
    1e8c:	2280      	movs	r2, #128	; 0x80
    1e8e:	2380      	movs	r3, #128	; 0x80
    1e90:	1c20      	adds	r0, r4, #0
    1e92:	015b      	lsls	r3, r3, #5
    1e94:	2100      	movs	r1, #0
    1e96:	00d2      	lsls	r2, r2, #3
    1e98:	f000 f82a 	bl	1ef0 <setvbuf>
    1e9c:	4d11      	ldr	r5, [pc, #68]	; (1ee4 <_initio+0x9c>)
    1e9e:	4c12      	ldr	r4, [pc, #72]	; (1ee8 <_initio+0xa0>)
    1ea0:	1c29      	adds	r1, r5, #0
    1ea2:	1c22      	adds	r2, r4, #0
    1ea4:	2001      	movs	r0, #1
    1ea6:	f000 f86d 	bl	1f84 <_fdopen>
    1eaa:	2280      	movs	r2, #128	; 0x80
    1eac:	2380      	movs	r3, #128	; 0x80
    1eae:	1c20      	adds	r0, r4, #0
    1eb0:	015b      	lsls	r3, r3, #5
    1eb2:	2100      	movs	r1, #0
    1eb4:	00d2      	lsls	r2, r2, #3
    1eb6:	f000 f81b 	bl	1ef0 <setvbuf>
    1eba:	4c0c      	ldr	r4, [pc, #48]	; (1eec <_initio+0xa4>)
    1ebc:	1c29      	adds	r1, r5, #0
    1ebe:	1c22      	adds	r2, r4, #0
    1ec0:	2002      	movs	r0, #2
    1ec2:	f000 f85f 	bl	1f84 <_fdopen>
    1ec6:	2280      	movs	r2, #128	; 0x80
    1ec8:	2380      	movs	r3, #128	; 0x80
    1eca:	1c20      	adds	r0, r4, #0
    1ecc:	2100      	movs	r1, #0
    1ece:	00d2      	lsls	r2, r2, #3
    1ed0:	015b      	lsls	r3, r3, #5
    1ed2:	f000 f80d 	bl	1ef0 <setvbuf>
    1ed6:	bd38      	pop	{r3, r4, r5, pc}
    1ed8:	100000e8 	.word	0x100000e8
    1edc:	100000e4 	.word	0x100000e4
    1ee0:	00002714 	.word	0x00002714
    1ee4:	00002716 	.word	0x00002716
    1ee8:	10000110 	.word	0x10000110
    1eec:	10000138 	.word	0x10000138

00001ef0 <setvbuf>:
    1ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef2:	68c5      	ldr	r5, [r0, #12]
    1ef4:	2401      	movs	r4, #1
    1ef6:	07ae      	lsls	r6, r5, #30
    1ef8:	d01a      	beq.n	1f30 <setvbuf+0x40>
    1efa:	2680      	movs	r6, #128	; 0x80
    1efc:	00b6      	lsls	r6, r6, #2
    1efe:	42b2      	cmp	r2, r6
    1f00:	d00b      	beq.n	1f1a <setvbuf+0x2a>
    1f02:	2680      	movs	r6, #128	; 0x80
    1f04:	00f6      	lsls	r6, r6, #3
    1f06:	42b2      	cmp	r2, r6
    1f08:	d004      	beq.n	1f14 <setvbuf+0x24>
    1f0a:	2680      	movs	r6, #128	; 0x80
    1f0c:	0076      	lsls	r6, r6, #1
    1f0e:	42b2      	cmp	r2, r6
    1f10:	d10e      	bne.n	1f30 <setvbuf+0x40>
    1f12:	e002      	b.n	1f1a <setvbuf+0x2a>
    1f14:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1f16:	1c23      	adds	r3, r4, #0
    1f18:	e004      	b.n	1f24 <setvbuf+0x34>
    1f1a:	4e06      	ldr	r6, [pc, #24]	; (1f34 <setvbuf+0x44>)
    1f1c:	1e5f      	subs	r7, r3, #1
    1f1e:	2401      	movs	r4, #1
    1f20:	42b7      	cmp	r7, r6
    1f22:	d805      	bhi.n	1f30 <setvbuf+0x40>
    1f24:	2400      	movs	r4, #0
    1f26:	4315      	orrs	r5, r2
    1f28:	6101      	str	r1, [r0, #16]
    1f2a:	6001      	str	r1, [r0, #0]
    1f2c:	61c3      	str	r3, [r0, #28]
    1f2e:	60c5      	str	r5, [r0, #12]
    1f30:	1c20      	adds	r0, r4, #0
    1f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f34:	00fffffe 	.word	0x00fffffe

00001f38 <memset>:
    1f38:	b508      	push	{r3, lr}
    1f3a:	f000 fb06 	bl	254a <__aeabi_lowlevel_memset>
    1f3e:	bd08      	pop	{r3, pc}

00001f40 <_deferredlazyseek>:
    1f40:	2320      	movs	r3, #32
    1f42:	b510      	push	{r4, lr}
    1f44:	1c04      	adds	r4, r0, #0
    1f46:	68c2      	ldr	r2, [r0, #12]
    1f48:	439a      	bics	r2, r3
    1f4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1f4c:	60e2      	str	r2, [r4, #12]
    1f4e:	685b      	ldr	r3, [r3, #4]
    1f50:	6982      	ldr	r2, [r0, #24]
    1f52:	429a      	cmp	r2, r3
    1f54:	d00d      	beq.n	1f72 <_deferredlazyseek+0x32>
    1f56:	f000 f849 	bl	1fec <_fflush>
    1f5a:	68e2      	ldr	r2, [r4, #12]
    1f5c:	4b07      	ldr	r3, [pc, #28]	; (1f7c <_deferredlazyseek+0x3c>)
    1f5e:	4013      	ands	r3, r2
    1f60:	2210      	movs	r2, #16
    1f62:	4313      	orrs	r3, r2
    1f64:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1f66:	60e3      	str	r3, [r4, #12]
    1f68:	6853      	ldr	r3, [r2, #4]
    1f6a:	61a3      	str	r3, [r4, #24]
    1f6c:	6923      	ldr	r3, [r4, #16]
    1f6e:	6093      	str	r3, [r2, #8]
    1f70:	6023      	str	r3, [r4, #0]
    1f72:	68e2      	ldr	r2, [r4, #12]
    1f74:	4b02      	ldr	r3, [pc, #8]	; (1f80 <_deferredlazyseek+0x40>)
    1f76:	4013      	ands	r3, r2
    1f78:	60e3      	str	r3, [r4, #12]
    1f7a:	bd10      	pop	{r4, pc}
    1f7c:	ffffcfef 	.word	0xffffcfef
    1f80:	ffffbfbf 	.word	0xffffbfbf

00001f84 <_fdopen>:
    1f84:	b570      	push	{r4, r5, r6, lr}
    1f86:	1c0d      	adds	r5, r1, #0
    1f88:	1c06      	adds	r6, r0, #0
    1f8a:	1c10      	adds	r0, r2, #0
    1f8c:	1c14      	adds	r4, r2, #0
    1f8e:	f000 f923 	bl	21d8 <fclose>
    1f92:	782b      	ldrb	r3, [r5, #0]
    1f94:	2b72      	cmp	r3, #114	; 0x72
    1f96:	d009      	beq.n	1fac <_fdopen+0x28>
    1f98:	2b77      	cmp	r3, #119	; 0x77
    1f9a:	d004      	beq.n	1fa6 <_fdopen+0x22>
    1f9c:	2b61      	cmp	r3, #97	; 0x61
    1f9e:	d120      	bne.n	1fe2 <_fdopen+0x5e>
    1fa0:	2308      	movs	r3, #8
    1fa2:	4a11      	ldr	r2, [pc, #68]	; (1fe8 <_fdopen+0x64>)
    1fa4:	e004      	b.n	1fb0 <_fdopen+0x2c>
    1fa6:	2304      	movs	r3, #4
    1fa8:	2202      	movs	r2, #2
    1faa:	e001      	b.n	1fb0 <_fdopen+0x2c>
    1fac:	2300      	movs	r3, #0
    1fae:	2201      	movs	r2, #1
    1fb0:	3501      	adds	r5, #1
    1fb2:	7829      	ldrb	r1, [r5, #0]
    1fb4:	292b      	cmp	r1, #43	; 0x2b
    1fb6:	d005      	beq.n	1fc4 <_fdopen+0x40>
    1fb8:	2962      	cmp	r1, #98	; 0x62
    1fba:	d108      	bne.n	1fce <_fdopen+0x4a>
    1fbc:	2104      	movs	r1, #4
    1fbe:	430a      	orrs	r2, r1
    1fc0:	3903      	subs	r1, #3
    1fc2:	e002      	b.n	1fca <_fdopen+0x46>
    1fc4:	2103      	movs	r1, #3
    1fc6:	430a      	orrs	r2, r1
    1fc8:	3901      	subs	r1, #1
    1fca:	430b      	orrs	r3, r1
    1fcc:	e7f0      	b.n	1fb0 <_fdopen+0x2c>
    1fce:	60e2      	str	r2, [r4, #12]
    1fd0:	6166      	str	r6, [r4, #20]
    1fd2:	071b      	lsls	r3, r3, #28
    1fd4:	d506      	bpl.n	1fe4 <_fdopen+0x60>
    1fd6:	1c20      	adds	r0, r4, #0
    1fd8:	2100      	movs	r1, #0
    1fda:	2202      	movs	r2, #2
    1fdc:	f000 f94e 	bl	227c <fseek>
    1fe0:	e000      	b.n	1fe4 <_fdopen+0x60>
    1fe2:	2400      	movs	r4, #0
    1fe4:	1c20      	adds	r0, r4, #0
    1fe6:	bd70      	pop	{r4, r5, r6, pc}
    1fe8:	00008002 	.word	0x00008002

00001fec <_fflush>:
    1fec:	b538      	push	{r3, r4, r5, lr}
    1fee:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1ff0:	68c2      	ldr	r2, [r0, #12]
    1ff2:	6899      	ldr	r1, [r3, #8]
    1ff4:	4b14      	ldr	r3, [pc, #80]	; (2048 <_fflush+0x5c>)
    1ff6:	6905      	ldr	r5, [r0, #16]
    1ff8:	4013      	ands	r3, r2
    1ffa:	60c3      	str	r3, [r0, #12]
    1ffc:	2382      	movs	r3, #130	; 0x82
    1ffe:	6804      	ldr	r4, [r0, #0]
    2000:	4013      	ands	r3, r2
    2002:	2b02      	cmp	r3, #2
    2004:	d002      	beq.n	200c <_fflush+0x20>
    2006:	2301      	movs	r3, #1
    2008:	425b      	negs	r3, r3
    200a:	e01b      	b.n	2044 <_fflush+0x58>
    200c:	2380      	movs	r3, #128	; 0x80
    200e:	025b      	lsls	r3, r3, #9
    2010:	4013      	ands	r3, r2
    2012:	d017      	beq.n	2044 <_fflush+0x58>
    2014:	42a1      	cmp	r1, r4
    2016:	d200      	bcs.n	201a <_fflush+0x2e>
    2018:	1c21      	adds	r1, r4, #0
    201a:	1c04      	adds	r4, r0, #0
    201c:	42a9      	cmp	r1, r5
    201e:	d109      	bne.n	2034 <_fflush+0x48>
    2020:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2022:	68e1      	ldr	r1, [r4, #12]
    2024:	609d      	str	r5, [r3, #8]
    2026:	2300      	movs	r3, #0
    2028:	4a08      	ldr	r2, [pc, #32]	; (204c <_fflush+0x60>)
    202a:	6025      	str	r5, [r4, #0]
    202c:	400a      	ands	r2, r1
    202e:	60a3      	str	r3, [r4, #8]
    2030:	60e2      	str	r2, [r4, #12]
    2032:	e007      	b.n	2044 <_fflush+0x58>
    2034:	1b49      	subs	r1, r1, r5
    2036:	1c28      	adds	r0, r5, #0
    2038:	1c22      	adds	r2, r4, #0
    203a:	f000 f809 	bl	2050 <_Cwritebuf>
    203e:	2800      	cmp	r0, #0
    2040:	d0ee      	beq.n	2020 <_fflush+0x34>
    2042:	e7e0      	b.n	2006 <_fflush+0x1a>
    2044:	1c18      	adds	r0, r3, #0
    2046:	bd38      	pop	{r3, r4, r5, pc}
    2048:	fff7ffff 	.word	0xfff7ffff
    204c:	fffeffff 	.word	0xfffeffff

00002050 <_Cwritebuf>:
    2050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2052:	68d6      	ldr	r6, [r2, #12]
    2054:	9001      	str	r0, [sp, #4]
    2056:	1c0d      	adds	r5, r1, #0
    2058:	1c14      	adds	r4, r2, #0
    205a:	6957      	ldr	r7, [r2, #20]
    205c:	02f3      	lsls	r3, r6, #11
    205e:	d505      	bpl.n	206c <_Cwritebuf+0x1c>
    2060:	2310      	movs	r3, #16
    2062:	1c38      	adds	r0, r7, #0
    2064:	431e      	orrs	r6, r3
    2066:	f000 fa91 	bl	258c <__sys_flen>
    206a:	61a0      	str	r0, [r4, #24]
    206c:	4b11      	ldr	r3, [pc, #68]	; (20b4 <_Cwritebuf+0x64>)
    206e:	421e      	tst	r6, r3
    2070:	d008      	beq.n	2084 <_Cwritebuf+0x34>
    2072:	1c38      	adds	r0, r7, #0
    2074:	69a1      	ldr	r1, [r4, #24]
    2076:	f000 fa9b 	bl	25b0 <__sys_seek>
    207a:	2800      	cmp	r0, #0
    207c:	db13      	blt.n	20a6 <_Cwritebuf+0x56>
    207e:	4b0e      	ldr	r3, [pc, #56]	; (20b8 <_Cwritebuf+0x68>)
    2080:	401e      	ands	r6, r3
    2082:	60e6      	str	r6, [r4, #12]
    2084:	1c2a      	adds	r2, r5, #0
    2086:	1c38      	adds	r0, r7, #0
    2088:	9901      	ldr	r1, [sp, #4]
    208a:	f000 fa9d 	bl	25c8 <__sys_write>
    208e:	1b40      	subs	r0, r0, r5
    2090:	1e43      	subs	r3, r0, #1
    2092:	4198      	sbcs	r0, r3
    2094:	4240      	negs	r0, r0
    2096:	0043      	lsls	r3, r0, #1
    2098:	085b      	lsrs	r3, r3, #1
    209a:	1aed      	subs	r5, r5, r3
    209c:	69a3      	ldr	r3, [r4, #24]
    209e:	195d      	adds	r5, r3, r5
    20a0:	61a5      	str	r5, [r4, #24]
    20a2:	2800      	cmp	r0, #0
    20a4:	d005      	beq.n	20b2 <_Cwritebuf+0x62>
    20a6:	2380      	movs	r3, #128	; 0x80
    20a8:	2001      	movs	r0, #1
    20aa:	68e2      	ldr	r2, [r4, #12]
    20ac:	4240      	negs	r0, r0
    20ae:	4313      	orrs	r3, r2
    20b0:	60e3      	str	r3, [r4, #12]
    20b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    20b4:	00020010 	.word	0x00020010
    20b8:	fffdffef 	.word	0xfffdffef

000020bc <malloc>:
    20bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20be:	4e31      	ldr	r6, [pc, #196]	; (2184 <malloc+0xc8>)
    20c0:	1cc5      	adds	r5, r0, #3
    20c2:	6834      	ldr	r4, [r6, #0]
    20c4:	08ad      	lsrs	r5, r5, #2
    20c6:	9601      	str	r6, [sp, #4]
    20c8:	2800      	cmp	r0, #0
    20ca:	d013      	beq.n	20f4 <malloc+0x38>
    20cc:	2280      	movs	r2, #128	; 0x80
    20ce:	1c29      	adds	r1, r5, #0
    20d0:	1ceb      	adds	r3, r5, #3
    20d2:	2700      	movs	r7, #0
    20d4:	0552      	lsls	r2, r2, #21
    20d6:	310a      	adds	r1, #10
    20d8:	469c      	mov	ip, r3
    20da:	e004      	b.n	20e6 <malloc+0x2a>
    20dc:	6823      	ldr	r3, [r4, #0]
    20de:	4293      	cmp	r3, r2
    20e0:	d013      	beq.n	210a <malloc+0x4e>
    20e2:	1c27      	adds	r7, r4, #0
    20e4:	68a4      	ldr	r4, [r4, #8]
    20e6:	2c00      	cmp	r4, #0
    20e8:	d1f8      	bne.n	20dc <malloc+0x20>
    20ea:	300c      	adds	r0, #12
    20ec:	f000 f9a0 	bl	2430 <_sbrk>
    20f0:	1c43      	adds	r3, r0, #1
    20f2:	d10f      	bne.n	2114 <malloc+0x58>
    20f4:	2000      	movs	r0, #0
    20f6:	e043      	b.n	2180 <malloc+0xc4>
    20f8:	683e      	ldr	r6, [r7, #0]
    20fa:	4296      	cmp	r6, r2
    20fc:	d117      	bne.n	212e <malloc+0x72>
    20fe:	687e      	ldr	r6, [r7, #4]
    2100:	199b      	adds	r3, r3, r6
    2102:	3303      	adds	r3, #3
    2104:	6063      	str	r3, [r4, #4]
    2106:	68bb      	ldr	r3, [r7, #8]
    2108:	60a3      	str	r3, [r4, #8]
    210a:	68a7      	ldr	r7, [r4, #8]
    210c:	6863      	ldr	r3, [r4, #4]
    210e:	2f00      	cmp	r7, #0
    2110:	d1f2      	bne.n	20f8 <malloc+0x3c>
    2112:	e00c      	b.n	212e <malloc+0x72>
    2114:	2380      	movs	r3, #128	; 0x80
    2116:	059b      	lsls	r3, r3, #22
    2118:	6003      	str	r3, [r0, #0]
    211a:	6045      	str	r5, [r0, #4]
    211c:	6084      	str	r4, [r0, #8]
    211e:	2f00      	cmp	r7, #0
    2120:	d102      	bne.n	2128 <malloc+0x6c>
    2122:	9b01      	ldr	r3, [sp, #4]
    2124:	6018      	str	r0, [r3, #0]
    2126:	e000      	b.n	212a <malloc+0x6e>
    2128:	60b8      	str	r0, [r7, #8]
    212a:	300c      	adds	r0, #12
    212c:	e028      	b.n	2180 <malloc+0xc4>
    212e:	42ab      	cmp	r3, r5
    2130:	db05      	blt.n	213e <malloc+0x82>
    2132:	459c      	cmp	ip, r3
    2134:	db03      	blt.n	213e <malloc+0x82>
    2136:	2380      	movs	r3, #128	; 0x80
    2138:	059b      	lsls	r3, r3, #22
    213a:	6023      	str	r3, [r4, #0]
    213c:	e01e      	b.n	217c <malloc+0xc0>
    213e:	428b      	cmp	r3, r1
    2140:	d910      	bls.n	2164 <malloc+0xa8>
    2142:	2280      	movs	r2, #128	; 0x80
    2144:	1c20      	adds	r0, r4, #0
    2146:	2180      	movs	r1, #128	; 0x80
    2148:	0592      	lsls	r2, r2, #22
    214a:	6022      	str	r2, [r4, #0]
    214c:	300c      	adds	r0, #12
    214e:	00aa      	lsls	r2, r5, #2
    2150:	1b5b      	subs	r3, r3, r5
    2152:	1882      	adds	r2, r0, r2
    2154:	0549      	lsls	r1, r1, #21
    2156:	3b03      	subs	r3, #3
    2158:	6065      	str	r5, [r4, #4]
    215a:	60a2      	str	r2, [r4, #8]
    215c:	6011      	str	r1, [r2, #0]
    215e:	6053      	str	r3, [r2, #4]
    2160:	6097      	str	r7, [r2, #8]
    2162:	e00d      	b.n	2180 <malloc+0xc4>
    2164:	2f00      	cmp	r7, #0
    2166:	d1bc      	bne.n	20e2 <malloc+0x26>
    2168:	009b      	lsls	r3, r3, #2
    216a:	1ac0      	subs	r0, r0, r3
    216c:	f000 f960 	bl	2430 <_sbrk>
    2170:	1c43      	adds	r3, r0, #1
    2172:	d0bf      	beq.n	20f4 <malloc+0x38>
    2174:	2380      	movs	r3, #128	; 0x80
    2176:	059b      	lsls	r3, r3, #22
    2178:	6023      	str	r3, [r4, #0]
    217a:	6065      	str	r5, [r4, #4]
    217c:	1c20      	adds	r0, r4, #0
    217e:	e7d4      	b.n	212a <malloc+0x6e>
    2180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	10000228 	.word	0x10000228

00002188 <free>:
    2188:	b510      	push	{r4, lr}
    218a:	2800      	cmp	r0, #0
    218c:	d012      	beq.n	21b4 <free+0x2c>
    218e:	2380      	movs	r3, #128	; 0x80
    2190:	055b      	lsls	r3, r3, #21
    2192:	1c19      	adds	r1, r3, #0
    2194:	380c      	subs	r0, #12
    2196:	6003      	str	r3, [r0, #0]
    2198:	6882      	ldr	r2, [r0, #8]
    219a:	2a00      	cmp	r2, #0
    219c:	d00a      	beq.n	21b4 <free+0x2c>
    219e:	6813      	ldr	r3, [r2, #0]
    21a0:	428b      	cmp	r3, r1
    21a2:	d107      	bne.n	21b4 <free+0x2c>
    21a4:	6854      	ldr	r4, [r2, #4]
    21a6:	6843      	ldr	r3, [r0, #4]
    21a8:	191b      	adds	r3, r3, r4
    21aa:	3303      	adds	r3, #3
    21ac:	6043      	str	r3, [r0, #4]
    21ae:	6893      	ldr	r3, [r2, #8]
    21b0:	6083      	str	r3, [r0, #8]
    21b2:	e7f1      	b.n	2198 <free+0x10>
    21b4:	bd10      	pop	{r4, pc}
	...

000021b8 <_Csys_alloc>:
    21b8:	b510      	push	{r4, lr}
    21ba:	f7ff ff7f 	bl	20bc <malloc>
    21be:	1e04      	subs	r4, r0, #0
    21c0:	d105      	bne.n	21ce <_Csys_alloc+0x16>
    21c2:	4904      	ldr	r1, [pc, #16]	; (21d4 <_Csys_alloc+0x1c>)
    21c4:	2217      	movs	r2, #23
    21c6:	f000 f9ff 	bl	25c8 <__sys_write>
    21ca:	f000 f9d3 	bl	2574 <__exit>
    21ce:	1c20      	adds	r0, r4, #0
    21d0:	bd10      	pop	{r4, pc}
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	00002718 	.word	0x00002718

000021d8 <fclose>:
    21d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21da:	6a43      	ldr	r3, [r0, #36]	; 0x24
    21dc:	68c5      	ldr	r5, [r0, #12]
    21de:	b08b      	sub	sp, #44	; 0x2c
    21e0:	6947      	ldr	r7, [r0, #20]
    21e2:	6906      	ldr	r6, [r0, #16]
    21e4:	9301      	str	r3, [sp, #4]
    21e6:	07ab      	lsls	r3, r5, #30
    21e8:	d027      	beq.n	223a <fclose+0x62>
    21ea:	1c04      	adds	r4, r0, #0
    21ec:	072b      	lsls	r3, r5, #28
    21ee:	d416      	bmi.n	221e <fclose+0x46>
    21f0:	f000 f82a 	bl	2248 <fflush>
    21f4:	1c38      	adds	r0, r7, #0
    21f6:	f000 f9c3 	bl	2580 <__sys_close>
    21fa:	052b      	lsls	r3, r5, #20
    21fc:	d502      	bpl.n	2204 <fclose+0x2c>
    21fe:	1c30      	adds	r0, r6, #0
    2200:	f7ff ffc2 	bl	2188 <free>
    2204:	4b0f      	ldr	r3, [pc, #60]	; (2244 <fclose+0x6c>)
    2206:	0dad      	lsrs	r5, r5, #22
    2208:	05ad      	lsls	r5, r5, #22
    220a:	429d      	cmp	r5, r3
    220c:	d107      	bne.n	221e <fclose+0x46>
    220e:	a802      	add	r0, sp, #8
    2210:	6a21      	ldr	r1, [r4, #32]
    2212:	2220      	movs	r2, #32
    2214:	f000 f9d2 	bl	25bc <__sys_tmpnam>
    2218:	a802      	add	r0, sp, #8
    221a:	f000 f8d5 	bl	23c8 <remove>
    221e:	2100      	movs	r1, #0
    2220:	2218      	movs	r2, #24
    2222:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2224:	f7ff fe88 	bl	1f38 <memset>
    2228:	1c20      	adds	r0, r4, #0
    222a:	2100      	movs	r1, #0
    222c:	2228      	movs	r2, #40	; 0x28
    222e:	f7ff fe83 	bl	1f38 <memset>
    2232:	9b01      	ldr	r3, [sp, #4]
    2234:	2000      	movs	r0, #0
    2236:	6263      	str	r3, [r4, #36]	; 0x24
    2238:	e001      	b.n	223e <fclose+0x66>
    223a:	2001      	movs	r0, #1
    223c:	4240      	negs	r0, r0
    223e:	b00b      	add	sp, #44	; 0x2c
    2240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	ad800000 	.word	0xad800000

00002248 <fflush>:
    2248:	b538      	push	{r3, r4, r5, lr}
    224a:	2800      	cmp	r0, #0
    224c:	d003      	beq.n	2256 <fflush+0xe>
    224e:	f000 f90f 	bl	2470 <_do_fflush>
    2252:	1c05      	adds	r5, r0, #0
    2254:	e00e      	b.n	2274 <fflush+0x2c>
    2256:	1c04      	adds	r4, r0, #0
    2258:	1c05      	adds	r5, r0, #0
    225a:	4807      	ldr	r0, [pc, #28]	; (2278 <fflush+0x30>)
    225c:	1820      	adds	r0, r4, r0
    225e:	f000 f907 	bl	2470 <_do_fflush>
    2262:	2800      	cmp	r0, #0
    2264:	d001      	beq.n	226a <fflush+0x22>
    2266:	2501      	movs	r5, #1
    2268:	426d      	negs	r5, r5
    226a:	23a0      	movs	r3, #160	; 0xa0
    226c:	3428      	adds	r4, #40	; 0x28
    226e:	005b      	lsls	r3, r3, #1
    2270:	429c      	cmp	r4, r3
    2272:	d1f2      	bne.n	225a <fflush+0x12>
    2274:	1c28      	adds	r0, r5, #0
    2276:	bd38      	pop	{r3, r4, r5, pc}
    2278:	100000e8 	.word	0x100000e8

0000227c <fseek>:
    227c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    227e:	68c3      	ldr	r3, [r0, #12]
    2280:	1c16      	adds	r6, r2, #0
    2282:	9300      	str	r3, [sp, #0]
    2284:	9a00      	ldr	r2, [sp, #0]
    2286:	4b3b      	ldr	r3, [pc, #236]	; (2374 <fseek+0xf8>)
    2288:	1c04      	adds	r4, r0, #0
    228a:	1c0d      	adds	r5, r1, #0
    228c:	6947      	ldr	r7, [r0, #20]
    228e:	421a      	tst	r2, r3
    2290:	d06b      	beq.n	236a <fseek+0xee>
    2292:	1c38      	adds	r0, r7, #0
    2294:	f000 f980 	bl	2598 <__sys_istty>
    2298:	9001      	str	r0, [sp, #4]
    229a:	2800      	cmp	r0, #0
    229c:	d165      	bne.n	236a <fseek+0xee>
    229e:	2e01      	cmp	r6, #1
    22a0:	d004      	beq.n	22ac <fseek+0x30>
    22a2:	2e02      	cmp	r6, #2
    22a4:	d007      	beq.n	22b6 <fseek+0x3a>
    22a6:	2e00      	cmp	r6, #0
    22a8:	d15f      	bne.n	236a <fseek+0xee>
    22aa:	e024      	b.n	22f6 <fseek+0x7a>
    22ac:	1c20      	adds	r0, r4, #0
    22ae:	f000 f865 	bl	237c <ftell>
    22b2:	182d      	adds	r5, r5, r0
    22b4:	e01f      	b.n	22f6 <fseek+0x7a>
    22b6:	1c38      	adds	r0, r7, #0
    22b8:	f000 f968 	bl	258c <__sys_flen>
    22bc:	2800      	cmp	r0, #0
    22be:	da05      	bge.n	22cc <fseek+0x50>
    22c0:	2380      	movs	r3, #128	; 0x80
    22c2:	68e2      	ldr	r2, [r4, #12]
    22c4:	4313      	orrs	r3, r2
    22c6:	60e3      	str	r3, [r4, #12]
    22c8:	2301      	movs	r3, #1
    22ca:	e04f      	b.n	236c <fseek+0xf0>
    22cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    22ce:	6821      	ldr	r1, [r4, #0]
    22d0:	6893      	ldr	r3, [r2, #8]
    22d2:	4299      	cmp	r1, r3
    22d4:	d900      	bls.n	22d8 <fseek+0x5c>
    22d6:	1c0b      	adds	r3, r1, #0
    22d8:	69a1      	ldr	r1, [r4, #24]
    22da:	185b      	adds	r3, r3, r1
    22dc:	6921      	ldr	r1, [r4, #16]
    22de:	1a5b      	subs	r3, r3, r1
    22e0:	68e1      	ldr	r1, [r4, #12]
    22e2:	0689      	lsls	r1, r1, #26
    22e4:	d503      	bpl.n	22ee <fseek+0x72>
    22e6:	6852      	ldr	r2, [r2, #4]
    22e8:	4293      	cmp	r3, r2
    22ea:	da00      	bge.n	22ee <fseek+0x72>
    22ec:	1c13      	adds	r3, r2, #0
    22ee:	4283      	cmp	r3, r0
    22f0:	da00      	bge.n	22f4 <fseek+0x78>
    22f2:	1c03      	adds	r3, r0, #0
    22f4:	18ed      	adds	r5, r5, r3
    22f6:	2d00      	cmp	r5, #0
    22f8:	db37      	blt.n	236a <fseek+0xee>
    22fa:	9b00      	ldr	r3, [sp, #0]
    22fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    22fe:	049b      	lsls	r3, r3, #18
    2300:	d504      	bpl.n	230c <fseek+0x90>
    2302:	6823      	ldr	r3, [r4, #0]
    2304:	688a      	ldr	r2, [r1, #8]
    2306:	429a      	cmp	r2, r3
    2308:	d200      	bcs.n	230c <fseek+0x90>
    230a:	608b      	str	r3, [r1, #8]
    230c:	69a3      	ldr	r3, [r4, #24]
    230e:	429d      	cmp	r5, r3
    2310:	db0d      	blt.n	232e <fseek+0xb2>
    2312:	6820      	ldr	r0, [r4, #0]
    2314:	688a      	ldr	r2, [r1, #8]
    2316:	4282      	cmp	r2, r0
    2318:	d200      	bcs.n	231c <fseek+0xa0>
    231a:	1c02      	adds	r2, r0, #0
    231c:	6920      	ldr	r0, [r4, #16]
    231e:	18d6      	adds	r6, r2, r3
    2320:	1a36      	subs	r6, r6, r0
    2322:	42b5      	cmp	r5, r6
    2324:	dc03      	bgt.n	232e <fseek+0xb2>
    2326:	68cf      	ldr	r7, [r1, #12]
    2328:	19de      	adds	r6, r3, r7
    232a:	42b5      	cmp	r5, r6
    232c:	db07      	blt.n	233e <fseek+0xc2>
    232e:	2320      	movs	r3, #32
    2330:	9a00      	ldr	r2, [sp, #0]
    2332:	4313      	orrs	r3, r2
    2334:	2200      	movs	r2, #0
    2336:	60a2      	str	r2, [r4, #8]
    2338:	6062      	str	r2, [r4, #4]
    233a:	604d      	str	r5, [r1, #4]
    233c:	e011      	b.n	2362 <fseek+0xe6>
    233e:	1aed      	subs	r5, r5, r3
    2340:	9b00      	ldr	r3, [sp, #0]
    2342:	079b      	lsls	r3, r3, #30
    2344:	d501      	bpl.n	234a <fseek+0xce>
    2346:	1bef      	subs	r7, r5, r7
    2348:	60a7      	str	r7, [r4, #8]
    234a:	9b00      	ldr	r3, [sp, #0]
    234c:	07db      	lsls	r3, r3, #31
    234e:	d502      	bpl.n	2356 <fseek+0xda>
    2350:	1a82      	subs	r2, r0, r2
    2352:	18aa      	adds	r2, r5, r2
    2354:	6062      	str	r2, [r4, #4]
    2356:	2320      	movs	r3, #32
    2358:	9a00      	ldr	r2, [sp, #0]
    235a:	1945      	adds	r5, r0, r5
    235c:	439a      	bics	r2, r3
    235e:	1c13      	adds	r3, r2, #0
    2360:	6025      	str	r5, [r4, #0]
    2362:	4a05      	ldr	r2, [pc, #20]	; (2378 <fseek+0xfc>)
    2364:	4013      	ands	r3, r2
    2366:	60e3      	str	r3, [r4, #12]
    2368:	e001      	b.n	236e <fseek+0xf2>
    236a:	2302      	movs	r3, #2
    236c:	9301      	str	r3, [sp, #4]
    236e:	9801      	ldr	r0, [sp, #4]
    2370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	00100003 	.word	0x00100003
    2378:	fff7cfbf 	.word	0xfff7cfbf

0000237c <ftell>:
    237c:	68c3      	ldr	r3, [r0, #12]
    237e:	079a      	lsls	r2, r3, #30
    2380:	d105      	bne.n	238e <ftell+0x12>
    2382:	2221      	movs	r2, #33	; 0x21
    2384:	2001      	movs	r0, #1
    2386:	4b0f      	ldr	r3, [pc, #60]	; (23c4 <ftell+0x48>)
    2388:	4240      	negs	r0, r0
    238a:	601a      	str	r2, [r3, #0]
    238c:	e018      	b.n	23c0 <ftell+0x44>
    238e:	2220      	movs	r2, #32
    2390:	0319      	lsls	r1, r3, #12
    2392:	d50b      	bpl.n	23ac <ftell+0x30>
    2394:	4213      	tst	r3, r2
    2396:	d002      	beq.n	239e <ftell+0x22>
    2398:	6a43      	ldr	r3, [r0, #36]	; 0x24
    239a:	6858      	ldr	r0, [r3, #4]
    239c:	e004      	b.n	23a8 <ftell+0x2c>
    239e:	6803      	ldr	r3, [r0, #0]
    23a0:	6982      	ldr	r2, [r0, #24]
    23a2:	6900      	ldr	r0, [r0, #16]
    23a4:	189b      	adds	r3, r3, r2
    23a6:	1a18      	subs	r0, r3, r0
    23a8:	3801      	subs	r0, #1
    23aa:	e009      	b.n	23c0 <ftell+0x44>
    23ac:	4213      	tst	r3, r2
    23ae:	d002      	beq.n	23b6 <ftell+0x3a>
    23b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    23b2:	6858      	ldr	r0, [r3, #4]
    23b4:	e004      	b.n	23c0 <ftell+0x44>
    23b6:	6803      	ldr	r3, [r0, #0]
    23b8:	6982      	ldr	r2, [r0, #24]
    23ba:	6900      	ldr	r0, [r0, #16]
    23bc:	189b      	adds	r3, r3, r2
    23be:	1a18      	subs	r0, r3, r0
    23c0:	4770      	bx	lr
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	100000d8 	.word	0x100000d8

000023c8 <remove>:
    23c8:	b510      	push	{r4, lr}
    23ca:	1c04      	adds	r4, r0, #0
    23cc:	f000 f806 	bl	23dc <strlen>
    23d0:	1c01      	adds	r1, r0, #0
    23d2:	1c20      	adds	r0, r4, #0
    23d4:	f000 f8e6 	bl	25a4 <__sys_remove>
    23d8:	bd10      	pop	{r4, pc}
	...

000023dc <strlen>:
    23dc:	b510      	push	{r4, lr}
    23de:	1c43      	adds	r3, r0, #1
    23e0:	0782      	lsls	r2, r0, #30
    23e2:	d006      	beq.n	23f2 <strlen+0x16>
    23e4:	3001      	adds	r0, #1
    23e6:	1e42      	subs	r2, r0, #1
    23e8:	7812      	ldrb	r2, [r2, #0]
    23ea:	2a00      	cmp	r2, #0
    23ec:	d1f8      	bne.n	23e0 <strlen+0x4>
    23ee:	1ac0      	subs	r0, r0, r3
    23f0:	e018      	b.n	2424 <strlen+0x48>
    23f2:	6802      	ldr	r2, [r0, #0]
    23f4:	490c      	ldr	r1, [pc, #48]	; (2428 <strlen+0x4c>)
    23f6:	4c0d      	ldr	r4, [pc, #52]	; (242c <strlen+0x50>)
    23f8:	1851      	adds	r1, r2, r1
    23fa:	4391      	bics	r1, r2
    23fc:	4221      	tst	r1, r4
    23fe:	d101      	bne.n	2404 <strlen+0x28>
    2400:	3004      	adds	r0, #4
    2402:	e7f6      	b.n	23f2 <strlen+0x16>
    2404:	b2d4      	uxtb	r4, r2
    2406:	1c41      	adds	r1, r0, #1
    2408:	2c00      	cmp	r4, #0
    240a:	d00a      	beq.n	2422 <strlen+0x46>
    240c:	24ff      	movs	r4, #255	; 0xff
    240e:	0224      	lsls	r4, r4, #8
    2410:	1c81      	adds	r1, r0, #2
    2412:	4222      	tst	r2, r4
    2414:	d005      	beq.n	2422 <strlen+0x46>
    2416:	24ff      	movs	r4, #255	; 0xff
    2418:	0424      	lsls	r4, r4, #16
    241a:	1cc1      	adds	r1, r0, #3
    241c:	4222      	tst	r2, r4
    241e:	d000      	beq.n	2422 <strlen+0x46>
    2420:	1d01      	adds	r1, r0, #4
    2422:	1ac8      	subs	r0, r1, r3
    2424:	bd10      	pop	{r4, pc}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	fefefeff 	.word	0xfefefeff
    242c:	80808080 	.word	0x80808080

00002430 <_sbrk>:
    2430:	b570      	push	{r4, r5, r6, lr}
    2432:	4d0c      	ldr	r5, [pc, #48]	; (2464 <_sbrk+0x34>)
    2434:	682b      	ldr	r3, [r5, #0]
    2436:	2b00      	cmp	r3, #0
    2438:	d101      	bne.n	243e <_sbrk+0xe>
    243a:	4b0b      	ldr	r3, [pc, #44]	; (2468 <_sbrk+0x38>)
    243c:	602b      	str	r3, [r5, #0]
    243e:	2303      	movs	r3, #3
    2440:	1cc4      	adds	r4, r0, #3
    2442:	682e      	ldr	r6, [r5, #0]
    2444:	439c      	bics	r4, r3
    2446:	1934      	adds	r4, r6, r4
    2448:	1c20      	adds	r0, r4, #0
    244a:	f000 f837 	bl	24bc <__check_heap_overflow>
    244e:	2800      	cmp	r0, #0
    2450:	d102      	bne.n	2458 <_sbrk+0x28>
    2452:	602c      	str	r4, [r5, #0]
    2454:	1c30      	adds	r0, r6, #0
    2456:	e004      	b.n	2462 <_sbrk+0x32>
    2458:	220c      	movs	r2, #12
    245a:	2001      	movs	r0, #1
    245c:	4b03      	ldr	r3, [pc, #12]	; (246c <_sbrk+0x3c>)
    245e:	4240      	negs	r0, r0
    2460:	601a      	str	r2, [r3, #0]
    2462:	bd70      	pop	{r4, r5, r6, pc}
    2464:	1000022c 	.word	0x1000022c
    2468:	10000230 	.word	0x10000230
    246c:	100000d8 	.word	0x100000d8

00002470 <_do_fflush>:
    2470:	2303      	movs	r3, #3
    2472:	68c2      	ldr	r2, [r0, #12]
    2474:	b570      	push	{r4, r5, r6, lr}
    2476:	4013      	ands	r3, r2
    2478:	1c04      	adds	r4, r0, #0
    247a:	1e18      	subs	r0, r3, #0
    247c:	d01a      	beq.n	24b4 <_do_fflush+0x44>
    247e:	0693      	lsls	r3, r2, #26
    2480:	d505      	bpl.n	248e <_do_fflush+0x1e>
    2482:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2484:	1c20      	adds	r0, r4, #0
    2486:	685e      	ldr	r6, [r3, #4]
    2488:	f7ff fd5a 	bl	1f40 <_deferredlazyseek>
    248c:	e004      	b.n	2498 <_do_fflush+0x28>
    248e:	6823      	ldr	r3, [r4, #0]
    2490:	69a2      	ldr	r2, [r4, #24]
    2492:	189e      	adds	r6, r3, r2
    2494:	6923      	ldr	r3, [r4, #16]
    2496:	1af6      	subs	r6, r6, r3
    2498:	68e2      	ldr	r2, [r4, #12]
    249a:	4b07      	ldr	r3, [pc, #28]	; (24b8 <_do_fflush+0x48>)
    249c:	1c20      	adds	r0, r4, #0
    249e:	4013      	ands	r3, r2
    24a0:	60e3      	str	r3, [r4, #12]
    24a2:	f7ff fda3 	bl	1fec <_fflush>
    24a6:	1c05      	adds	r5, r0, #0
    24a8:	1c31      	adds	r1, r6, #0
    24aa:	1c20      	adds	r0, r4, #0
    24ac:	2200      	movs	r2, #0
    24ae:	f7ff fee5 	bl	227c <fseek>
    24b2:	1c28      	adds	r0, r5, #0
    24b4:	bd70      	pop	{r4, r5, r6, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	ffffcfff 	.word	0xffffcfff

000024bc <__check_heap_overflow>:
    24bc:	4b03      	ldr	r3, [pc, #12]	; (24cc <__check_heap_overflow+0x10>)
    24be:	1c02      	adds	r2, r0, #0
    24c0:	1e18      	subs	r0, r3, #0
    24c2:	d002      	beq.n	24ca <__check_heap_overflow+0xe>
    24c4:	2000      	movs	r0, #0
    24c6:	429a      	cmp	r2, r3
    24c8:	4140      	adcs	r0, r0
    24ca:	4770      	bx	lr
    24cc:	00000000 	.word	0x00000000

000024d0 <__aeabi_idiv>:
    24d0:	0003      	movs	r3, r0
    24d2:	430b      	orrs	r3, r1
    24d4:	d421      	bmi.n	251a <idiv_negative>

000024d6 <__aeabi_uidiv>:
    24d6:	2900      	cmp	r1, #0
    24d8:	d031      	beq.n	253e <idiv_divzero>
    24da:	2201      	movs	r2, #1
    24dc:	07d2      	lsls	r2, r2, #31
    24de:	0903      	lsrs	r3, r0, #4
    24e0:	e001      	b.n	24e6 <div_search4a>

000024e2 <div_search4>:
    24e2:	0109      	lsls	r1, r1, #4
    24e4:	0912      	lsrs	r2, r2, #4

000024e6 <div_search4a>:
    24e6:	4299      	cmp	r1, r3
    24e8:	d9fb      	bls.n	24e2 <div_search4>
    24ea:	0843      	lsrs	r3, r0, #1
    24ec:	e001      	b.n	24f2 <div_search1a>

000024ee <div_search1>:
    24ee:	0049      	lsls	r1, r1, #1
    24f0:	0852      	lsrs	r2, r2, #1

000024f2 <div_search1a>:
    24f2:	4299      	cmp	r1, r3
    24f4:	d9fb      	bls.n	24ee <div_search1>
    24f6:	e000      	b.n	24fa <div_loop1a>

000024f8 <div_loop1>:
    24f8:	0849      	lsrs	r1, r1, #1

000024fa <div_loop1a>:
    24fa:	1a40      	subs	r0, r0, r1
    24fc:	d307      	bcc.n	250e <div1>

000024fe <div2>:
    24fe:	4152      	adcs	r2, r2
    2500:	d3fa      	bcc.n	24f8 <div_loop1>
    2502:	4601      	mov	r1, r0
    2504:	4610      	mov	r0, r2
    2506:	4770      	bx	lr

00002508 <div_loop2>:
    2508:	0849      	lsrs	r1, r1, #1
    250a:	1840      	adds	r0, r0, r1
    250c:	d2f7      	bcs.n	24fe <div2>

0000250e <div1>:
    250e:	1892      	adds	r2, r2, r2
    2510:	d3fa      	bcc.n	2508 <div_loop2>
    2512:	1840      	adds	r0, r0, r1
    2514:	4601      	mov	r1, r0
    2516:	4610      	mov	r0, r2
    2518:	4770      	bx	lr

0000251a <idiv_negative>:
    251a:	0fcb      	lsrs	r3, r1, #31
    251c:	d000      	beq.n	2520 <idiv_neg1>
    251e:	4249      	negs	r1, r1

00002520 <idiv_neg1>:
    2520:	1002      	asrs	r2, r0, #32
    2522:	d500      	bpl.n	2526 <idiv_neg2>
    2524:	4240      	negs	r0, r0

00002526 <idiv_neg2>:
    2526:	4053      	eors	r3, r2
    2528:	b508      	push	{r3, lr}
    252a:	f7ff ffd4 	bl	24d6 <__aeabi_uidiv>
    252e:	bc0c      	pop	{r2, r3}

00002530 <idiv_sign>:
    2530:	1052      	asrs	r2, r2, #1
    2532:	d300      	bcc.n	2536 <idiv_sign1>
    2534:	4240      	negs	r0, r0

00002536 <idiv_sign1>:
    2536:	2a00      	cmp	r2, #0
    2538:	d500      	bpl.n	253c <idiv_ret>
    253a:	4249      	negs	r1, r1

0000253c <idiv_ret>:
    253c:	4718      	bx	r3

0000253e <idiv_divzero>:
    253e:	46f4      	mov	ip, lr
    2540:	2000      	movs	r0, #0
    2542:	f000 f801 	bl	2548 <__aeabi_idiv0>
    2546:	4760      	bx	ip

00002548 <__aeabi_idiv0>:
    2548:	4770      	bx	lr

0000254a <__aeabi_lowlevel_memset>:
    254a:	4684      	mov	ip, r0
    254c:	3a04      	subs	r2, #4
    254e:	d309      	bcc.n	2564 <memset1>
    2550:	0783      	lsls	r3, r0, #30
    2552:	d107      	bne.n	2564 <memset1>
    2554:	0609      	lsls	r1, r1, #24
    2556:	0a0b      	lsrs	r3, r1, #8
    2558:	4319      	orrs	r1, r3
    255a:	0c0b      	lsrs	r3, r1, #16
    255c:	4319      	orrs	r1, r3

0000255e <memset4>:
    255e:	3a04      	subs	r2, #4
    2560:	c002      	stmia	r0!, {r1}
    2562:	d2fc      	bcs.n	255e <memset4>

00002564 <memset1>:
    2564:	3204      	adds	r2, #4
    2566:	d003      	beq.n	2570 <memset1_ret>

00002568 <memset1a>:
    2568:	7001      	strb	r1, [r0, #0]
    256a:	3001      	adds	r0, #1
    256c:	3a01      	subs	r2, #1
    256e:	d1fb      	bne.n	2568 <memset1a>

00002570 <memset1_ret>:
    2570:	4660      	mov	r0, ip
    2572:	4770      	bx	lr

00002574 <__exit>:
    2574:	2018      	movs	r0, #24
    2576:	4901      	ldr	r1, [pc, #4]	; (257c <__exit+0x8>)
    2578:	beab      	bkpt	0x00ab
    257a:	4770      	bx	lr
    257c:	00020026 	.word	0x00020026

00002580 <__sys_close>:
    2580:	b403      	push	{r0, r1}
    2582:	4669      	mov	r1, sp
    2584:	2002      	movs	r0, #2
    2586:	beab      	bkpt	0x00ab
    2588:	b002      	add	sp, #8
    258a:	4770      	bx	lr

0000258c <__sys_flen>:
    258c:	b403      	push	{r0, r1}
    258e:	4669      	mov	r1, sp
    2590:	200c      	movs	r0, #12
    2592:	beab      	bkpt	0x00ab
    2594:	b002      	add	sp, #8
    2596:	4770      	bx	lr

00002598 <__sys_istty>:
    2598:	b403      	push	{r0, r1}
    259a:	4669      	mov	r1, sp
    259c:	2009      	movs	r0, #9
    259e:	beab      	bkpt	0x00ab
    25a0:	b002      	add	sp, #8
    25a2:	4770      	bx	lr

000025a4 <__sys_remove>:
    25a4:	b403      	push	{r0, r1}
    25a6:	4669      	mov	r1, sp
    25a8:	200e      	movs	r0, #14
    25aa:	beab      	bkpt	0x00ab
    25ac:	b002      	add	sp, #8
    25ae:	4770      	bx	lr

000025b0 <__sys_seek>:
    25b0:	b403      	push	{r0, r1}
    25b2:	4669      	mov	r1, sp
    25b4:	200a      	movs	r0, #10
    25b6:	beab      	bkpt	0x00ab
    25b8:	b002      	add	sp, #8
    25ba:	4770      	bx	lr

000025bc <__sys_tmpnam>:
    25bc:	b40f      	push	{r0, r1, r2, r3}
    25be:	4669      	mov	r1, sp
    25c0:	200d      	movs	r0, #13
    25c2:	beab      	bkpt	0x00ab
    25c4:	b004      	add	sp, #16
    25c6:	4770      	bx	lr

000025c8 <__sys_write>:
    25c8:	b40f      	push	{r0, r1, r2, r3}
    25ca:	4669      	mov	r1, sp
    25cc:	2005      	movs	r0, #5
    25ce:	beab      	bkpt	0x00ab
    25d0:	b004      	add	sp, #16
    25d2:	4770      	bx	lr
    25d4:	00000f20 	.word	0x00000f20
    25d8:	00000f3c 	.word	0x00000f3c
    25dc:	00000f54 	.word	0x00000f54
    25e0:	00000f6c 	.word	0x00000f6c
    25e4:	00000f88 	.word	0x00000f88
    25e8:	00000fec 	.word	0x00000fec
    25ec:	00001008 	.word	0x00001008
    25f0:	00001020 	.word	0x00001020
    25f4:	00001038 	.word	0x00001038
    25f8:	00001054 	.word	0x00001054
    25fc:	00001164 	.word	0x00001164
    2600:	00001180 	.word	0x00001180
    2604:	0000119c 	.word	0x0000119c
    2608:	000011b4 	.word	0x000011b4
    260c:	000011d0 	.word	0x000011d0
    2610:	00001230 	.word	0x00001230
    2614:	0000124c 	.word	0x0000124c
    2618:	00001268 	.word	0x00001268
    261c:	00001280 	.word	0x00001280
    2620:	0000129c 	.word	0x0000129c
    2624:	000012b4 	.word	0x000012b4
    2628:	000013a4 	.word	0x000013a4
    262c:	000013c0 	.word	0x000013c0
    2630:	000013d8 	.word	0x000013d8
    2634:	000013f0 	.word	0x000013f0
    2638:	0000140c 	.word	0x0000140c
    263c:	00001428 	.word	0x00001428
    2640:	00001444 	.word	0x00001444
    2644:	000014a4 	.word	0x000014a4
    2648:	000014c0 	.word	0x000014c0
    264c:	000014d8 	.word	0x000014d8
    2650:	000014f0 	.word	0x000014f0
    2654:	0000150c 	.word	0x0000150c
    2658:	00001524 	.word	0x00001524
    265c:	00001588 	.word	0x00001588
    2660:	000015a4 	.word	0x000015a4
    2664:	000015bc 	.word	0x000015bc
    2668:	000015d4 	.word	0x000015d4
    266c:	000015f0 	.word	0x000015f0
    2670:	0000160c 	.word	0x0000160c
    2674:	00001938 	.word	0x00001938
    2678:	00001940 	.word	0x00001940
    267c:	00001948 	.word	0x00001948
    2680:	00001950 	.word	0x00001950
    2684:	00001958 	.word	0x00001958
    2688:	00001960 	.word	0x00001960
    268c:	00001968 	.word	0x00001968
    2690:	00001970 	.word	0x00001970
    2694:	00001978 	.word	0x00001978
    2698:	00001980 	.word	0x00001980
    269c:	00001a7c 	.word	0x00001a7c
    26a0:	00001a84 	.word	0x00001a84
    26a4:	00001a8c 	.word	0x00001a8c
    26a8:	00001a94 	.word	0x00001a94
    26ac:	00001a9c 	.word	0x00001a9c
    26b0:	00001aa4 	.word	0x00001aa4
    26b4:	00001aac 	.word	0x00001aac
    26b8:	00001ab4 	.word	0x00001ab4
    26bc:	00001abc 	.word	0x00001abc
    26c0:	00001ac4 	.word	0x00001ac4
    26c4:	00001bc0 	.word	0x00001bc0
    26c8:	00001bc8 	.word	0x00001bc8
    26cc:	00001bd0 	.word	0x00001bd0
    26d0:	00001bd8 	.word	0x00001bd8
    26d4:	00001be0 	.word	0x00001be0
    26d8:	00001be8 	.word	0x00001be8
    26dc:	00001bf0 	.word	0x00001bf0
    26e0:	00001bf8 	.word	0x00001bf8
    26e4:	00001c00 	.word	0x00001c00
    26e8:	00001c08 	.word	0x00001c08
    26ec:	00001d04 	.word	0x00001d04
    26f0:	00001d0c 	.word	0x00001d0c
    26f4:	00001d14 	.word	0x00001d14
    26f8:	00001d1c 	.word	0x00001d1c
    26fc:	00001d24 	.word	0x00001d24
    2700:	00001d2c 	.word	0x00001d2c
    2704:	00001d34 	.word	0x00001d34
    2708:	00001d3c 	.word	0x00001d3c
    270c:	00001d44 	.word	0x00001d44
    2710:	00001d4c 	.word	0x00001d4c
    2714:	00770072 	.word	0x00770072
    2718:	202a2a2a 	.word	0x202a2a2a
    271c:	7973435f 	.word	0x7973435f
    2720:	6c615f73 	.word	0x6c615f73
    2724:	20636f6c 	.word	0x20636f6c
    2728:	6c696166 	.word	0x6c696166
    272c:	000a6465 	.word	0x000a6465
